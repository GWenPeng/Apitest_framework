#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import EThriftException.ttypes

from thrift.transport import TTransport
all_structs = []


class ncTSiteType(object):
    NCT_SITE_TYPE_NORMAL = 0
    NCT_SITE_TYPE_MASTER = 1
    NCT_SITE_TYPE_SLAVE = 2

    _VALUES_TO_NAMES = {
        0: "NCT_SITE_TYPE_NORMAL",
        1: "NCT_SITE_TYPE_MASTER",
        2: "NCT_SITE_TYPE_SLAVE",
    }

    _NAMES_TO_VALUES = {
        "NCT_SITE_TYPE_NORMAL": 0,
        "NCT_SITE_TYPE_MASTER": 1,
        "NCT_SITE_TYPE_SLAVE": 2,
    }


class ncTSiteVirusStatus(object):
    NCT_COMPLETE_UPDATE = 0
    NCT_NEED_UPDATE = 1

    _VALUES_TO_NAMES = {
        0: "NCT_COMPLETE_UPDATE",
        1: "NCT_NEED_UPDATE",
    }

    _NAMES_TO_VALUES = {
        "NCT_COMPLETE_UPDATE": 0,
        "NCT_NEED_UPDATE": 1,
    }


class ncTShareSiteError(object):
    NCT_SITE_NETWORK_NOT_AVAILABLE = 10001
    NCT_SITE_NOT_ENABLE_MULTIMODE = 10002
    NCT_SITE_NAME_IS_OCCUPT = 10003
    NCT_SITE_UNKNOWN_ERROR = 10004
    NCT_SITE_HAS_BEEN_ADDED = 10005
    NCT_SITE_NAME_NOT_VALID = 10006
    NCT_SITE_NOT_HAS_BEEN_ADDED = 10007
    NCT_SITE_HAS_OFF_LINE = 10008
    NCT_SITE_HAS_BEEN_MASTER = 10009
    NCT_SITE_NOT_MASTER_CATNOT_ADD_SITE = 10010
    NCT_SITE_SLAVE_CANNOT_SET_MULTIMODE = 10011
    NCT_SITE_CANNOT_DELETE_LOCAL_SITE = 10012
    NCT_SITE_PARAM_ERROR = 10013
    NCT_SITE_KEY_ERROR = 10014
    NCT_SITE_ID_NOT_EXIST = 10015
    NCT_SITE_REQUEST_EXPIRED = 10016
    NCT_SITE_CANNOT_ADD_LOCAL_SITE = 10017
    NCT_MASTER_SITE_CAN_NOT_MODIFY_IP = 10018
    NCT_SITE_ALREADY_EXISTS = 10019
    NCT_SITE_NOT_AUTHORIZED = 10020
    NCT_DEVICE_CANNOT_BE_MASTER_SITE = 10021

    _VALUES_TO_NAMES = {
        10001: "NCT_SITE_NETWORK_NOT_AVAILABLE",
        10002: "NCT_SITE_NOT_ENABLE_MULTIMODE",
        10003: "NCT_SITE_NAME_IS_OCCUPT",
        10004: "NCT_SITE_UNKNOWN_ERROR",
        10005: "NCT_SITE_HAS_BEEN_ADDED",
        10006: "NCT_SITE_NAME_NOT_VALID",
        10007: "NCT_SITE_NOT_HAS_BEEN_ADDED",
        10008: "NCT_SITE_HAS_OFF_LINE",
        10009: "NCT_SITE_HAS_BEEN_MASTER",
        10010: "NCT_SITE_NOT_MASTER_CATNOT_ADD_SITE",
        10011: "NCT_SITE_SLAVE_CANNOT_SET_MULTIMODE",
        10012: "NCT_SITE_CANNOT_DELETE_LOCAL_SITE",
        10013: "NCT_SITE_PARAM_ERROR",
        10014: "NCT_SITE_KEY_ERROR",
        10015: "NCT_SITE_ID_NOT_EXIST",
        10016: "NCT_SITE_REQUEST_EXPIRED",
        10017: "NCT_SITE_CANNOT_ADD_LOCAL_SITE",
        10018: "NCT_MASTER_SITE_CAN_NOT_MODIFY_IP",
        10019: "NCT_SITE_ALREADY_EXISTS",
        10020: "NCT_SITE_NOT_AUTHORIZED",
        10021: "NCT_DEVICE_CANNOT_BE_MASTER_SITE",
    }

    _NAMES_TO_VALUES = {
        "NCT_SITE_NETWORK_NOT_AVAILABLE": 10001,
        "NCT_SITE_NOT_ENABLE_MULTIMODE": 10002,
        "NCT_SITE_NAME_IS_OCCUPT": 10003,
        "NCT_SITE_UNKNOWN_ERROR": 10004,
        "NCT_SITE_HAS_BEEN_ADDED": 10005,
        "NCT_SITE_NAME_NOT_VALID": 10006,
        "NCT_SITE_NOT_HAS_BEEN_ADDED": 10007,
        "NCT_SITE_HAS_OFF_LINE": 10008,
        "NCT_SITE_HAS_BEEN_MASTER": 10009,
        "NCT_SITE_NOT_MASTER_CATNOT_ADD_SITE": 10010,
        "NCT_SITE_SLAVE_CANNOT_SET_MULTIMODE": 10011,
        "NCT_SITE_CANNOT_DELETE_LOCAL_SITE": 10012,
        "NCT_SITE_PARAM_ERROR": 10013,
        "NCT_SITE_KEY_ERROR": 10014,
        "NCT_SITE_ID_NOT_EXIST": 10015,
        "NCT_SITE_REQUEST_EXPIRED": 10016,
        "NCT_SITE_CANNOT_ADD_LOCAL_SITE": 10017,
        "NCT_MASTER_SITE_CAN_NOT_MODIFY_IP": 10018,
        "NCT_SITE_ALREADY_EXISTS": 10019,
        "NCT_SITE_NOT_AUTHORIZED": 10020,
        "NCT_DEVICE_CANNOT_BE_MASTER_SITE": 10021,
    }


class ncTSiteInfo(object):
    """
    Attributes:
     - id
     - ip
     - name
     - type
     - linkStatus
     - usedSpace
     - totalSpace
     - siteKey
     - masterIp
     - isSync
     - siteStatus
     - heartRate
     - masterDbIp
     - siteVirusDBStatus

    """


    def __init__(self, id=None, ip=None, name=None, type=None, linkStatus=None, usedSpace=None, totalSpace=None, siteKey=None, masterIp=None, isSync=None, siteStatus=None, heartRate=None, masterDbIp=None, siteVirusDBStatus=None,):
        self.id = id
        self.ip = ip
        self.name = name
        self.type = type
        self.linkStatus = linkStatus
        self.usedSpace = usedSpace
        self.totalSpace = totalSpace
        self.siteKey = siteKey
        self.masterIp = masterIp
        self.isSync = isSync
        self.siteStatus = siteStatus
        self.heartRate = heartRate
        self.masterDbIp = masterDbIp
        self.siteVirusDBStatus = siteVirusDBStatus

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I16:
                    self.linkStatus = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.usedSpace = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.totalSpace = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.siteKey = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.masterIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I16:
                    self.isSync = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I16:
                    self.siteStatus = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.heartRate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.masterDbIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.siteVirusDBStatus = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTSiteInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 2)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 4)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.linkStatus is not None:
            oprot.writeFieldBegin('linkStatus', TType.I16, 5)
            oprot.writeI16(self.linkStatus)
            oprot.writeFieldEnd()
        if self.usedSpace is not None:
            oprot.writeFieldBegin('usedSpace', TType.I64, 6)
            oprot.writeI64(self.usedSpace)
            oprot.writeFieldEnd()
        if self.totalSpace is not None:
            oprot.writeFieldBegin('totalSpace', TType.I64, 7)
            oprot.writeI64(self.totalSpace)
            oprot.writeFieldEnd()
        if self.siteKey is not None:
            oprot.writeFieldBegin('siteKey', TType.STRING, 8)
            oprot.writeString(self.siteKey.encode('utf-8') if sys.version_info[0] == 2 else self.siteKey)
            oprot.writeFieldEnd()
        if self.masterIp is not None:
            oprot.writeFieldBegin('masterIp', TType.STRING, 9)
            oprot.writeString(self.masterIp.encode('utf-8') if sys.version_info[0] == 2 else self.masterIp)
            oprot.writeFieldEnd()
        if self.isSync is not None:
            oprot.writeFieldBegin('isSync', TType.I16, 10)
            oprot.writeI16(self.isSync)
            oprot.writeFieldEnd()
        if self.siteStatus is not None:
            oprot.writeFieldBegin('siteStatus', TType.I16, 11)
            oprot.writeI16(self.siteStatus)
            oprot.writeFieldEnd()
        if self.heartRate is not None:
            oprot.writeFieldBegin('heartRate', TType.I64, 12)
            oprot.writeI64(self.heartRate)
            oprot.writeFieldEnd()
        if self.masterDbIp is not None:
            oprot.writeFieldBegin('masterDbIp', TType.STRING, 13)
            oprot.writeString(self.masterDbIp.encode('utf-8') if sys.version_info[0] == 2 else self.masterDbIp)
            oprot.writeFieldEnd()
        if self.siteVirusDBStatus is not None:
            oprot.writeFieldBegin('siteVirusDBStatus', TType.BOOL, 14)
            oprot.writeBool(self.siteVirusDBStatus)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAddSiteParam(object):
    """
    Attributes:
     - ip
     - name
     - siteKey

    """


    def __init__(self, ip=None, name=None, siteKey=None,):
        self.ip = ip
        self.name = name
        self.siteKey = siteKey

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.siteKey = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAddSiteParam')
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 1)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.siteKey is not None:
            oprot.writeFieldBegin('siteKey', TType.STRING, 3)
            oprot.writeString(self.siteKey.encode('utf-8') if sys.version_info[0] == 2 else self.siteKey)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEditSiteParam(object):
    """
    Attributes:
     - id
     - ip
     - name

    """


    def __init__(self, id=None, ip=None, name=None,):
        self.id = id
        self.ip = ip
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEditSiteParam')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 2)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncTSiteInfo)
ncTSiteInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ip', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.I32, 'type', None, None, ),  # 4
    (5, TType.I16, 'linkStatus', None, None, ),  # 5
    (6, TType.I64, 'usedSpace', None, None, ),  # 6
    (7, TType.I64, 'totalSpace', None, None, ),  # 7
    (8, TType.STRING, 'siteKey', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'masterIp', 'UTF8', None, ),  # 9
    (10, TType.I16, 'isSync', None, None, ),  # 10
    (11, TType.I16, 'siteStatus', None, None, ),  # 11
    (12, TType.I64, 'heartRate', None, None, ),  # 12
    (13, TType.STRING, 'masterDbIp', 'UTF8', None, ),  # 13
    (14, TType.BOOL, 'siteVirusDBStatus', None, None, ),  # 14
)
all_structs.append(ncTAddSiteParam)
ncTAddSiteParam.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ip', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'siteKey', 'UTF8', None, ),  # 3
)
all_structs.append(ncTEditSiteParam)
ncTEditSiteParam.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ip', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
)
fix_spec(all_structs)
del all_structs
