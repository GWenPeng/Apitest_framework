#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ShareSite import ncTShareSite
from ShareSite.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void SetMultSiteStatus(bool status)')
    print('  bool GetMultSiteStatus()')
    print('  ncTSiteInfo GetLocalSiteInfo()')
    print('  void AddSite(ncTAddSiteParam paramInfo)')
    print('  void DeleteSite(string siteID)')
    print('  void EditSite(ncTEditSiteParam paramInfo)')
    print('   GetSiteInfo()')
    print('  ncTSiteInfo NodifySiteAddBegin()')
    print('  void NodifySiteAdd(string masterIp)')
    print('  void NodifySiteDelete()')
    print('  ncTSiteInfo GetLocalSiteInfoByRemote()')
    print('  void UpdateHeartByMaster(string siteId)')
    print('  void SyncSlaveToMaster(string data)')
    print('  void SyncMasterToSlave(string data)')
    print('  void UpdateSiteIp(string ip)')
    print('  ncTSiteInfo GetSiteInfoById(string siteid)')
    print('  void CheckSign(string expired, string sign, string site_id, bool flag)')
    print('  void RestartServer(string server_name)')
    print('  void UpdateEVFSSiteInfo()')
    print('  void CreateCrossDomainXml()')
    print('  void UpdateSiteMasterDbIp(string ip)')
    print('  void SyncOSSInfo(string data)')
    print('  void UpdateSiteVirusStatus(bool Status)')
    print('  void UpdateAllSiteVirusStatus(bool Status)')
    print('  bool GetSiteVirusStatus()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ncTShareSite.Client(protocol)
transport.open()

if cmd == 'SetMultSiteStatus':
    if len(args) != 1:
        print('SetMultSiteStatus requires 1 args')
        sys.exit(1)
    pp.pprint(client.SetMultSiteStatus(eval(args[0]),))

elif cmd == 'GetMultSiteStatus':
    if len(args) != 0:
        print('GetMultSiteStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetMultSiteStatus())

elif cmd == 'GetLocalSiteInfo':
    if len(args) != 0:
        print('GetLocalSiteInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetLocalSiteInfo())

elif cmd == 'AddSite':
    if len(args) != 1:
        print('AddSite requires 1 args')
        sys.exit(1)
    pp.pprint(client.AddSite(eval(args[0]),))

elif cmd == 'DeleteSite':
    if len(args) != 1:
        print('DeleteSite requires 1 args')
        sys.exit(1)
    pp.pprint(client.DeleteSite(args[0],))

elif cmd == 'EditSite':
    if len(args) != 1:
        print('EditSite requires 1 args')
        sys.exit(1)
    pp.pprint(client.EditSite(eval(args[0]),))

elif cmd == 'GetSiteInfo':
    if len(args) != 0:
        print('GetSiteInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetSiteInfo())

elif cmd == 'NodifySiteAddBegin':
    if len(args) != 0:
        print('NodifySiteAddBegin requires 0 args')
        sys.exit(1)
    pp.pprint(client.NodifySiteAddBegin())

elif cmd == 'NodifySiteAdd':
    if len(args) != 1:
        print('NodifySiteAdd requires 1 args')
        sys.exit(1)
    pp.pprint(client.NodifySiteAdd(args[0],))

elif cmd == 'NodifySiteDelete':
    if len(args) != 0:
        print('NodifySiteDelete requires 0 args')
        sys.exit(1)
    pp.pprint(client.NodifySiteDelete())

elif cmd == 'GetLocalSiteInfoByRemote':
    if len(args) != 0:
        print('GetLocalSiteInfoByRemote requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetLocalSiteInfoByRemote())

elif cmd == 'UpdateHeartByMaster':
    if len(args) != 1:
        print('UpdateHeartByMaster requires 1 args')
        sys.exit(1)
    pp.pprint(client.UpdateHeartByMaster(args[0],))

elif cmd == 'SyncSlaveToMaster':
    if len(args) != 1:
        print('SyncSlaveToMaster requires 1 args')
        sys.exit(1)
    pp.pprint(client.SyncSlaveToMaster(args[0],))

elif cmd == 'SyncMasterToSlave':
    if len(args) != 1:
        print('SyncMasterToSlave requires 1 args')
        sys.exit(1)
    pp.pprint(client.SyncMasterToSlave(args[0],))

elif cmd == 'UpdateSiteIp':
    if len(args) != 1:
        print('UpdateSiteIp requires 1 args')
        sys.exit(1)
    pp.pprint(client.UpdateSiteIp(args[0],))

elif cmd == 'GetSiteInfoById':
    if len(args) != 1:
        print('GetSiteInfoById requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetSiteInfoById(args[0],))

elif cmd == 'CheckSign':
    if len(args) != 4:
        print('CheckSign requires 4 args')
        sys.exit(1)
    pp.pprint(client.CheckSign(args[0], args[1], args[2], eval(args[3]),))

elif cmd == 'RestartServer':
    if len(args) != 1:
        print('RestartServer requires 1 args')
        sys.exit(1)
    pp.pprint(client.RestartServer(args[0],))

elif cmd == 'UpdateEVFSSiteInfo':
    if len(args) != 0:
        print('UpdateEVFSSiteInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.UpdateEVFSSiteInfo())

elif cmd == 'CreateCrossDomainXml':
    if len(args) != 0:
        print('CreateCrossDomainXml requires 0 args')
        sys.exit(1)
    pp.pprint(client.CreateCrossDomainXml())

elif cmd == 'UpdateSiteMasterDbIp':
    if len(args) != 1:
        print('UpdateSiteMasterDbIp requires 1 args')
        sys.exit(1)
    pp.pprint(client.UpdateSiteMasterDbIp(args[0],))

elif cmd == 'SyncOSSInfo':
    if len(args) != 1:
        print('SyncOSSInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.SyncOSSInfo(args[0],))

elif cmd == 'UpdateSiteVirusStatus':
    if len(args) != 1:
        print('UpdateSiteVirusStatus requires 1 args')
        sys.exit(1)
    pp.pprint(client.UpdateSiteVirusStatus(eval(args[0]),))

elif cmd == 'UpdateAllSiteVirusStatus':
    if len(args) != 1:
        print('UpdateAllSiteVirusStatus requires 1 args')
        sys.exit(1)
    pp.pprint(client.UpdateAllSiteVirusStatus(eval(args[0]),))

elif cmd == 'GetSiteVirusStatus':
    if len(args) != 0:
        print('GetSiteVirusStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetSiteVirusStatus())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
