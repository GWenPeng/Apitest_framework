#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import EThriftException.ttypes

from thrift.transport import TTransport
all_structs = []


class ncTEVFSDateUnit(object):
    """
    文件统计-统计日期单位

    """
    NCT_EVFS_DATE_YEAR = 1
    NCT_EVFS_DATE_MONTH = 2
    NCT_EVFS_DATE_DAY = 3

    _VALUES_TO_NAMES = {
        1: "NCT_EVFS_DATE_YEAR",
        2: "NCT_EVFS_DATE_MONTH",
        3: "NCT_EVFS_DATE_DAY",
    }

    _NAMES_TO_VALUES = {
        "NCT_EVFS_DATE_YEAR": 1,
        "NCT_EVFS_DATE_MONTH": 2,
        "NCT_EVFS_DATE_DAY": 3,
    }


class ncTEVFSOperatedType(object):
    """
    操作统计中的操作类型

    """
    NCT_EVFS_OP_UNKNOWN = 0
    NCT_EVFS_OP_DIR_CREATED = 1
    NCT_EVFS_OP_DIR_DEL_TO_RECYCLE = 2
    NCT_EVFS_OP_DIR_LIST = 3
    NCT_EVFS_OP_DIR_RENAME = 4
    NCT_EVFS_OP_DIR_RESOTRE = 5
    NCT_EVFS_OP_DIR_DELETE = 6
    NCT_EVFS_OP_DIR_MOVE = 7
    NCT_EVFS_OP_DIR_COPY = 8
    NCT_EVFS_OP_FILE_CREATED = 11
    NCT_EVFS_OP_FILE_MODIFY = 12
    NCT_EVFS_OP_FILE_DEL_TO_RECYCLE = 13
    NCT_EVFS_OP_FILE_DOWNLOAD = 14
    NCT_EVFS_OP_FILE_RAPID_SUCCEE = 15
    NCT_EVFS_OP_FILE_RAPID_FAIL = 16
    NCT_EVFS_OP_FILE_RENAME = 17
    NCT_EVFS_OP_FILE_RESTORE = 18
    NCT_EVFS_OP_FILE_DELETE = 19
    NCT_EVFS_OP_FILE_COPY = 20
    NCT_EVFS_OP_FILE_MOVE = 21

    _VALUES_TO_NAMES = {
        0: "NCT_EVFS_OP_UNKNOWN",
        1: "NCT_EVFS_OP_DIR_CREATED",
        2: "NCT_EVFS_OP_DIR_DEL_TO_RECYCLE",
        3: "NCT_EVFS_OP_DIR_LIST",
        4: "NCT_EVFS_OP_DIR_RENAME",
        5: "NCT_EVFS_OP_DIR_RESOTRE",
        6: "NCT_EVFS_OP_DIR_DELETE",
        7: "NCT_EVFS_OP_DIR_MOVE",
        8: "NCT_EVFS_OP_DIR_COPY",
        11: "NCT_EVFS_OP_FILE_CREATED",
        12: "NCT_EVFS_OP_FILE_MODIFY",
        13: "NCT_EVFS_OP_FILE_DEL_TO_RECYCLE",
        14: "NCT_EVFS_OP_FILE_DOWNLOAD",
        15: "NCT_EVFS_OP_FILE_RAPID_SUCCEE",
        16: "NCT_EVFS_OP_FILE_RAPID_FAIL",
        17: "NCT_EVFS_OP_FILE_RENAME",
        18: "NCT_EVFS_OP_FILE_RESTORE",
        19: "NCT_EVFS_OP_FILE_DELETE",
        20: "NCT_EVFS_OP_FILE_COPY",
        21: "NCT_EVFS_OP_FILE_MOVE",
    }

    _NAMES_TO_VALUES = {
        "NCT_EVFS_OP_UNKNOWN": 0,
        "NCT_EVFS_OP_DIR_CREATED": 1,
        "NCT_EVFS_OP_DIR_DEL_TO_RECYCLE": 2,
        "NCT_EVFS_OP_DIR_LIST": 3,
        "NCT_EVFS_OP_DIR_RENAME": 4,
        "NCT_EVFS_OP_DIR_RESOTRE": 5,
        "NCT_EVFS_OP_DIR_DELETE": 6,
        "NCT_EVFS_OP_DIR_MOVE": 7,
        "NCT_EVFS_OP_DIR_COPY": 8,
        "NCT_EVFS_OP_FILE_CREATED": 11,
        "NCT_EVFS_OP_FILE_MODIFY": 12,
        "NCT_EVFS_OP_FILE_DEL_TO_RECYCLE": 13,
        "NCT_EVFS_OP_FILE_DOWNLOAD": 14,
        "NCT_EVFS_OP_FILE_RAPID_SUCCEE": 15,
        "NCT_EVFS_OP_FILE_RAPID_FAIL": 16,
        "NCT_EVFS_OP_FILE_RENAME": 17,
        "NCT_EVFS_OP_FILE_RESTORE": 18,
        "NCT_EVFS_OP_FILE_DELETE": 19,
        "NCT_EVFS_OP_FILE_COPY": 20,
        "NCT_EVFS_OP_FILE_MOVE": 21,
    }


class ncTOSSBucketStyle(object):
    """
    支持的对象存储服务
    ASU   : AnyShare Universal
    CEPH  : Ceph
    OSS   : 阿里云
    BOS   : 百度开放云
    QINIU : 七牛云存储
    AWS   : 亚马逊
    AWSCN : 亚马逊中国
    AZURE : 微软Azure
    EOSS  : 单个 EOSS
    HCPS3 : 日立
    UCLOUD: UCLOUD UFile对象存储

    """
    NCT_PATH_STYLE = 0
    NCT_VIRTUAL_HOSTING_STYLE = 1

    _VALUES_TO_NAMES = {
        0: "NCT_PATH_STYLE",
        1: "NCT_VIRTUAL_HOSTING_STYLE",
    }

    _NAMES_TO_VALUES = {
        "NCT_PATH_STYLE": 0,
        "NCT_VIRTUAL_HOSTING_STYLE": 1,
    }


class ncTEVFSTransferOption(object):
    """
    大文件传输限制：上传还是下载

    """
    NCT_UPLOAD = 1
    NCT_UPLOAD_AND_DOWNLOAD = 2

    _VALUES_TO_NAMES = {
        1: "NCT_UPLOAD",
        2: "NCT_UPLOAD_AND_DOWNLOAD",
    }

    _NAMES_TO_VALUES = {
        "NCT_UPLOAD": 1,
        "NCT_UPLOAD_AND_DOWNLOAD": 2,
    }


class ncTSuffixType(object):
    """
    限制上传的文件类型

    """
    NCT_DOCS = 1
    NCT_VIDEOS = 2
    NCT_IMAGES = 3
    NCT_COMPRESSION = 4
    NCT_SUSPICION = 5
    NCT_VIRUSES = 6
    NCT_OTHERS = 7

    _VALUES_TO_NAMES = {
        1: "NCT_DOCS",
        2: "NCT_VIDEOS",
        3: "NCT_IMAGES",
        4: "NCT_COMPRESSION",
        5: "NCT_SUSPICION",
        6: "NCT_VIRUSES",
        7: "NCT_OTHERS",
    }

    _NAMES_TO_VALUES = {
        "NCT_DOCS": 1,
        "NCT_VIDEOS": 2,
        "NCT_IMAGES": 3,
        "NCT_COMPRESSION": 4,
        "NCT_SUSPICION": 5,
        "NCT_VIRUSES": 6,
        "NCT_OTHERS": 7,
    }


class ncTEVFSCustomAttributeType(object):
    """
    自定义属性类型

    """
    NCT_ATTRIBUTE_TYPE_LEVEL = 0
    NCT_ATTRIBUTE_TYPE_ENUM = 1
    NCT_ATTRIBUTE_TYPE_NUMBER = 2
    NCT_ATTRIBUTE_TYPE_TEXT = 3
    NCT_ATTRIBUTE_TYPE_TIME = 4

    _VALUES_TO_NAMES = {
        0: "NCT_ATTRIBUTE_TYPE_LEVEL",
        1: "NCT_ATTRIBUTE_TYPE_ENUM",
        2: "NCT_ATTRIBUTE_TYPE_NUMBER",
        3: "NCT_ATTRIBUTE_TYPE_TEXT",
        4: "NCT_ATTRIBUTE_TYPE_TIME",
    }

    _NAMES_TO_VALUES = {
        "NCT_ATTRIBUTE_TYPE_LEVEL": 0,
        "NCT_ATTRIBUTE_TYPE_ENUM": 1,
        "NCT_ATTRIBUTE_TYPE_NUMBER": 2,
        "NCT_ATTRIBUTE_TYPE_TEXT": 3,
        "NCT_ATTRIBUTE_TYPE_TIME": 4,
    }


class ncTEVFSQuarantineType(object):
    """
    隔离区隔离类型

    """
    NCT_EVFS_ILLEGAL = 1
    NCT_EVFS_VIRUS = 2
    NCT_EVFS_KEY_WORD = 4

    _VALUES_TO_NAMES = {
        1: "NCT_EVFS_ILLEGAL",
        2: "NCT_EVFS_VIRUS",
        4: "NCT_EVFS_KEY_WORD",
    }

    _NAMES_TO_VALUES = {
        "NCT_EVFS_ILLEGAL": 1,
        "NCT_EVFS_VIRUS": 2,
        "NCT_EVFS_KEY_WORD": 4,
    }


class ncTQuarantineState(object):
    NCT_EVFS_ALL = 1
    NCT_EVFS_APPEAL = 2

    _VALUES_TO_NAMES = {
        1: "NCT_EVFS_ALL",
        2: "NCT_EVFS_APPEAL",
    }

    _NAMES_TO_VALUES = {
        "NCT_EVFS_ALL": 1,
        "NCT_EVFS_APPEAL": 2,
    }


class ncTEVFSError(object):
    NCT_INVALID_NULL_ARGUMENT = 10001
    NCT_FAILED_TO_GET_EOFS_MGR = 10002
    NCT_FAILED_TO_GET_EVFS = 10003
    NCT_FAILED_TO_GET_EVFS_OTAG_IOC = 10004
    NCT_ONLY_SUPPORT_GNS_CID_OBJECT = 10005
    NCT_FAILED_TO_SET_VERSION_MAX_NUM = 10006
    NCT_FAILED_TO_SET_VERSION_BUILD_CYCLE = 10007
    NCT_FAILED_TO_GET_MEM_FILE_RECORD_MGR = 10008
    NCT_INVALID_PARAM_DATA = 10009
    NCT_FAILED_TO_GET_EVFS_SPACE_QUOTA = 10010
    NCT_INVALID_SPACE_QUOTA = 10011
    NCT_FAILED_TO_GET_ETS_RESOURECE_INFO = 10012
    NCT_FAILED_TO_CREATE_STATIS_IOC = 10013
    NCT_FAILED_TO_CREATE_FINGERPRINT_IOC = 10014
    NCT_INVALID_TEVFSOP_TYPE_ARGUMENT = 10015
    NCT_INVALID_TEVFSDATE_ARGUMENT = 10016
    NCT_INVALID_RAPID_FILE_COUNT_OVERSIZE = 10017
    NCT_FAILED_TO_GET_RECYCLE_OBJECT = 10018
    NCT_SPACE_QUOTA_NOT_ENOUGH = 10019
    NCT_CAN_ONLY_GET_FILE_CSFLEVEL = 10020
    NCT_CAN_NOT_CREATE_DIR_UNDER_CURRENT_OBJ = 10021
    NCT_SAME_NAME_OBJECT_EXIST = 10022
    NCT_SAME_NAME_OBJECT_NOT_UNIQUE = 10023
    NCT_INTERNAL_ERROR = 10024
    NCT_CALL_NODE_UPDATE_INTERFACE_ERROR = 10027
    NCT_NOT_SUPPORT_GNS_CID_OBJECT = 10028
    NCT_USER_CSFLEVEL_LOWER_THAN_DOC = 10029
    NCT_FAILED_TO_CREATE_CUSTOM_ATTR_IOC = 10030
    NCT_INVALID_CUSTOM_ATTR_NAME = 10031
    NCT_CUSTOM_ATTR_ERR_EXCEED_MAX_LEVEL = 10032
    NCT_CUSTOM_ATTR_ERR_DUPLICATE_NAME = 10033
    NCT_CUSTOM_ATTR_ERR_EXCEED_MAX_ATTR = 10034
    NCT_FAILED_TO_CREATE_OBJMETADATA_DBMGR_IOC = 10035
    NCT_CAN_NOT_SET_SITE_MASTEROSS_REPEATEDLLY = 10037
    NCT_FAILED_TO_SET_TAG_MAX_NUM = 10038
    NCT_FAILED_TO_CREATE_USER_DOWNLOAD_DBMGR_IOC = 10039
    NCT_NAME_CONTAINS_INVALID_CHAR = 10040
    NCT_CID_OBJECT_NOT_EXIST = 10041
    NCT_GNS_OBJECT_NOT_EXIST = 10042
    NCT_ERR_INVALID_OBJECT_TYPE = 10043
    NCT_FAILED_TO_CREATE_EVFS_NAME_IOC = 10044
    NCT_FAILED_TO_CREATE_DOCFAVORITES_IOC = 10045
    NCT_FAILED_TO_COPY_FILE_FROM_WATERMARK_DOC = 10046
    NCT_INVALID_SUFFIXES = 10047
    NCT_FAILED_TO_CREATE_ENTRY_DOC_MANAGER = 10049
    NCT_CAN_NOT_CHANGE_TP_OSS_PROVIDER = 10101
    NCT_UNSUPPORTED_TP_OSS_PROVIDER = 10102
    NCT_CONNECT_TO_OSS_ERROR = 10103
    NCT_OSS_INFO_NOT_FOUND = 10104
    NCT_CANNOT_DISABLE_DEFAULT_OSS = 10105
    NCT_SLAVE_SITE_OSS_CANNOT_BE_DEFAULT_OSS = 10106
    NCT_OSS_NAME_CONFLICT = 10107
    NCT_CAN_SAME_OSS_EXIST = 10108
    NCT_SITE_ID_NOT_FOUND = 10109
    NCT_CANNOT_SET_SITE_ID_OF_SYNCED_OSS = 10110
    NCT_CANNOT_SET_SITE_ID_OF_DEFAULT_OSS_TO_SLAVE = 10111
    NCT_DISABLED_OSS_CANNOT_BE_DEFAULT_OSS = 10112

    _VALUES_TO_NAMES = {
        10001: "NCT_INVALID_NULL_ARGUMENT",
        10002: "NCT_FAILED_TO_GET_EOFS_MGR",
        10003: "NCT_FAILED_TO_GET_EVFS",
        10004: "NCT_FAILED_TO_GET_EVFS_OTAG_IOC",
        10005: "NCT_ONLY_SUPPORT_GNS_CID_OBJECT",
        10006: "NCT_FAILED_TO_SET_VERSION_MAX_NUM",
        10007: "NCT_FAILED_TO_SET_VERSION_BUILD_CYCLE",
        10008: "NCT_FAILED_TO_GET_MEM_FILE_RECORD_MGR",
        10009: "NCT_INVALID_PARAM_DATA",
        10010: "NCT_FAILED_TO_GET_EVFS_SPACE_QUOTA",
        10011: "NCT_INVALID_SPACE_QUOTA",
        10012: "NCT_FAILED_TO_GET_ETS_RESOURECE_INFO",
        10013: "NCT_FAILED_TO_CREATE_STATIS_IOC",
        10014: "NCT_FAILED_TO_CREATE_FINGERPRINT_IOC",
        10015: "NCT_INVALID_TEVFSOP_TYPE_ARGUMENT",
        10016: "NCT_INVALID_TEVFSDATE_ARGUMENT",
        10017: "NCT_INVALID_RAPID_FILE_COUNT_OVERSIZE",
        10018: "NCT_FAILED_TO_GET_RECYCLE_OBJECT",
        10019: "NCT_SPACE_QUOTA_NOT_ENOUGH",
        10020: "NCT_CAN_ONLY_GET_FILE_CSFLEVEL",
        10021: "NCT_CAN_NOT_CREATE_DIR_UNDER_CURRENT_OBJ",
        10022: "NCT_SAME_NAME_OBJECT_EXIST",
        10023: "NCT_SAME_NAME_OBJECT_NOT_UNIQUE",
        10024: "NCT_INTERNAL_ERROR",
        10027: "NCT_CALL_NODE_UPDATE_INTERFACE_ERROR",
        10028: "NCT_NOT_SUPPORT_GNS_CID_OBJECT",
        10029: "NCT_USER_CSFLEVEL_LOWER_THAN_DOC",
        10030: "NCT_FAILED_TO_CREATE_CUSTOM_ATTR_IOC",
        10031: "NCT_INVALID_CUSTOM_ATTR_NAME",
        10032: "NCT_CUSTOM_ATTR_ERR_EXCEED_MAX_LEVEL",
        10033: "NCT_CUSTOM_ATTR_ERR_DUPLICATE_NAME",
        10034: "NCT_CUSTOM_ATTR_ERR_EXCEED_MAX_ATTR",
        10035: "NCT_FAILED_TO_CREATE_OBJMETADATA_DBMGR_IOC",
        10037: "NCT_CAN_NOT_SET_SITE_MASTEROSS_REPEATEDLLY",
        10038: "NCT_FAILED_TO_SET_TAG_MAX_NUM",
        10039: "NCT_FAILED_TO_CREATE_USER_DOWNLOAD_DBMGR_IOC",
        10040: "NCT_NAME_CONTAINS_INVALID_CHAR",
        10041: "NCT_CID_OBJECT_NOT_EXIST",
        10042: "NCT_GNS_OBJECT_NOT_EXIST",
        10043: "NCT_ERR_INVALID_OBJECT_TYPE",
        10044: "NCT_FAILED_TO_CREATE_EVFS_NAME_IOC",
        10045: "NCT_FAILED_TO_CREATE_DOCFAVORITES_IOC",
        10046: "NCT_FAILED_TO_COPY_FILE_FROM_WATERMARK_DOC",
        10047: "NCT_INVALID_SUFFIXES",
        10049: "NCT_FAILED_TO_CREATE_ENTRY_DOC_MANAGER",
        10101: "NCT_CAN_NOT_CHANGE_TP_OSS_PROVIDER",
        10102: "NCT_UNSUPPORTED_TP_OSS_PROVIDER",
        10103: "NCT_CONNECT_TO_OSS_ERROR",
        10104: "NCT_OSS_INFO_NOT_FOUND",
        10105: "NCT_CANNOT_DISABLE_DEFAULT_OSS",
        10106: "NCT_SLAVE_SITE_OSS_CANNOT_BE_DEFAULT_OSS",
        10107: "NCT_OSS_NAME_CONFLICT",
        10108: "NCT_CAN_SAME_OSS_EXIST",
        10109: "NCT_SITE_ID_NOT_FOUND",
        10110: "NCT_CANNOT_SET_SITE_ID_OF_SYNCED_OSS",
        10111: "NCT_CANNOT_SET_SITE_ID_OF_DEFAULT_OSS_TO_SLAVE",
        10112: "NCT_DISABLED_OSS_CANNOT_BE_DEFAULT_OSS",
    }

    _NAMES_TO_VALUES = {
        "NCT_INVALID_NULL_ARGUMENT": 10001,
        "NCT_FAILED_TO_GET_EOFS_MGR": 10002,
        "NCT_FAILED_TO_GET_EVFS": 10003,
        "NCT_FAILED_TO_GET_EVFS_OTAG_IOC": 10004,
        "NCT_ONLY_SUPPORT_GNS_CID_OBJECT": 10005,
        "NCT_FAILED_TO_SET_VERSION_MAX_NUM": 10006,
        "NCT_FAILED_TO_SET_VERSION_BUILD_CYCLE": 10007,
        "NCT_FAILED_TO_GET_MEM_FILE_RECORD_MGR": 10008,
        "NCT_INVALID_PARAM_DATA": 10009,
        "NCT_FAILED_TO_GET_EVFS_SPACE_QUOTA": 10010,
        "NCT_INVALID_SPACE_QUOTA": 10011,
        "NCT_FAILED_TO_GET_ETS_RESOURECE_INFO": 10012,
        "NCT_FAILED_TO_CREATE_STATIS_IOC": 10013,
        "NCT_FAILED_TO_CREATE_FINGERPRINT_IOC": 10014,
        "NCT_INVALID_TEVFSOP_TYPE_ARGUMENT": 10015,
        "NCT_INVALID_TEVFSDATE_ARGUMENT": 10016,
        "NCT_INVALID_RAPID_FILE_COUNT_OVERSIZE": 10017,
        "NCT_FAILED_TO_GET_RECYCLE_OBJECT": 10018,
        "NCT_SPACE_QUOTA_NOT_ENOUGH": 10019,
        "NCT_CAN_ONLY_GET_FILE_CSFLEVEL": 10020,
        "NCT_CAN_NOT_CREATE_DIR_UNDER_CURRENT_OBJ": 10021,
        "NCT_SAME_NAME_OBJECT_EXIST": 10022,
        "NCT_SAME_NAME_OBJECT_NOT_UNIQUE": 10023,
        "NCT_INTERNAL_ERROR": 10024,
        "NCT_CALL_NODE_UPDATE_INTERFACE_ERROR": 10027,
        "NCT_NOT_SUPPORT_GNS_CID_OBJECT": 10028,
        "NCT_USER_CSFLEVEL_LOWER_THAN_DOC": 10029,
        "NCT_FAILED_TO_CREATE_CUSTOM_ATTR_IOC": 10030,
        "NCT_INVALID_CUSTOM_ATTR_NAME": 10031,
        "NCT_CUSTOM_ATTR_ERR_EXCEED_MAX_LEVEL": 10032,
        "NCT_CUSTOM_ATTR_ERR_DUPLICATE_NAME": 10033,
        "NCT_CUSTOM_ATTR_ERR_EXCEED_MAX_ATTR": 10034,
        "NCT_FAILED_TO_CREATE_OBJMETADATA_DBMGR_IOC": 10035,
        "NCT_CAN_NOT_SET_SITE_MASTEROSS_REPEATEDLLY": 10037,
        "NCT_FAILED_TO_SET_TAG_MAX_NUM": 10038,
        "NCT_FAILED_TO_CREATE_USER_DOWNLOAD_DBMGR_IOC": 10039,
        "NCT_NAME_CONTAINS_INVALID_CHAR": 10040,
        "NCT_CID_OBJECT_NOT_EXIST": 10041,
        "NCT_GNS_OBJECT_NOT_EXIST": 10042,
        "NCT_ERR_INVALID_OBJECT_TYPE": 10043,
        "NCT_FAILED_TO_CREATE_EVFS_NAME_IOC": 10044,
        "NCT_FAILED_TO_CREATE_DOCFAVORITES_IOC": 10045,
        "NCT_FAILED_TO_COPY_FILE_FROM_WATERMARK_DOC": 10046,
        "NCT_INVALID_SUFFIXES": 10047,
        "NCT_FAILED_TO_CREATE_ENTRY_DOC_MANAGER": 10049,
        "NCT_CAN_NOT_CHANGE_TP_OSS_PROVIDER": 10101,
        "NCT_UNSUPPORTED_TP_OSS_PROVIDER": 10102,
        "NCT_CONNECT_TO_OSS_ERROR": 10103,
        "NCT_OSS_INFO_NOT_FOUND": 10104,
        "NCT_CANNOT_DISABLE_DEFAULT_OSS": 10105,
        "NCT_SLAVE_SITE_OSS_CANNOT_BE_DEFAULT_OSS": 10106,
        "NCT_OSS_NAME_CONFLICT": 10107,
        "NCT_CAN_SAME_OSS_EXIST": 10108,
        "NCT_SITE_ID_NOT_FOUND": 10109,
        "NCT_CANNOT_SET_SITE_ID_OF_SYNCED_OSS": 10110,
        "NCT_CANNOT_SET_SITE_ID_OF_DEFAULT_OSS_TO_SLAVE": 10111,
        "NCT_DISABLED_OSS_CANNOT_BE_DEFAULT_OSS": 10112,
    }


class ncTEVFSDate(object):
    """
    自定义的时间类型

    Attributes:
     - year
     - month
     - day
     - hour
     - min
     - sec

    """


    def __init__(self, year=1970, month=1, day=1, hour=0, min=0, sec=0,):
        self.year = year
        self.month = month
        self.day = day
        self.hour = hour
        self.min = min
        self.sec = sec

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.year = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.month = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.day = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.hour = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.min = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.sec = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSDate')
        if self.year is not None:
            oprot.writeFieldBegin('year', TType.I32, 1)
            oprot.writeI32(self.year)
            oprot.writeFieldEnd()
        if self.month is not None:
            oprot.writeFieldBegin('month', TType.I32, 2)
            oprot.writeI32(self.month)
            oprot.writeFieldEnd()
        if self.day is not None:
            oprot.writeFieldBegin('day', TType.I32, 3)
            oprot.writeI32(self.day)
            oprot.writeFieldEnd()
        if self.hour is not None:
            oprot.writeFieldBegin('hour', TType.I32, 4)
            oprot.writeI32(self.hour)
            oprot.writeFieldEnd()
        if self.min is not None:
            oprot.writeFieldBegin('min', TType.I32, 5)
            oprot.writeI32(self.min)
            oprot.writeFieldEnd()
        if self.sec is not None:
            oprot.writeFieldBegin('sec', TType.I32, 6)
            oprot.writeI32(self.sec)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.year is None:
            raise TProtocolException(message='Required field year is unset!')
        if self.month is None:
            raise TProtocolException(message='Required field month is unset!')
        if self.day is None:
            raise TProtocolException(message='Required field day is unset!')
        if self.hour is None:
            raise TProtocolException(message='Required field hour is unset!')
        if self.min is None:
            raise TProtocolException(message='Required field min is unset!')
        if self.sec is None:
            raise TProtocolException(message='Required field sec is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSGNSObject(object):
    """
    GNS 对象

    Attributes:
     - gns
     - name

    """


    def __init__(self, gns=None, name=None,):
        self.gns = gns
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.gns = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSGNSObject')
        if self.gns is not None:
            oprot.writeFieldBegin('gns', TType.STRING, 1)
            oprot.writeString(self.gns.encode('utf-8') if sys.version_info[0] == 2 else self.gns)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.gns is None:
            raise TProtocolException(message='Required field gns is unset!')
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSGNSObjectSet(object):
    """
    GNS 对象集

    Attributes:
     - gnsObjects

    """


    def __init__(self, gnsObjects=None,):
        self.gnsObjects = gnsObjects

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.gnsObjects = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ncTEVFSGNSObject()
                        _elem5.read(iprot)
                        self.gnsObjects.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSGNSObjectSet')
        if self.gnsObjects is not None:
            oprot.writeFieldBegin('gnsObjects', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.gnsObjects))
            for iter6 in self.gnsObjects:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.gnsObjects is None:
            raise TProtocolException(message='Required field gnsObjects is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSFilesCount(object):
    """
    文件统计-标识文件数量的结构体

    Attributes:
     - docNum
     - picNum
     - vidNum
     - othNum
     - total

    """


    def __init__(self, docNum=None, picNum=None, vidNum=None, othNum=None, total=None,):
        self.docNum = docNum
        self.picNum = picNum
        self.vidNum = vidNum
        self.othNum = othNum
        self.total = total

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.docNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.picNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.vidNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.othNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.total = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSFilesCount')
        if self.docNum is not None:
            oprot.writeFieldBegin('docNum', TType.I64, 1)
            oprot.writeI64(self.docNum)
            oprot.writeFieldEnd()
        if self.picNum is not None:
            oprot.writeFieldBegin('picNum', TType.I64, 2)
            oprot.writeI64(self.picNum)
            oprot.writeFieldEnd()
        if self.vidNum is not None:
            oprot.writeFieldBegin('vidNum', TType.I64, 3)
            oprot.writeI64(self.vidNum)
            oprot.writeFieldEnd()
        if self.othNum is not None:
            oprot.writeFieldBegin('othNum', TType.I64, 4)
            oprot.writeI64(self.othNum)
            oprot.writeFieldEnd()
        if self.total is not None:
            oprot.writeFieldBegin('total', TType.I64, 5)
            oprot.writeI64(self.total)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.docNum is None:
            raise TProtocolException(message='Required field docNum is unset!')
        if self.picNum is None:
            raise TProtocolException(message='Required field picNum is unset!')
        if self.vidNum is None:
            raise TProtocolException(message='Required field vidNum is unset!')
        if self.othNum is None:
            raise TProtocolException(message='Required field othNum is unset!')
        if self.total is None:
            raise TProtocolException(message='Required field total is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSFilesChanged(object):
    """
    文件统计-标识文件变化趋势的结构体

    Attributes:
     - createOp
     - modifyOp
     - deleteOp

    """


    def __init__(self, createOp=None, modifyOp=None, deleteOp=None,):
        self.createOp = createOp
        self.modifyOp = modifyOp
        self.deleteOp = deleteOp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.createOp = ncTEVFSFilesCount()
                    self.createOp.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.modifyOp = ncTEVFSFilesCount()
                    self.modifyOp.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.deleteOp = ncTEVFSFilesCount()
                    self.deleteOp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSFilesChanged')
        if self.createOp is not None:
            oprot.writeFieldBegin('createOp', TType.STRUCT, 1)
            self.createOp.write(oprot)
            oprot.writeFieldEnd()
        if self.modifyOp is not None:
            oprot.writeFieldBegin('modifyOp', TType.STRUCT, 2)
            self.modifyOp.write(oprot)
            oprot.writeFieldEnd()
        if self.deleteOp is not None:
            oprot.writeFieldBegin('deleteOp', TType.STRUCT, 3)
            self.deleteOp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.createOp is None:
            raise TProtocolException(message='Required field createOp is unset!')
        if self.modifyOp is None:
            raise TProtocolException(message='Required field modifyOp is unset!')
        if self.deleteOp is None:
            raise TProtocolException(message='Required field deleteOp is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSQuotaInfo(object):
    """
    配额空间中的信息

    Attributes:
     - quota
     - usedsize

    """


    def __init__(self, quota=None, usedsize=None,):
        self.quota = quota
        self.usedsize = usedsize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.quota = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.usedsize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSQuotaInfo')
        if self.quota is not None:
            oprot.writeFieldBegin('quota', TType.I64, 1)
            oprot.writeI64(self.quota)
            oprot.writeFieldEnd()
        if self.usedsize is not None:
            oprot.writeFieldBegin('usedsize', TType.I64, 2)
            oprot.writeI64(self.usedsize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.quota is None:
            raise TProtocolException(message='Required field quota is unset!')
        if self.usedsize is None:
            raise TProtocolException(message='Required field usedsize is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTETSResourceInfo(object):
    """
    资源对象信息

    Attributes:
     - otag
     - size

    """


    def __init__(self, otag=None, size=None,):
        self.otag = otag
        self.size = size

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.otag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTETSResourceInfo')
        if self.otag is not None:
            oprot.writeFieldBegin('otag', TType.STRING, 1)
            oprot.writeString(self.otag.encode('utf-8') if sys.version_info[0] == 2 else self.otag)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 2)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.otag is None:
            raise TProtocolException(message='Required field otag is unset!')
        if self.size is None:
            raise TProtocolException(message='Required field size is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTResourceInfo(object):
    """
    Attributes:
     - gns
     - otag
     - size
     - modified

    """


    def __init__(self, gns=None, otag=None, size=None, modified=None,):
        self.gns = gns
        self.otag = otag
        self.size = size
        self.modified = modified

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.gns = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.otag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.modified = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTResourceInfo')
        if self.gns is not None:
            oprot.writeFieldBegin('gns', TType.STRING, 1)
            oprot.writeString(self.gns.encode('utf-8') if sys.version_info[0] == 2 else self.gns)
            oprot.writeFieldEnd()
        if self.otag is not None:
            oprot.writeFieldBegin('otag', TType.STRING, 2)
            oprot.writeString(self.otag.encode('utf-8') if sys.version_info[0] == 2 else self.otag)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 3)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.modified is not None:
            oprot.writeFieldBegin('modified', TType.I64, 4)
            oprot.writeI64(self.modified)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.gns is None:
            raise TProtocolException(message='Required field gns is unset!')
        if self.otag is None:
            raise TProtocolException(message='Required field otag is unset!')
        if self.size is None:
            raise TProtocolException(message='Required field size is unset!')
        if self.modified is None:
            raise TProtocolException(message='Required field modified is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSRapidStatisInfo(object):
    """
    秒传统计信息

    Attributes:
     - fileCount
     - rapidCount
     - saveTotal

    """


    def __init__(self, fileCount=None, rapidCount=None, saveTotal=None,):
        self.fileCount = fileCount
        self.rapidCount = rapidCount
        self.saveTotal = saveTotal

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.fileCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.rapidCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.saveTotal = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSRapidStatisInfo')
        if self.fileCount is not None:
            oprot.writeFieldBegin('fileCount', TType.I64, 1)
            oprot.writeI64(self.fileCount)
            oprot.writeFieldEnd()
        if self.rapidCount is not None:
            oprot.writeFieldBegin('rapidCount', TType.I64, 2)
            oprot.writeI64(self.rapidCount)
            oprot.writeFieldEnd()
        if self.saveTotal is not None:
            oprot.writeFieldBegin('saveTotal', TType.I64, 3)
            oprot.writeI64(self.saveTotal)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.fileCount is None:
            raise TProtocolException(message='Required field fileCount is unset!')
        if self.rapidCount is None:
            raise TProtocolException(message='Required field rapidCount is unset!')
        if self.saveTotal is None:
            raise TProtocolException(message='Required field saveTotal is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSRapidFileInfo(object):
    """
    秒传文件信息

    Attributes:
     - verDataId
     - name
     - date
     - refCount
     - fileSize
     - saveSize

    """


    def __init__(self, verDataId=None, name=None, date=None, refCount=None, fileSize=None, saveSize=None,):
        self.verDataId = verDataId
        self.name = name
        self.date = date
        self.refCount = refCount
        self.fileSize = fileSize
        self.saveSize = saveSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.verDataId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.date = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.refCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.fileSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.saveSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSRapidFileInfo')
        if self.verDataId is not None:
            oprot.writeFieldBegin('verDataId', TType.STRING, 1)
            oprot.writeString(self.verDataId.encode('utf-8') if sys.version_info[0] == 2 else self.verDataId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.date is not None:
            oprot.writeFieldBegin('date', TType.I64, 3)
            oprot.writeI64(self.date)
            oprot.writeFieldEnd()
        if self.refCount is not None:
            oprot.writeFieldBegin('refCount', TType.I32, 4)
            oprot.writeI32(self.refCount)
            oprot.writeFieldEnd()
        if self.fileSize is not None:
            oprot.writeFieldBegin('fileSize', TType.I64, 5)
            oprot.writeI64(self.fileSize)
            oprot.writeFieldEnd()
        if self.saveSize is not None:
            oprot.writeFieldBegin('saveSize', TType.I64, 6)
            oprot.writeI64(self.saveSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.verDataId is None:
            raise TProtocolException(message='Required field verDataId is unset!')
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.date is None:
            raise TProtocolException(message='Required field date is unset!')
        if self.refCount is None:
            raise TProtocolException(message='Required field refCount is unset!')
        if self.fileSize is None:
            raise TProtocolException(message='Required field fileSize is unset!')
        if self.saveSize is None:
            raise TProtocolException(message='Required field saveSize is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSListCacheInfo(object):
    """
    内存缓存统计

    Attributes:
     - listNum
     - hitNum

    """


    def __init__(self, listNum=None, hitNum=None,):
        self.listNum = listNum
        self.hitNum = hitNum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.listNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.hitNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSListCacheInfo')
        if self.listNum is not None:
            oprot.writeFieldBegin('listNum', TType.I64, 1)
            oprot.writeI64(self.listNum)
            oprot.writeFieldEnd()
        if self.hitNum is not None:
            oprot.writeFieldBegin('hitNum', TType.I64, 2)
            oprot.writeI64(self.hitNum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.listNum is None:
            raise TProtocolException(message='Required field listNum is unset!')
        if self.hitNum is None:
            raise TProtocolException(message='Required field hitNum is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSOSSRequest(object):
    """
    向开放存储的请求信息

    Attributes:
     - method
     - url
     - headers
     - body

    """


    def __init__(self, method=None, url=None, headers=None, body=None,):
        self.method = method
        self.url = url
        self.headers = headers
        self.body = body

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.method = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.headers = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.headers.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.body = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSOSSRequest')
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.STRING, 1)
            oprot.writeString(self.method.encode('utf-8') if sys.version_info[0] == 2 else self.method)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 2)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.headers is not None:
            oprot.writeFieldBegin('headers', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.headers))
            for iter13 in self.headers:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRING, 4)
            oprot.writeString(self.body.encode('utf-8') if sys.version_info[0] == 2 else self.body)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSOSSPartInfo(object):
    """
    向开放存储上传的分块信息

    Attributes:
     - etag
     - size

    """


    def __init__(self, etag=None, size=None,):
        self.etag = etag
        self.size = size

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.etag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSOSSPartInfo')
        if self.etag is not None:
            oprot.writeFieldBegin('etag', TType.STRING, 1)
            oprot.writeString(self.etag.encode('utf-8') if sys.version_info[0] == 2 else self.etag)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 2)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.etag is None:
            raise TProtocolException(message='Required field etag is unset!')
        if self.size is None:
            raise TProtocolException(message='Required field size is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTOSSAccessInfo(object):
    """
    Attributes:
     - provider
     - providerDetail
     - accessId
     - accessKey
     - bucket
     - serverName
     - internalServerName
     - httpsPort
     - httpPort
     - cdnName
     - bucketStyle

    """


    def __init__(self, provider=None, providerDetail=None, accessId=None, accessKey=None, bucket=None, serverName=None, internalServerName=None, httpsPort=None, httpPort=None, cdnName=None, bucketStyle=None,):
        self.provider = provider
        self.providerDetail = providerDetail
        self.accessId = accessId
        self.accessKey = accessKey
        self.bucket = bucket
        self.serverName = serverName
        self.internalServerName = internalServerName
        self.httpsPort = httpsPort
        self.httpPort = httpPort
        self.cdnName = cdnName
        self.bucketStyle = bucketStyle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.provider = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.providerDetail = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.accessId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.accessKey = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.bucket = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.serverName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.internalServerName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.httpsPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.httpPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.cdnName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.bucketStyle = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTOSSAccessInfo')
        if self.provider is not None:
            oprot.writeFieldBegin('provider', TType.STRING, 1)
            oprot.writeString(self.provider.encode('utf-8') if sys.version_info[0] == 2 else self.provider)
            oprot.writeFieldEnd()
        if self.providerDetail is not None:
            oprot.writeFieldBegin('providerDetail', TType.STRING, 2)
            oprot.writeString(self.providerDetail.encode('utf-8') if sys.version_info[0] == 2 else self.providerDetail)
            oprot.writeFieldEnd()
        if self.accessId is not None:
            oprot.writeFieldBegin('accessId', TType.STRING, 3)
            oprot.writeString(self.accessId.encode('utf-8') if sys.version_info[0] == 2 else self.accessId)
            oprot.writeFieldEnd()
        if self.accessKey is not None:
            oprot.writeFieldBegin('accessKey', TType.STRING, 4)
            oprot.writeString(self.accessKey.encode('utf-8') if sys.version_info[0] == 2 else self.accessKey)
            oprot.writeFieldEnd()
        if self.bucket is not None:
            oprot.writeFieldBegin('bucket', TType.STRING, 5)
            oprot.writeString(self.bucket.encode('utf-8') if sys.version_info[0] == 2 else self.bucket)
            oprot.writeFieldEnd()
        if self.serverName is not None:
            oprot.writeFieldBegin('serverName', TType.STRING, 6)
            oprot.writeString(self.serverName.encode('utf-8') if sys.version_info[0] == 2 else self.serverName)
            oprot.writeFieldEnd()
        if self.internalServerName is not None:
            oprot.writeFieldBegin('internalServerName', TType.STRING, 7)
            oprot.writeString(self.internalServerName.encode('utf-8') if sys.version_info[0] == 2 else self.internalServerName)
            oprot.writeFieldEnd()
        if self.httpsPort is not None:
            oprot.writeFieldBegin('httpsPort', TType.I32, 8)
            oprot.writeI32(self.httpsPort)
            oprot.writeFieldEnd()
        if self.httpPort is not None:
            oprot.writeFieldBegin('httpPort', TType.I32, 9)
            oprot.writeI32(self.httpPort)
            oprot.writeFieldEnd()
        if self.cdnName is not None:
            oprot.writeFieldBegin('cdnName', TType.STRING, 10)
            oprot.writeString(self.cdnName.encode('utf-8') if sys.version_info[0] == 2 else self.cdnName)
            oprot.writeFieldEnd()
        if self.bucketStyle is not None:
            oprot.writeFieldBegin('bucketStyle', TType.I32, 11)
            oprot.writeI32(self.bucketStyle)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTOSSSiteInfo(object):
    """
    Attributes:
     - id
     - name

    """


    def __init__(self, id=None, name=None,):
        self.id = id
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTOSSSiteInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSOSSInfo(object):
    """
    Attributes:
     - ossId
     - ossName
     - enabled
     - accessInfo
     - siteInfo
     - type

    """


    def __init__(self, ossId=None, ossName=None, enabled=None, accessInfo=None, siteInfo=None, type=None,):
        self.ossId = ossId
        self.ossName = ossName
        self.enabled = enabled
        self.accessInfo = accessInfo
        self.siteInfo = siteInfo
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ossId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ossName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.accessInfo = ncTOSSAccessInfo()
                    self.accessInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.siteInfo = ncTOSSSiteInfo()
                    self.siteInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSOSSInfo')
        if self.ossId is not None:
            oprot.writeFieldBegin('ossId', TType.STRING, 1)
            oprot.writeString(self.ossId.encode('utf-8') if sys.version_info[0] == 2 else self.ossId)
            oprot.writeFieldEnd()
        if self.ossName is not None:
            oprot.writeFieldBegin('ossName', TType.STRING, 2)
            oprot.writeString(self.ossName.encode('utf-8') if sys.version_info[0] == 2 else self.ossName)
            oprot.writeFieldEnd()
        if self.enabled is not None:
            oprot.writeFieldBegin('enabled', TType.BOOL, 3)
            oprot.writeBool(self.enabled)
            oprot.writeFieldEnd()
        if self.accessInfo is not None:
            oprot.writeFieldBegin('accessInfo', TType.STRUCT, 4)
            self.accessInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.siteInfo is not None:
            oprot.writeFieldBegin('siteInfo', TType.STRUCT, 5)
            self.siteInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 6)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSOSSBaseInfo(object):
    """
    Attributes:
     - ossId
     - ossName
     - enabled
     - siteInfo
     - type

    """


    def __init__(self, ossId=None, ossName=None, enabled=None, siteInfo=None, type=None,):
        self.ossId = ossId
        self.ossName = ossName
        self.enabled = enabled
        self.siteInfo = siteInfo
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ossId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ossName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.siteInfo = ncTOSSSiteInfo()
                    self.siteInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSOSSBaseInfo')
        if self.ossId is not None:
            oprot.writeFieldBegin('ossId', TType.STRING, 1)
            oprot.writeString(self.ossId.encode('utf-8') if sys.version_info[0] == 2 else self.ossId)
            oprot.writeFieldEnd()
        if self.ossName is not None:
            oprot.writeFieldBegin('ossName', TType.STRING, 2)
            oprot.writeString(self.ossName.encode('utf-8') if sys.version_info[0] == 2 else self.ossName)
            oprot.writeFieldEnd()
        if self.enabled is not None:
            oprot.writeFieldBegin('enabled', TType.BOOL, 3)
            oprot.writeBool(self.enabled)
            oprot.writeFieldEnd()
        if self.siteInfo is not None:
            oprot.writeFieldBegin('siteInfo', TType.STRUCT, 4)
            self.siteInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 5)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTOSSProxyInfo(object):
    """
    Attributes:
     - host
     - httpsPort
     - httpPort

    """


    def __init__(self, host=None, httpsPort=None, httpPort=None,):
        self.host = host
        self.httpsPort = httpsPort
        self.httpPort = httpPort

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.httpsPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.httpPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTOSSProxyInfo')
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 1)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        if self.httpsPort is not None:
            oprot.writeFieldBegin('httpsPort', TType.I32, 2)
            oprot.writeI32(self.httpsPort)
            oprot.writeFieldEnd()
        if self.httpPort is not None:
            oprot.writeFieldBegin('httpPort', TType.I32, 3)
            oprot.writeI32(self.httpPort)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.host is None:
            raise TProtocolException(message='Required field host is unset!')
        if self.httpsPort is None:
            raise TProtocolException(message='Required field httpsPort is unset!')
        if self.httpPort is None:
            raise TProtocolException(message='Required field httpPort is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSNetworkSegment(object):
    """
    大文件传输限制时，排除掉的网段

    Attributes:
     - ip
     - netMask

    """


    def __init__(self, ip=None, netMask=None,):
        self.ip = ip
        self.netMask = netMask

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.netMask = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSNetworkSegment')
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 1)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.netMask is not None:
            oprot.writeFieldBegin('netMask', TType.STRING, 2)
            oprot.writeString(self.netMask.encode('utf-8') if sys.version_info[0] == 2 else self.netMask)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ip is None:
            raise TProtocolException(message='Required field ip is unset!')
        if self.netMask is None:
            raise TProtocolException(message='Required field netMask is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSLargeFileLimitConf(object):
    """
    大文件传输限制配置信息

    Attributes:
     - enabled
     - size
     - networkSegment
     - option

    """


    def __init__(self, enabled=None, size=None, networkSegment=None, option=None,):
        self.enabled = enabled
        self.size = size
        self.networkSegment = networkSegment
        self.option = option

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.networkSegment = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = ncTEVFSNetworkSegment()
                        _elem19.read(iprot)
                        self.networkSegment.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.option = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSLargeFileLimitConf')
        if self.enabled is not None:
            oprot.writeFieldBegin('enabled', TType.BOOL, 1)
            oprot.writeBool(self.enabled)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 2)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.networkSegment is not None:
            oprot.writeFieldBegin('networkSegment', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.networkSegment))
            for iter20 in self.networkSegment:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.option is not None:
            oprot.writeFieldBegin('option', TType.I32, 4)
            oprot.writeI32(self.option)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.enabled is None:
            raise TProtocolException(message='Required field enabled is unset!')
        if self.size is None:
            raise TProtocolException(message='Required field size is unset!')
        if self.networkSegment is None:
            raise TProtocolException(message='Required field networkSegment is unset!')
        if self.option is None:
            raise TProtocolException(message='Required field option is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTLimitSuffixDoc(object):
    """
    限制上传的配置信息

    Attributes:
     - suffixType
     - suffixes
     - denyFlag

    """


    def __init__(self, suffixType=None, suffixes=None, denyFlag=None,):
        self.suffixType = suffixType
        self.suffixes = suffixes
        self.denyFlag = denyFlag

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.suffixType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.suffixes = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.denyFlag = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLimitSuffixDoc')
        if self.suffixType is not None:
            oprot.writeFieldBegin('suffixType', TType.I32, 1)
            oprot.writeI32(self.suffixType)
            oprot.writeFieldEnd()
        if self.suffixes is not None:
            oprot.writeFieldBegin('suffixes', TType.STRING, 2)
            oprot.writeString(self.suffixes.encode('utf-8') if sys.version_info[0] == 2 else self.suffixes)
            oprot.writeFieldEnd()
        if self.denyFlag is not None:
            oprot.writeFieldBegin('denyFlag', TType.BOOL, 3)
            oprot.writeBool(self.denyFlag)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSCustomAttribute(object):
    """
    用户自定义属性信息

    Attributes:
     - id
     - name
     - type
     - searchable
     - order
     - status
     - values

    """


    def __init__(self, id=None, name=None, type=None, searchable=None, order=None, status=None, values=None,):
        self.id = id
        self.name = name
        self.type = type
        self.searchable = searchable
        self.order = order
        self.status = status
        self.values = values

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.searchable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.order = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.values = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSCustomAttribute')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.searchable is not None:
            oprot.writeFieldBegin('searchable', TType.BOOL, 4)
            oprot.writeBool(self.searchable)
            oprot.writeFieldEnd()
        if self.order is not None:
            oprot.writeFieldBegin('order', TType.I32, 5)
            oprot.writeI32(self.order)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 6)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.STRING, 7)
            oprot.writeString(self.values.encode('utf-8') if sys.version_info[0] == 2 else self.values)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.searchable is None:
            raise TProtocolException(message='Required field searchable is unset!')
        if self.order is None:
            raise TProtocolException(message='Required field order is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSObjMetaAppInfo(object):
    """
    需保存对象元数据的应用信息

    Attributes:
     - name
     - status

    """


    def __init__(self, name=None, status=None,):
        self.name = name
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSObjMetaAppInfo')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUserDownloadLimitInfo(object):
    """
    Attributes:
     - userId
     - limitValue

    """


    def __init__(self, userId=None, limitValue=None,):
        self.userId = userId
        self.limitValue = limitValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.limitValue = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUserDownloadLimitInfo')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.limitValue is not None:
            oprot.writeFieldBegin('limitValue', TType.I64, 2)
            oprot.writeI64(self.limitValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.userId is None:
            raise TProtocolException(message='Required field userId is unset!')
        if self.limitValue is None:
            raise TProtocolException(message='Required field limitValue is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAppealInfo(object):
    """
    Attributes:
     - needReview
     - appellant
     - appealReason

    """


    def __init__(self, needReview=None, appellant=None, appealReason=None,):
        self.needReview = needReview
        self.appellant = appellant
        self.appealReason = appealReason

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.needReview = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.appellant = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.appealReason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAppealInfo')
        if self.needReview is not None:
            oprot.writeFieldBegin('needReview', TType.BOOL, 1)
            oprot.writeBool(self.needReview)
            oprot.writeFieldEnd()
        if self.appellant is not None:
            oprot.writeFieldBegin('appellant', TType.STRING, 2)
            oprot.writeString(self.appellant.encode('utf-8') if sys.version_info[0] == 2 else self.appellant)
            oprot.writeFieldEnd()
        if self.appealReason is not None:
            oprot.writeFieldBegin('appealReason', TType.STRING, 3)
            oprot.writeString(self.appealReason.encode('utf-8') if sys.version_info[0] == 2 else self.appealReason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.needReview is None:
            raise TProtocolException(message='Required field needReview is unset!')
        if self.appellant is None:
            raise TProtocolException(message='Required field appellant is unset!')
        if self.appealReason is None:
            raise TProtocolException(message='Required field appealReason is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSQuarantineFileInfo(object):
    """
    非法隔离区文件信息

    Attributes:
     - docid
     - versionId
     - name
     - modifier
     - modifie_time
     - parentPath
     - type
     - reason
     - serverTime
     - appealExpiredTime
     - appeal
     - quarantineTime
     - creator

    """


    def __init__(self, docid=None, versionId=None, name=None, modifier=None, modifie_time=None, parentPath=None, type=None, reason=None, serverTime=None, appealExpiredTime=None, appeal=None, quarantineTime=None, creator=None,):
        self.docid = docid
        self.versionId = versionId
        self.name = name
        self.modifier = modifier
        self.modifie_time = modifie_time
        self.parentPath = parentPath
        self.type = type
        self.reason = reason
        self.serverTime = serverTime
        self.appealExpiredTime = appealExpiredTime
        self.appeal = appeal
        self.quarantineTime = quarantineTime
        self.creator = creator

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.docid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.versionId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.modifier = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.modifie_time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.parentPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.reason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.serverTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.appealExpiredTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.appeal = ncTAppealInfo()
                    self.appeal.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.quarantineTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.creator = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSQuarantineFileInfo')
        if self.docid is not None:
            oprot.writeFieldBegin('docid', TType.STRING, 1)
            oprot.writeString(self.docid.encode('utf-8') if sys.version_info[0] == 2 else self.docid)
            oprot.writeFieldEnd()
        if self.versionId is not None:
            oprot.writeFieldBegin('versionId', TType.STRING, 2)
            oprot.writeString(self.versionId.encode('utf-8') if sys.version_info[0] == 2 else self.versionId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.modifier is not None:
            oprot.writeFieldBegin('modifier', TType.STRING, 4)
            oprot.writeString(self.modifier.encode('utf-8') if sys.version_info[0] == 2 else self.modifier)
            oprot.writeFieldEnd()
        if self.modifie_time is not None:
            oprot.writeFieldBegin('modifie_time', TType.I64, 5)
            oprot.writeI64(self.modifie_time)
            oprot.writeFieldEnd()
        if self.parentPath is not None:
            oprot.writeFieldBegin('parentPath', TType.STRING, 6)
            oprot.writeString(self.parentPath.encode('utf-8') if sys.version_info[0] == 2 else self.parentPath)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 7)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 8)
            oprot.writeString(self.reason.encode('utf-8') if sys.version_info[0] == 2 else self.reason)
            oprot.writeFieldEnd()
        if self.serverTime is not None:
            oprot.writeFieldBegin('serverTime', TType.I64, 9)
            oprot.writeI64(self.serverTime)
            oprot.writeFieldEnd()
        if self.appealExpiredTime is not None:
            oprot.writeFieldBegin('appealExpiredTime', TType.I64, 10)
            oprot.writeI64(self.appealExpiredTime)
            oprot.writeFieldEnd()
        if self.appeal is not None:
            oprot.writeFieldBegin('appeal', TType.STRUCT, 11)
            self.appeal.write(oprot)
            oprot.writeFieldEnd()
        if self.quarantineTime is not None:
            oprot.writeFieldBegin('quarantineTime', TType.I64, 12)
            oprot.writeI64(self.quarantineTime)
            oprot.writeFieldEnd()
        if self.creator is not None:
            oprot.writeFieldBegin('creator', TType.STRING, 13)
            oprot.writeString(self.creator.encode('utf-8') if sys.version_info[0] == 2 else self.creator)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.docid is None:
            raise TProtocolException(message='Required field docid is unset!')
        if self.versionId is None:
            raise TProtocolException(message='Required field versionId is unset!')
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.modifier is None:
            raise TProtocolException(message='Required field modifier is unset!')
        if self.modifie_time is None:
            raise TProtocolException(message='Required field modifie_time is unset!')
        if self.parentPath is None:
            raise TProtocolException(message='Required field parentPath is unset!')
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.reason is None:
            raise TProtocolException(message='Required field reason is unset!')
        if self.serverTime is None:
            raise TProtocolException(message='Required field serverTime is unset!')
        if self.appealExpiredTime is None:
            raise TProtocolException(message='Required field appealExpiredTime is unset!')
        if self.appeal is None:
            raise TProtocolException(message='Required field appeal is unset!')
        if self.quarantineTime is None:
            raise TProtocolException(message='Required field quarantineTime is unset!')
        if self.creator is None:
            raise TProtocolException(message='Required field creator is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTQuarantineConfig(object):
    """
    Attributes:
     - appealProtectTime
     - autoDeleteTime
     - autoDeleteEnable

    """


    def __init__(self, appealProtectTime=None, autoDeleteTime=None, autoDeleteEnable=None,):
        self.appealProtectTime = appealProtectTime
        self.autoDeleteTime = autoDeleteTime
        self.autoDeleteEnable = autoDeleteEnable

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.appealProtectTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.autoDeleteTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.autoDeleteEnable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTQuarantineConfig')
        if self.appealProtectTime is not None:
            oprot.writeFieldBegin('appealProtectTime', TType.I32, 1)
            oprot.writeI32(self.appealProtectTime)
            oprot.writeFieldEnd()
        if self.autoDeleteTime is not None:
            oprot.writeFieldBegin('autoDeleteTime', TType.I32, 2)
            oprot.writeI32(self.autoDeleteTime)
            oprot.writeFieldEnd()
        if self.autoDeleteEnable is not None:
            oprot.writeFieldBegin('autoDeleteEnable', TType.BOOL, 3)
            oprot.writeBool(self.autoDeleteEnable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.appealProtectTime is None:
            raise TProtocolException(message='Required field appealProtectTime is unset!')
        if self.autoDeleteTime is None:
            raise TProtocolException(message='Required field autoDeleteTime is unset!')
        if self.autoDeleteEnable is None:
            raise TProtocolException(message='Required field autoDeleteEnable is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTQuarantineRetMsg(object):
    """
    Attributes:
     - fileName
     - versionName
     - parentPath

    """


    def __init__(self, fileName=None, versionName=None, parentPath=None,):
        self.fileName = fileName
        self.versionName = versionName
        self.parentPath = parentPath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.versionName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.parentPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTQuarantineRetMsg')
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 1)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        if self.versionName is not None:
            oprot.writeFieldBegin('versionName', TType.STRING, 2)
            oprot.writeString(self.versionName.encode('utf-8') if sys.version_info[0] == 2 else self.versionName)
            oprot.writeFieldEnd()
        if self.parentPath is not None:
            oprot.writeFieldBegin('parentPath', TType.STRING, 3)
            oprot.writeString(self.parentPath.encode('utf-8') if sys.version_info[0] == 2 else self.parentPath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.fileName is None:
            raise TProtocolException(message='Required field fileName is unset!')
        if self.versionName is None:
            raise TProtocolException(message='Required field versionName is unset!')
        if self.parentPath is None:
            raise TProtocolException(message='Required field parentPath is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTFiltrationParam(object):
    """
    Attributes:
     - key
     - appeal
     - type
     - quarantineType

    """


    def __init__(self, key=None, appeal=None, type=None, quarantineType=None,):
        self.key = key
        self.appeal = appeal
        self.type = type
        self.quarantineType = quarantineType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.appeal = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.quarantineType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTFiltrationParam')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 1)
            oprot.writeString(self.key.encode('utf-8') if sys.version_info[0] == 2 else self.key)
            oprot.writeFieldEnd()
        if self.appeal is not None:
            oprot.writeFieldBegin('appeal', TType.I32, 2)
            oprot.writeI32(self.appeal)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.quarantineType is not None:
            oprot.writeFieldBegin('quarantineType', TType.I32, 4)
            oprot.writeI32(self.quarantineType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.key is None:
            raise TProtocolException(message='Required field key is unset!')
        if self.appeal is None:
            raise TProtocolException(message='Required field appeal is unset!')
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTOSDowndloadRetParam(object):
    """
    Attributes:
     - rev
     - name
     - editor
     - modified
     - size
     - client_mtime
     - auth_request
     - need_watermark

    """


    def __init__(self, rev=None, name=None, editor=None, modified=None, size=None, client_mtime=None, auth_request=None, need_watermark=None,):
        self.rev = rev
        self.name = name
        self.editor = editor
        self.modified = modified
        self.size = size
        self.client_mtime = client_mtime
        self.auth_request = auth_request
        self.need_watermark = need_watermark

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.rev = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.editor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.modified = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.client_mtime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.auth_request = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.auth_request.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.need_watermark = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTOSDowndloadRetParam')
        if self.rev is not None:
            oprot.writeFieldBegin('rev', TType.STRING, 1)
            oprot.writeString(self.rev.encode('utf-8') if sys.version_info[0] == 2 else self.rev)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.editor is not None:
            oprot.writeFieldBegin('editor', TType.STRING, 3)
            oprot.writeString(self.editor.encode('utf-8') if sys.version_info[0] == 2 else self.editor)
            oprot.writeFieldEnd()
        if self.modified is not None:
            oprot.writeFieldBegin('modified', TType.I64, 4)
            oprot.writeI64(self.modified)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 5)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.client_mtime is not None:
            oprot.writeFieldBegin('client_mtime', TType.I64, 6)
            oprot.writeI64(self.client_mtime)
            oprot.writeFieldEnd()
        if self.auth_request is not None:
            oprot.writeFieldBegin('auth_request', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.auth_request))
            for iter27 in self.auth_request:
                oprot.writeString(iter27.encode('utf-8') if sys.version_info[0] == 2 else iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.need_watermark is not None:
            oprot.writeFieldBegin('need_watermark', TType.BOOL, 8)
            oprot.writeBool(self.need_watermark)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.rev is None:
            raise TProtocolException(message='Required field rev is unset!')
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.editor is None:
            raise TProtocolException(message='Required field editor is unset!')
        if self.modified is None:
            raise TProtocolException(message='Required field modified is unset!')
        if self.size is None:
            raise TProtocolException(message='Required field size is unset!')
        if self.client_mtime is None:
            raise TProtocolException(message='Required field client_mtime is unset!')
        if self.auth_request is None:
            raise TProtocolException(message='Required field auth_request is unset!')
        if self.need_watermark is None:
            raise TProtocolException(message='Required field need_watermark is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSOutLinkFileInfo(object):
    """
    外链文件信息

    Attributes:
     - creator
     - editor
     - modified
     - sharer
     - sharedObj

    """


    def __init__(self, creator=None, editor=None, modified=None, sharer=None, sharedObj=None,):
        self.creator = creator
        self.editor = editor
        self.modified = modified
        self.sharer = sharer
        self.sharedObj = sharedObj

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.creator = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.editor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.modified = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.sharer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.sharedObj = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSOutLinkFileInfo')
        if self.creator is not None:
            oprot.writeFieldBegin('creator', TType.STRING, 1)
            oprot.writeString(self.creator.encode('utf-8') if sys.version_info[0] == 2 else self.creator)
            oprot.writeFieldEnd()
        if self.editor is not None:
            oprot.writeFieldBegin('editor', TType.STRING, 2)
            oprot.writeString(self.editor.encode('utf-8') if sys.version_info[0] == 2 else self.editor)
            oprot.writeFieldEnd()
        if self.modified is not None:
            oprot.writeFieldBegin('modified', TType.I64, 3)
            oprot.writeI64(self.modified)
            oprot.writeFieldEnd()
        if self.sharer is not None:
            oprot.writeFieldBegin('sharer', TType.STRING, 4)
            oprot.writeString(self.sharer.encode('utf-8') if sys.version_info[0] == 2 else self.sharer)
            oprot.writeFieldEnd()
        if self.sharedObj is not None:
            oprot.writeFieldBegin('sharedObj', TType.STRING, 5)
            oprot.writeString(self.sharedObj.encode('utf-8') if sys.version_info[0] == 2 else self.sharedObj)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.creator is None:
            raise TProtocolException(message='Required field creator is unset!')
        if self.editor is None:
            raise TProtocolException(message='Required field editor is unset!')
        if self.modified is None:
            raise TProtocolException(message='Required field modified is unset!')
        if self.sharer is None:
            raise TProtocolException(message='Required field sharer is unset!')
        if self.sharedObj is None:
            raise TProtocolException(message='Required field sharedObj is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSOutLinkAccessInfo(object):
    """
    外链访问信息

    Attributes:
     - id
     - rev
     - fileName
     - filePath
     - ip
     - date
     - opType
     - gns

    """


    def __init__(self, id=None, rev=None, fileName=None, filePath=None, ip=None, date=None, opType=None, gns=None,):
        self.id = id
        self.rev = rev
        self.fileName = fileName
        self.filePath = filePath
        self.ip = ip
        self.date = date
        self.opType = opType
        self.gns = gns

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.rev = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.filePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.date = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.opType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.gns = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSOutLinkAccessInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.rev is not None:
            oprot.writeFieldBegin('rev', TType.STRING, 2)
            oprot.writeString(self.rev.encode('utf-8') if sys.version_info[0] == 2 else self.rev)
            oprot.writeFieldEnd()
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 3)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        if self.filePath is not None:
            oprot.writeFieldBegin('filePath', TType.STRING, 4)
            oprot.writeString(self.filePath.encode('utf-8') if sys.version_info[0] == 2 else self.filePath)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 5)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.date is not None:
            oprot.writeFieldBegin('date', TType.I64, 6)
            oprot.writeI64(self.date)
            oprot.writeFieldEnd()
        if self.opType is not None:
            oprot.writeFieldBegin('opType', TType.I32, 7)
            oprot.writeI32(self.opType)
            oprot.writeFieldEnd()
        if self.gns is not None:
            oprot.writeFieldBegin('gns', TType.STRING, 8)
            oprot.writeString(self.gns.encode('utf-8') if sys.version_info[0] == 2 else self.gns)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        if self.rev is None:
            raise TProtocolException(message='Required field rev is unset!')
        if self.fileName is None:
            raise TProtocolException(message='Required field fileName is unset!')
        if self.filePath is None:
            raise TProtocolException(message='Required field filePath is unset!')
        if self.ip is None:
            raise TProtocolException(message='Required field ip is unset!')
        if self.date is None:
            raise TProtocolException(message='Required field date is unset!')
        if self.opType is None:
            raise TProtocolException(message='Required field opType is unset!')
        if self.gns is None:
            raise TProtocolException(message='Required field gns is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSOutLinkAccessInfoCount(object):
    """
    外链访问信息总数

    Attributes:
     - count
     - maxId

    """


    def __init__(self, count=None, maxId=None,):
        self.count = count
        self.maxId = maxId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.count = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.maxId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSOutLinkAccessInfoCount')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I64, 1)
            oprot.writeI64(self.count)
            oprot.writeFieldEnd()
        if self.maxId is not None:
            oprot.writeFieldBegin('maxId', TType.I64, 2)
            oprot.writeI64(self.maxId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSGetPageOutLinkAccessInfoParam(object):
    """
    分页获取外链访问信息参数
    start：起始号，>= 0
    limit：取的条数，与start实现分页，-1表示不限制，其它负数值非法
         例如[0,-1]表示取所有的
         [0, 5] 表示取前5条
         [5, -1] 表示从第5条开始，后面所有的

    Attributes:
     - name
     - maxId
     - start
     - limit

    """


    def __init__(self, name=None, maxId=None, start=None, limit=None,):
        self.name = name
        self.maxId = maxId
        self.start = start
        self.limit = limit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.maxId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.start = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSGetPageOutLinkAccessInfoParam')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.maxId is not None:
            oprot.writeFieldBegin('maxId', TType.I64, 2)
            oprot.writeI64(self.maxId)
            oprot.writeFieldEnd()
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.I32, 3)
            oprot.writeI32(self.start)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 4)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSFileMetadata(object):
    """
    文件元数据

    Attributes:
     - rev
     - name
     - editor
     - modified

    """


    def __init__(self, rev=None, name=None, editor=None, modified=None,):
        self.rev = rev
        self.name = name
        self.editor = editor
        self.modified = modified

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.rev = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.editor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.modified = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSFileMetadata')
        if self.rev is not None:
            oprot.writeFieldBegin('rev', TType.STRING, 1)
            oprot.writeString(self.rev.encode('utf-8') if sys.version_info[0] == 2 else self.rev)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.editor is not None:
            oprot.writeFieldBegin('editor', TType.STRING, 3)
            oprot.writeString(self.editor.encode('utf-8') if sys.version_info[0] == 2 else self.editor)
            oprot.writeFieldEnd()
        if self.modified is not None:
            oprot.writeFieldBegin('modified', TType.I64, 4)
            oprot.writeI64(self.modified)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.rev is None:
            raise TProtocolException(message='Required field rev is unset!')
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.editor is None:
            raise TProtocolException(message='Required field editor is unset!')
        if self.modified is None:
            raise TProtocolException(message='Required field modified is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSFileAttribute(object):
    """
    文件属性

    Attributes:
     - creator
     - createTime
     - csfLevel
     - name

    """


    def __init__(self, creator=None, createTime=None, csfLevel=None, name=None,):
        self.creator = creator
        self.createTime = createTime
        self.csfLevel = csfLevel
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.creator = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.createTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.csfLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSFileAttribute')
        if self.creator is not None:
            oprot.writeFieldBegin('creator', TType.STRING, 1)
            oprot.writeString(self.creator.encode('utf-8') if sys.version_info[0] == 2 else self.creator)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.I64, 2)
            oprot.writeI64(self.createTime)
            oprot.writeFieldEnd()
        if self.csfLevel is not None:
            oprot.writeFieldBegin('csfLevel', TType.I32, 3)
            oprot.writeI32(self.csfLevel)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 4)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.creator is None:
            raise TProtocolException(message='Required field creator is unset!')
        if self.createTime is None:
            raise TProtocolException(message='Required field createTime is unset!')
        if self.csfLevel is None:
            raise TProtocolException(message='Required field csfLevel is unset!')
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSFileInfo(object):
    """
    文件和最新元数据信息

    Attributes:
     - docId
     - path
     - retained
     - attribute
     - metadata

    """


    def __init__(self, docId=None, path=None, retained=None, attribute=None, metadata=None,):
        self.docId = docId
        self.path = path
        self.retained = retained
        self.attribute = attribute
        self.metadata = metadata

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.docId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.retained = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.attribute = ncTEVFSFileAttribute()
                    self.attribute.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.metadata = ncTEVFSFileMetadata()
                    self.metadata.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSFileInfo')
        if self.docId is not None:
            oprot.writeFieldBegin('docId', TType.STRING, 1)
            oprot.writeString(self.docId.encode('utf-8') if sys.version_info[0] == 2 else self.docId)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 2)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.retained is not None:
            oprot.writeFieldBegin('retained', TType.BOOL, 3)
            oprot.writeBool(self.retained)
            oprot.writeFieldEnd()
        if self.attribute is not None:
            oprot.writeFieldBegin('attribute', TType.STRUCT, 4)
            self.attribute.write(oprot)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.STRUCT, 5)
            self.metadata.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.docId is None:
            raise TProtocolException(message='Required field docId is unset!')
        if self.path is None:
            raise TProtocolException(message='Required field path is unset!')
        if self.retained is None:
            raise TProtocolException(message='Required field retained is unset!')
        if self.attribute is None:
            raise TProtocolException(message='Required field attribute is unset!')
        if self.metadata is None:
            raise TProtocolException(message='Required field metadata is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSFileInfoCount(object):
    """
    文件信息总数

    Attributes:
     - count
     - maxCreateTime

    """


    def __init__(self, count=None, maxCreateTime=None,):
        self.count = count
        self.maxCreateTime = maxCreateTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.count = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.maxCreateTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSFileInfoCount')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I64, 1)
            oprot.writeI64(self.count)
            oprot.writeFieldEnd()
        if self.maxCreateTime is not None:
            oprot.writeFieldBegin('maxCreateTime', TType.I64, 2)
            oprot.writeI64(self.maxCreateTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEVFSGetPageFileInfoParam(object):
    """
    分页获取文件信息参数
    start：起始号，>= 0
    limit：取的条数，与start实现分页，-1表示不限制，其它负数值非法
         例如[0,-1]表示取所有的
         [0, 5] 表示取前5条
         [5, -1] 表示从第5条开始，后面所有的

    Attributes:
     - name
     - maxCreateTime
     - start
     - limit

    """


    def __init__(self, name=None, maxCreateTime=None, start=None, limit=None,):
        self.name = name
        self.maxCreateTime = maxCreateTime
        self.start = start
        self.limit = limit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.maxCreateTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.start = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEVFSGetPageFileInfoParam')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.maxCreateTime is not None:
            oprot.writeFieldBegin('maxCreateTime', TType.I64, 2)
            oprot.writeI64(self.maxCreateTime)
            oprot.writeFieldEnd()
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.I32, 3)
            oprot.writeI32(self.start)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 4)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncTEVFSDate)
ncTEVFSDate.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'year', None, 1970, ),  # 1
    (2, TType.I32, 'month', None, 1, ),  # 2
    (3, TType.I32, 'day', None, 1, ),  # 3
    (4, TType.I32, 'hour', None, 0, ),  # 4
    (5, TType.I32, 'min', None, 0, ),  # 5
    (6, TType.I32, 'sec', None, 0, ),  # 6
)
all_structs.append(ncTEVFSGNSObject)
ncTEVFSGNSObject.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'gns', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
)
all_structs.append(ncTEVFSGNSObjectSet)
ncTEVFSGNSObjectSet.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'gnsObjects', (TType.STRUCT, [ncTEVFSGNSObject, None], False), None, ),  # 1
)
all_structs.append(ncTEVFSFilesCount)
ncTEVFSFilesCount.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'docNum', None, None, ),  # 1
    (2, TType.I64, 'picNum', None, None, ),  # 2
    (3, TType.I64, 'vidNum', None, None, ),  # 3
    (4, TType.I64, 'othNum', None, None, ),  # 4
    (5, TType.I64, 'total', None, None, ),  # 5
)
all_structs.append(ncTEVFSFilesChanged)
ncTEVFSFilesChanged.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'createOp', [ncTEVFSFilesCount, None], None, ),  # 1
    (2, TType.STRUCT, 'modifyOp', [ncTEVFSFilesCount, None], None, ),  # 2
    (3, TType.STRUCT, 'deleteOp', [ncTEVFSFilesCount, None], None, ),  # 3
)
all_structs.append(ncTEVFSQuotaInfo)
ncTEVFSQuotaInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'quota', None, None, ),  # 1
    (2, TType.I64, 'usedsize', None, None, ),  # 2
)
all_structs.append(ncTETSResourceInfo)
ncTETSResourceInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'otag', 'UTF8', None, ),  # 1
    (2, TType.I64, 'size', None, None, ),  # 2
)
all_structs.append(ncTResourceInfo)
ncTResourceInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'gns', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'otag', 'UTF8', None, ),  # 2
    (3, TType.I64, 'size', None, None, ),  # 3
    (4, TType.I64, 'modified', None, None, ),  # 4
)
all_structs.append(ncTEVFSRapidStatisInfo)
ncTEVFSRapidStatisInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'fileCount', None, None, ),  # 1
    (2, TType.I64, 'rapidCount', None, None, ),  # 2
    (3, TType.I64, 'saveTotal', None, None, ),  # 3
)
all_structs.append(ncTEVFSRapidFileInfo)
ncTEVFSRapidFileInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'verDataId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.I64, 'date', None, None, ),  # 3
    (4, TType.I32, 'refCount', None, None, ),  # 4
    (5, TType.I64, 'fileSize', None, None, ),  # 5
    (6, TType.I64, 'saveSize', None, None, ),  # 6
)
all_structs.append(ncTEVFSListCacheInfo)
ncTEVFSListCacheInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'listNum', None, None, ),  # 1
    (2, TType.I64, 'hitNum', None, None, ),  # 2
)
all_structs.append(ncTEVFSOSSRequest)
ncTEVFSOSSRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'method', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'url', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'headers', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.STRING, 'body', 'UTF8', None, ),  # 4
)
all_structs.append(ncTEVFSOSSPartInfo)
ncTEVFSOSSPartInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'etag', 'UTF8', None, ),  # 1
    (2, TType.I64, 'size', None, None, ),  # 2
)
all_structs.append(ncTOSSAccessInfo)
ncTOSSAccessInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'provider', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'providerDetail', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'accessId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'accessKey', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'bucket', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'serverName', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'internalServerName', 'UTF8', None, ),  # 7
    (8, TType.I32, 'httpsPort', None, None, ),  # 8
    (9, TType.I32, 'httpPort', None, None, ),  # 9
    (10, TType.STRING, 'cdnName', 'UTF8', None, ),  # 10
    (11, TType.I32, 'bucketStyle', None, None, ),  # 11
)
all_structs.append(ncTOSSSiteInfo)
ncTOSSSiteInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
)
all_structs.append(ncTEVFSOSSInfo)
ncTEVFSOSSInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ossId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ossName', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'enabled', None, None, ),  # 3
    (4, TType.STRUCT, 'accessInfo', [ncTOSSAccessInfo, None], None, ),  # 4
    (5, TType.STRUCT, 'siteInfo', [ncTOSSSiteInfo, None], None, ),  # 5
    (6, TType.I32, 'type', None, None, ),  # 6
)
all_structs.append(ncTEVFSOSSBaseInfo)
ncTEVFSOSSBaseInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ossId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ossName', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'enabled', None, None, ),  # 3
    (4, TType.STRUCT, 'siteInfo', [ncTOSSSiteInfo, None], None, ),  # 4
    (5, TType.I32, 'type', None, None, ),  # 5
)
all_structs.append(ncTOSSProxyInfo)
ncTOSSProxyInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'host', 'UTF8', None, ),  # 1
    (2, TType.I32, 'httpsPort', None, None, ),  # 2
    (3, TType.I32, 'httpPort', None, None, ),  # 3
)
all_structs.append(ncTEVFSNetworkSegment)
ncTEVFSNetworkSegment.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ip', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'netMask', 'UTF8', None, ),  # 2
)
all_structs.append(ncTEVFSLargeFileLimitConf)
ncTEVFSLargeFileLimitConf.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'enabled', None, None, ),  # 1
    (2, TType.I64, 'size', None, None, ),  # 2
    (3, TType.LIST, 'networkSegment', (TType.STRUCT, [ncTEVFSNetworkSegment, None], False), None, ),  # 3
    (4, TType.I32, 'option', None, None, ),  # 4
)
all_structs.append(ncTLimitSuffixDoc)
ncTLimitSuffixDoc.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'suffixType', None, None, ),  # 1
    (2, TType.STRING, 'suffixes', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'denyFlag', None, None, ),  # 3
)
all_structs.append(ncTEVFSCustomAttribute)
ncTEVFSCustomAttribute.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.I32, 'type', None, None, ),  # 3
    (4, TType.BOOL, 'searchable', None, None, ),  # 4
    (5, TType.I32, 'order', None, None, ),  # 5
    (6, TType.I32, 'status', None, None, ),  # 6
    (7, TType.STRING, 'values', 'UTF8', None, ),  # 7
)
all_structs.append(ncTEVFSObjMetaAppInfo)
ncTEVFSObjMetaAppInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
)
all_structs.append(ncTUserDownloadLimitInfo)
ncTUserDownloadLimitInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    (2, TType.I64, 'limitValue', None, None, ),  # 2
)
all_structs.append(ncTAppealInfo)
ncTAppealInfo.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'needReview', None, None, ),  # 1
    (2, TType.STRING, 'appellant', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'appealReason', 'UTF8', None, ),  # 3
)
all_structs.append(ncTEVFSQuarantineFileInfo)
ncTEVFSQuarantineFileInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'docid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'versionId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'modifier', 'UTF8', None, ),  # 4
    (5, TType.I64, 'modifie_time', None, None, ),  # 5
    (6, TType.STRING, 'parentPath', 'UTF8', None, ),  # 6
    (7, TType.I32, 'type', None, None, ),  # 7
    (8, TType.STRING, 'reason', 'UTF8', None, ),  # 8
    (9, TType.I64, 'serverTime', None, None, ),  # 9
    (10, TType.I64, 'appealExpiredTime', None, None, ),  # 10
    (11, TType.STRUCT, 'appeal', [ncTAppealInfo, None], None, ),  # 11
    (12, TType.I64, 'quarantineTime', None, None, ),  # 12
    (13, TType.STRING, 'creator', 'UTF8', None, ),  # 13
)
all_structs.append(ncTQuarantineConfig)
ncTQuarantineConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'appealProtectTime', None, None, ),  # 1
    (2, TType.I32, 'autoDeleteTime', None, None, ),  # 2
    (3, TType.BOOL, 'autoDeleteEnable', None, None, ),  # 3
)
all_structs.append(ncTQuarantineRetMsg)
ncTQuarantineRetMsg.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fileName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'versionName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'parentPath', 'UTF8', None, ),  # 3
)
all_structs.append(ncTFiltrationParam)
ncTFiltrationParam.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'key', 'UTF8', None, ),  # 1
    (2, TType.I32, 'appeal', None, None, ),  # 2
    (3, TType.I32, 'type', None, None, ),  # 3
    (4, TType.I32, 'quarantineType', None, None, ),  # 4
)
all_structs.append(ncTOSDowndloadRetParam)
ncTOSDowndloadRetParam.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'rev', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'editor', 'UTF8', None, ),  # 3
    (4, TType.I64, 'modified', None, None, ),  # 4
    (5, TType.I64, 'size', None, None, ),  # 5
    (6, TType.I64, 'client_mtime', None, None, ),  # 6
    (7, TType.LIST, 'auth_request', (TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.BOOL, 'need_watermark', None, None, ),  # 8
)
all_structs.append(ncTEVFSOutLinkFileInfo)
ncTEVFSOutLinkFileInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'creator', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'editor', 'UTF8', None, ),  # 2
    (3, TType.I64, 'modified', None, None, ),  # 3
    (4, TType.STRING, 'sharer', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'sharedObj', 'UTF8', None, ),  # 5
)
all_structs.append(ncTEVFSOutLinkAccessInfo)
ncTEVFSOutLinkAccessInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.STRING, 'rev', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'fileName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'filePath', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'ip', 'UTF8', None, ),  # 5
    (6, TType.I64, 'date', None, None, ),  # 6
    (7, TType.I32, 'opType', None, None, ),  # 7
    (8, TType.STRING, 'gns', 'UTF8', None, ),  # 8
)
all_structs.append(ncTEVFSOutLinkAccessInfoCount)
ncTEVFSOutLinkAccessInfoCount.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'count', None, None, ),  # 1
    (2, TType.I64, 'maxId', None, None, ),  # 2
)
all_structs.append(ncTEVFSGetPageOutLinkAccessInfoParam)
ncTEVFSGetPageOutLinkAccessInfoParam.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.I64, 'maxId', None, None, ),  # 2
    (3, TType.I32, 'start', None, None, ),  # 3
    (4, TType.I32, 'limit', None, None, ),  # 4
)
all_structs.append(ncTEVFSFileMetadata)
ncTEVFSFileMetadata.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'rev', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'editor', 'UTF8', None, ),  # 3
    (4, TType.I64, 'modified', None, None, ),  # 4
)
all_structs.append(ncTEVFSFileAttribute)
ncTEVFSFileAttribute.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'creator', 'UTF8', None, ),  # 1
    (2, TType.I64, 'createTime', None, None, ),  # 2
    (3, TType.I32, 'csfLevel', None, None, ),  # 3
    (4, TType.STRING, 'name', 'UTF8', None, ),  # 4
)
all_structs.append(ncTEVFSFileInfo)
ncTEVFSFileInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'docId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'path', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'retained', None, None, ),  # 3
    (4, TType.STRUCT, 'attribute', [ncTEVFSFileAttribute, None], None, ),  # 4
    (5, TType.STRUCT, 'metadata', [ncTEVFSFileMetadata, None], None, ),  # 5
)
all_structs.append(ncTEVFSFileInfoCount)
ncTEVFSFileInfoCount.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'count', None, None, ),  # 1
    (2, TType.I64, 'maxCreateTime', None, None, ),  # 2
)
all_structs.append(ncTEVFSGetPageFileInfoParam)
ncTEVFSGetPageFileInfoParam.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.I64, 'maxCreateTime', None, None, ),  # 2
    (3, TType.I32, 'start', None, None, ),  # 3
    (4, TType.I32, 'limit', None, None, ),  # 4
)
fix_spec(all_structs)
del all_structs
