#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from License import ncTLicense
from License.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  ncTDeviceInfo Licensem_GetDeviceInfo()')
    print('  ncTLicenseInfo Licensem_AddLicense(string license)')
    print('  void Licensem_DeleteLicense(string license)')
    print('  void Licensem_ActivateLicense(string license, string activeCode)')
    print('   Licensem_GetAllLicenses()')
    print('  void Licensem_CheckNodeNumOverflow(i32 nodeNum)')
    print('  void Licensem_AutoAuthorized(string password)')
    print('  void Licensem_CheckNasNumOverflow(i32 nodeNum)')
    print('  ncTOnlineActivateResult Licensem_OnlineActivate(string url, string account, string password)')
    print('  bool Licensem_GetAnyRobotOptionStatus()')
    print('  string Licensem_GetMachineCode()')
    print('  string Licensem_GetAuthInfo()')
    print('  string Licensem_GetSiteUserInfo(string siteId)')
    print('  i32 Licensem_GetSiteUserAuthNum(string siteId)')
    print('  i32 Licensem_GetSiteAuthStatus(string siteId)')
    print('  i32 Licensem_GetNASAuthNodeNum()')
    print('  ncTCMPHostInfo CMP_GetHostInfo()')
    print('  void CMP_SetHostInfo(ncTCMPHostInfo cmpHostInfo)')
    print('  void CMP_Test(ncTCMPHostInfo cmpHostInfo)')
    print('  string CMP_SimulateLicenseMessage(string msg)')
    print('  void CMP_GetLicenseInfo()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ncTLicense.Client(protocol)
transport.open()

if cmd == 'Licensem_GetDeviceInfo':
    if len(args) != 0:
        print('Licensem_GetDeviceInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.Licensem_GetDeviceInfo())

elif cmd == 'Licensem_AddLicense':
    if len(args) != 1:
        print('Licensem_AddLicense requires 1 args')
        sys.exit(1)
    pp.pprint(client.Licensem_AddLicense(args[0],))

elif cmd == 'Licensem_DeleteLicense':
    if len(args) != 1:
        print('Licensem_DeleteLicense requires 1 args')
        sys.exit(1)
    pp.pprint(client.Licensem_DeleteLicense(args[0],))

elif cmd == 'Licensem_ActivateLicense':
    if len(args) != 2:
        print('Licensem_ActivateLicense requires 2 args')
        sys.exit(1)
    pp.pprint(client.Licensem_ActivateLicense(args[0], args[1],))

elif cmd == 'Licensem_GetAllLicenses':
    if len(args) != 0:
        print('Licensem_GetAllLicenses requires 0 args')
        sys.exit(1)
    pp.pprint(client.Licensem_GetAllLicenses())

elif cmd == 'Licensem_CheckNodeNumOverflow':
    if len(args) != 1:
        print('Licensem_CheckNodeNumOverflow requires 1 args')
        sys.exit(1)
    pp.pprint(client.Licensem_CheckNodeNumOverflow(eval(args[0]),))

elif cmd == 'Licensem_AutoAuthorized':
    if len(args) != 1:
        print('Licensem_AutoAuthorized requires 1 args')
        sys.exit(1)
    pp.pprint(client.Licensem_AutoAuthorized(args[0],))

elif cmd == 'Licensem_CheckNasNumOverflow':
    if len(args) != 1:
        print('Licensem_CheckNasNumOverflow requires 1 args')
        sys.exit(1)
    pp.pprint(client.Licensem_CheckNasNumOverflow(eval(args[0]),))

elif cmd == 'Licensem_OnlineActivate':
    if len(args) != 3:
        print('Licensem_OnlineActivate requires 3 args')
        sys.exit(1)
    pp.pprint(client.Licensem_OnlineActivate(args[0], args[1], args[2],))

elif cmd == 'Licensem_GetAnyRobotOptionStatus':
    if len(args) != 0:
        print('Licensem_GetAnyRobotOptionStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.Licensem_GetAnyRobotOptionStatus())

elif cmd == 'Licensem_GetMachineCode':
    if len(args) != 0:
        print('Licensem_GetMachineCode requires 0 args')
        sys.exit(1)
    pp.pprint(client.Licensem_GetMachineCode())

elif cmd == 'Licensem_GetAuthInfo':
    if len(args) != 0:
        print('Licensem_GetAuthInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.Licensem_GetAuthInfo())

elif cmd == 'Licensem_GetSiteUserInfo':
    if len(args) != 1:
        print('Licensem_GetSiteUserInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.Licensem_GetSiteUserInfo(args[0],))

elif cmd == 'Licensem_GetSiteUserAuthNum':
    if len(args) != 1:
        print('Licensem_GetSiteUserAuthNum requires 1 args')
        sys.exit(1)
    pp.pprint(client.Licensem_GetSiteUserAuthNum(args[0],))

elif cmd == 'Licensem_GetSiteAuthStatus':
    if len(args) != 1:
        print('Licensem_GetSiteAuthStatus requires 1 args')
        sys.exit(1)
    pp.pprint(client.Licensem_GetSiteAuthStatus(args[0],))

elif cmd == 'Licensem_GetNASAuthNodeNum':
    if len(args) != 0:
        print('Licensem_GetNASAuthNodeNum requires 0 args')
        sys.exit(1)
    pp.pprint(client.Licensem_GetNASAuthNodeNum())

elif cmd == 'CMP_GetHostInfo':
    if len(args) != 0:
        print('CMP_GetHostInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.CMP_GetHostInfo())

elif cmd == 'CMP_SetHostInfo':
    if len(args) != 1:
        print('CMP_SetHostInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.CMP_SetHostInfo(eval(args[0]),))

elif cmd == 'CMP_Test':
    if len(args) != 1:
        print('CMP_Test requires 1 args')
        sys.exit(1)
    pp.pprint(client.CMP_Test(eval(args[0]),))

elif cmd == 'CMP_SimulateLicenseMessage':
    if len(args) != 1:
        print('CMP_SimulateLicenseMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.CMP_SimulateLicenseMessage(args[0],))

elif cmd == 'CMP_GetLicenseInfo':
    if len(args) != 0:
        print('CMP_GetLicenseInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.CMP_GetLicenseInfo())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
