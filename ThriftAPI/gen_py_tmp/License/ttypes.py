#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import EThriftException.ttypes

from thrift.transport import TTransport
all_structs = []


class ncTAuthStatus(object):
    NCT_LS_NOTACTIVE = 1
    NCT_LS_HASACTIVE = 2
    NCT_LS_HASEXPIRED = 3
    NCT_LS_HASLAPSED = 4

    _VALUES_TO_NAMES = {
        1: "NCT_LS_NOTACTIVE",
        2: "NCT_LS_HASACTIVE",
        3: "NCT_LS_HASEXPIRED",
        4: "NCT_LS_HASLAPSED",
    }

    _NAMES_TO_VALUES = {
        "NCT_LS_NOTACTIVE": 1,
        "NCT_LS_HASACTIVE": 2,
        "NCT_LS_HASEXPIRED": 3,
        "NCT_LS_HASLAPSED": 4,
    }


class ncTDevAuthType(object):
    NCT_DAS_NOTAUTH = 1
    NCT_DAS_TEST = 2
    NCT_DAS_OFFICIAL = 3

    _VALUES_TO_NAMES = {
        1: "NCT_DAS_NOTAUTH",
        2: "NCT_DAS_TEST",
        3: "NCT_DAS_OFFICIAL",
    }

    _NAMES_TO_VALUES = {
        "NCT_DAS_NOTAUTH": 1,
        "NCT_DAS_TEST": 2,
        "NCT_DAS_OFFICIAL": 3,
    }


class ncTLicenseStatus(object):
    NCT_LS_NOTACTIVE = 1
    NCT_LS_HASACTIVE = 2
    NCT_LS_HASEXPIRED = 3
    NCT_LS_HASLAPSED = 4

    _VALUES_TO_NAMES = {
        1: "NCT_LS_NOTACTIVE",
        2: "NCT_LS_HASACTIVE",
        3: "NCT_LS_HASEXPIRED",
        4: "NCT_LS_HASLAPSED",
    }

    _NAMES_TO_VALUES = {
        "NCT_LS_NOTACTIVE": 1,
        "NCT_LS_HASACTIVE": 2,
        "NCT_LS_HASEXPIRED": 3,
        "NCT_LS_HASLAPSED": 4,
    }


class ncTOnlineActivateResult(object):
    NCT_AC_SUCCESS = 1
    NCT_AC_UPDATE = 2
    NCT_AC_NEWEST = 3

    _VALUES_TO_NAMES = {
        1: "NCT_AC_SUCCESS",
        2: "NCT_AC_UPDATE",
        3: "NCT_AC_NEWEST",
    }

    _NAMES_TO_VALUES = {
        "NCT_AC_SUCCESS": 1,
        "NCT_AC_UPDATE": 2,
        "NCT_AC_NEWEST": 3,
    }


class ncTlicenseType(object):
    NCT_NORMAL_TYPE = 0
    NCT_ONLINE_TYPE = 1
    NCT_CMP_TYPE = 2

    _VALUES_TO_NAMES = {
        0: "NCT_NORMAL_TYPE",
        1: "NCT_ONLINE_TYPE",
        2: "NCT_CMP_TYPE",
    }

    _NAMES_TO_VALUES = {
        "NCT_NORMAL_TYPE": 0,
        "NCT_ONLINE_TYPE": 1,
        "NCT_CMP_TYPE": 2,
    }


class ncTLicenseError(object):
    NCT_HARDWARE_AND_LICENSE_NOT_SUITED = 20501
    NCT_LICENSE_ALREADY_EXISTS = 20502
    NCT_LICENSE_HAS_ALREADY_EXPIRED = 20503
    NCT_INVALID_LICENSE_TYPE = 20504
    NCT_CANT_ADD_BASE_LICENSE_CAUSE_ONE_EXISTS = 20505
    NCT_CANT_ADD_OFFICIAL_LICENSE_CAUSE_TEST_EXISTS = 20506
    NCT_UPGRADE_LICENSE_ALREADY_EXISTS = 20507
    NCT_CANT_ADD_TEST_CAUSE_OFFICIAL_LICENSE_EXISTS = 20508
    NCT_CANT_ADD_TEST_CAUSE_TEST_EXISTS = 20509
    NCT_CANT_ADD_TEST_CAUSE_TEST_USED = 20510
    NCT_LICENSE_NOT_EXISTS = 20511
    NCT_LICENSE_ALREADY_ACTIVATED = 20512
    NCT_ACTIVE_FAILED_PLEASE_CHECK = 20513
    NCT_CANT_ACTIVATE_AGENT_LICENSE_CAUSE_BASE_NOT_ACTIVATED = 20514
    NCT_NOT_ANYSHARE_FAMILY_LICENSE = 20515
    NCT_FAILED_TO_GET_DEVICE_TYPE = 20516
    NCT_INVALID_LICENSE = 20517
    NCT_USER_NUM_OVERFLOW = 20518
    NCT_PRODUCT_NOT_AUTHORIZED = 20519
    NCT_NODE_NUM_OVERFLOW = 20520
    NCT_INVALID_NODE_NUM = 20521
    NCT_EXCEED_MAX_NODE_COUNT = 20522
    NCT_EXCEED_MAX_USER_COUNT = 20523
    NCT_PRODUCT_HAS_EXPIRED = 20524
    NCT_CANT_DELETE_TIME_AGENT_LICENSE_CAUSE_IT_IS_ACTIVATED = 20525
    NCT_CANT_ADD_AGENT_CAUSE_BASE_NOT_EXISTS = 20526
    NCT_NAS_NODE_NUM_OVERFLOW = 20527
    NCT_CONNECT_FAILED = 20528
    NCT_INVALID_MACHINE_ID = 20529
    NCT_NO_LICENSE = 20530
    NCT_ANOTHER_ACTIVATE_METHON_USED = 20531
    NCT_HARDWARE_NOT_SUPPORT_NAS_OPTION = 20532
    NCT_THE_SAME_OPTION_ALREADY_EXISTS = 20533
    NCT_EXCEED_MAX_USER_AGENT_COUNT = 20534
    NCT_EXCEED_LICENSE_USE_CONDITION = 20535
    NCT_CMP_CONNECT_ERROR = 22301
    NCT_CMP_AUTH_ERROR = 22302
    NCT_CMP_INVALID_IP_OR_HOST = 22303
    NCT_CMP_INVALID_PORT = 22304
    NCT_CMP_INVALID_TENANT_NAME = 22309
    NCT_CMP_INVALID_TENANT_PWD = 22310
    NCT_CMP_USER_OR_PASSWD_ERROR = 22311
    NCT_CMP_NODE_ALREADY_ADDED = 22312
    NCT_CMP_NODE_ALREADY_AUTHORIZED = 22313
    NCT_CMP_RESPONSE_TIMEOUT = 22314
    NCT_CMP_NODE_ALREADY_REGISTERED = 22315
    NCT_CMP_GET_LICENSE_FAILED = 22316

    _VALUES_TO_NAMES = {
        20501: "NCT_HARDWARE_AND_LICENSE_NOT_SUITED",
        20502: "NCT_LICENSE_ALREADY_EXISTS",
        20503: "NCT_LICENSE_HAS_ALREADY_EXPIRED",
        20504: "NCT_INVALID_LICENSE_TYPE",
        20505: "NCT_CANT_ADD_BASE_LICENSE_CAUSE_ONE_EXISTS",
        20506: "NCT_CANT_ADD_OFFICIAL_LICENSE_CAUSE_TEST_EXISTS",
        20507: "NCT_UPGRADE_LICENSE_ALREADY_EXISTS",
        20508: "NCT_CANT_ADD_TEST_CAUSE_OFFICIAL_LICENSE_EXISTS",
        20509: "NCT_CANT_ADD_TEST_CAUSE_TEST_EXISTS",
        20510: "NCT_CANT_ADD_TEST_CAUSE_TEST_USED",
        20511: "NCT_LICENSE_NOT_EXISTS",
        20512: "NCT_LICENSE_ALREADY_ACTIVATED",
        20513: "NCT_ACTIVE_FAILED_PLEASE_CHECK",
        20514: "NCT_CANT_ACTIVATE_AGENT_LICENSE_CAUSE_BASE_NOT_ACTIVATED",
        20515: "NCT_NOT_ANYSHARE_FAMILY_LICENSE",
        20516: "NCT_FAILED_TO_GET_DEVICE_TYPE",
        20517: "NCT_INVALID_LICENSE",
        20518: "NCT_USER_NUM_OVERFLOW",
        20519: "NCT_PRODUCT_NOT_AUTHORIZED",
        20520: "NCT_NODE_NUM_OVERFLOW",
        20521: "NCT_INVALID_NODE_NUM",
        20522: "NCT_EXCEED_MAX_NODE_COUNT",
        20523: "NCT_EXCEED_MAX_USER_COUNT",
        20524: "NCT_PRODUCT_HAS_EXPIRED",
        20525: "NCT_CANT_DELETE_TIME_AGENT_LICENSE_CAUSE_IT_IS_ACTIVATED",
        20526: "NCT_CANT_ADD_AGENT_CAUSE_BASE_NOT_EXISTS",
        20527: "NCT_NAS_NODE_NUM_OVERFLOW",
        20528: "NCT_CONNECT_FAILED",
        20529: "NCT_INVALID_MACHINE_ID",
        20530: "NCT_NO_LICENSE",
        20531: "NCT_ANOTHER_ACTIVATE_METHON_USED",
        20532: "NCT_HARDWARE_NOT_SUPPORT_NAS_OPTION",
        20533: "NCT_THE_SAME_OPTION_ALREADY_EXISTS",
        20534: "NCT_EXCEED_MAX_USER_AGENT_COUNT",
        20535: "NCT_EXCEED_LICENSE_USE_CONDITION",
        22301: "NCT_CMP_CONNECT_ERROR",
        22302: "NCT_CMP_AUTH_ERROR",
        22303: "NCT_CMP_INVALID_IP_OR_HOST",
        22304: "NCT_CMP_INVALID_PORT",
        22309: "NCT_CMP_INVALID_TENANT_NAME",
        22310: "NCT_CMP_INVALID_TENANT_PWD",
        22311: "NCT_CMP_USER_OR_PASSWD_ERROR",
        22312: "NCT_CMP_NODE_ALREADY_ADDED",
        22313: "NCT_CMP_NODE_ALREADY_AUTHORIZED",
        22314: "NCT_CMP_RESPONSE_TIMEOUT",
        22315: "NCT_CMP_NODE_ALREADY_REGISTERED",
        22316: "NCT_CMP_GET_LICENSE_FAILED",
    }

    _NAMES_TO_VALUES = {
        "NCT_HARDWARE_AND_LICENSE_NOT_SUITED": 20501,
        "NCT_LICENSE_ALREADY_EXISTS": 20502,
        "NCT_LICENSE_HAS_ALREADY_EXPIRED": 20503,
        "NCT_INVALID_LICENSE_TYPE": 20504,
        "NCT_CANT_ADD_BASE_LICENSE_CAUSE_ONE_EXISTS": 20505,
        "NCT_CANT_ADD_OFFICIAL_LICENSE_CAUSE_TEST_EXISTS": 20506,
        "NCT_UPGRADE_LICENSE_ALREADY_EXISTS": 20507,
        "NCT_CANT_ADD_TEST_CAUSE_OFFICIAL_LICENSE_EXISTS": 20508,
        "NCT_CANT_ADD_TEST_CAUSE_TEST_EXISTS": 20509,
        "NCT_CANT_ADD_TEST_CAUSE_TEST_USED": 20510,
        "NCT_LICENSE_NOT_EXISTS": 20511,
        "NCT_LICENSE_ALREADY_ACTIVATED": 20512,
        "NCT_ACTIVE_FAILED_PLEASE_CHECK": 20513,
        "NCT_CANT_ACTIVATE_AGENT_LICENSE_CAUSE_BASE_NOT_ACTIVATED": 20514,
        "NCT_NOT_ANYSHARE_FAMILY_LICENSE": 20515,
        "NCT_FAILED_TO_GET_DEVICE_TYPE": 20516,
        "NCT_INVALID_LICENSE": 20517,
        "NCT_USER_NUM_OVERFLOW": 20518,
        "NCT_PRODUCT_NOT_AUTHORIZED": 20519,
        "NCT_NODE_NUM_OVERFLOW": 20520,
        "NCT_INVALID_NODE_NUM": 20521,
        "NCT_EXCEED_MAX_NODE_COUNT": 20522,
        "NCT_EXCEED_MAX_USER_COUNT": 20523,
        "NCT_PRODUCT_HAS_EXPIRED": 20524,
        "NCT_CANT_DELETE_TIME_AGENT_LICENSE_CAUSE_IT_IS_ACTIVATED": 20525,
        "NCT_CANT_ADD_AGENT_CAUSE_BASE_NOT_EXISTS": 20526,
        "NCT_NAS_NODE_NUM_OVERFLOW": 20527,
        "NCT_CONNECT_FAILED": 20528,
        "NCT_INVALID_MACHINE_ID": 20529,
        "NCT_NO_LICENSE": 20530,
        "NCT_ANOTHER_ACTIVATE_METHON_USED": 20531,
        "NCT_HARDWARE_NOT_SUPPORT_NAS_OPTION": 20532,
        "NCT_THE_SAME_OPTION_ALREADY_EXISTS": 20533,
        "NCT_EXCEED_MAX_USER_AGENT_COUNT": 20534,
        "NCT_EXCEED_LICENSE_USE_CONDITION": 20535,
        "NCT_CMP_CONNECT_ERROR": 22301,
        "NCT_CMP_AUTH_ERROR": 22302,
        "NCT_CMP_INVALID_IP_OR_HOST": 22303,
        "NCT_CMP_INVALID_PORT": 22304,
        "NCT_CMP_INVALID_TENANT_NAME": 22309,
        "NCT_CMP_INVALID_TENANT_PWD": 22310,
        "NCT_CMP_USER_OR_PASSWD_ERROR": 22311,
        "NCT_CMP_NODE_ALREADY_ADDED": 22312,
        "NCT_CMP_NODE_ALREADY_AUTHORIZED": 22313,
        "NCT_CMP_RESPONSE_TIMEOUT": 22314,
        "NCT_CMP_NODE_ALREADY_REGISTERED": 22315,
        "NCT_CMP_GET_LICENSE_FAILED": 22316,
    }


class ncTDeviceInfo(object):
    """
    Attributes:
     - softwareType
     - hardwareType
     - usedNodeNum
     - authNodeNum
     - usedUserNum
     - authUserNum
     - authCapacity
     - authorizedStatus
     - expiredDay
     - endTime
     - authorizedType
     - machineCode
     - authExcelUserNum

    """


    def __init__(self, softwareType=None, hardwareType=None, usedNodeNum=None, authNodeNum=None, usedUserNum=None, authUserNum=None, authCapacity=None, authorizedStatus=None, expiredDay=None, endTime=None, authorizedType=None, machineCode=None, authExcelUserNum=None,):
        self.softwareType = softwareType
        self.hardwareType = hardwareType
        self.usedNodeNum = usedNodeNum
        self.authNodeNum = authNodeNum
        self.usedUserNum = usedUserNum
        self.authUserNum = authUserNum
        self.authCapacity = authCapacity
        self.authorizedStatus = authorizedStatus
        self.expiredDay = expiredDay
        self.endTime = endTime
        self.authorizedType = authorizedType
        self.machineCode = machineCode
        self.authExcelUserNum = authExcelUserNum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.softwareType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hardwareType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.usedNodeNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.authNodeNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.usedUserNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.authUserNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.authCapacity = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.authorizedStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.expiredDay = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.endTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.authorizedType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.machineCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.authExcelUserNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTDeviceInfo')
        if self.softwareType is not None:
            oprot.writeFieldBegin('softwareType', TType.STRING, 1)
            oprot.writeString(self.softwareType.encode('utf-8') if sys.version_info[0] == 2 else self.softwareType)
            oprot.writeFieldEnd()
        if self.hardwareType is not None:
            oprot.writeFieldBegin('hardwareType', TType.STRING, 2)
            oprot.writeString(self.hardwareType.encode('utf-8') if sys.version_info[0] == 2 else self.hardwareType)
            oprot.writeFieldEnd()
        if self.usedNodeNum is not None:
            oprot.writeFieldBegin('usedNodeNum', TType.I32, 3)
            oprot.writeI32(self.usedNodeNum)
            oprot.writeFieldEnd()
        if self.authNodeNum is not None:
            oprot.writeFieldBegin('authNodeNum', TType.I32, 4)
            oprot.writeI32(self.authNodeNum)
            oprot.writeFieldEnd()
        if self.usedUserNum is not None:
            oprot.writeFieldBegin('usedUserNum', TType.I64, 5)
            oprot.writeI64(self.usedUserNum)
            oprot.writeFieldEnd()
        if self.authUserNum is not None:
            oprot.writeFieldBegin('authUserNum', TType.I64, 6)
            oprot.writeI64(self.authUserNum)
            oprot.writeFieldEnd()
        if self.authCapacity is not None:
            oprot.writeFieldBegin('authCapacity', TType.I64, 7)
            oprot.writeI64(self.authCapacity)
            oprot.writeFieldEnd()
        if self.authorizedStatus is not None:
            oprot.writeFieldBegin('authorizedStatus', TType.I32, 8)
            oprot.writeI32(self.authorizedStatus)
            oprot.writeFieldEnd()
        if self.expiredDay is not None:
            oprot.writeFieldBegin('expiredDay', TType.I32, 9)
            oprot.writeI32(self.expiredDay)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.I64, 10)
            oprot.writeI64(self.endTime)
            oprot.writeFieldEnd()
        if self.authorizedType is not None:
            oprot.writeFieldBegin('authorizedType', TType.I32, 11)
            oprot.writeI32(self.authorizedType)
            oprot.writeFieldEnd()
        if self.machineCode is not None:
            oprot.writeFieldBegin('machineCode', TType.STRING, 12)
            oprot.writeString(self.machineCode.encode('utf-8') if sys.version_info[0] == 2 else self.machineCode)
            oprot.writeFieldEnd()
        if self.authExcelUserNum is not None:
            oprot.writeFieldBegin('authExcelUserNum', TType.I64, 13)
            oprot.writeI64(self.authExcelUserNum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTLicenseInfo(object):
    """
    Attributes:
     - value
     - model
     - type
     - authNodeNum
     - authUserNum
     - authCapacity
     - expiredDay
     - status
     - endTime
     - activeTime

    """


    def __init__(self, value=None, model=None, type=None, authNodeNum=None, authUserNum=None, authCapacity=None, expiredDay=None, status=None, endTime=None, activeTime=None,):
        self.value = value
        self.model = model
        self.type = type
        self.authNodeNum = authNodeNum
        self.authUserNum = authUserNum
        self.authCapacity = authCapacity
        self.expiredDay = expiredDay
        self.status = status
        self.endTime = endTime
        self.activeTime = activeTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.model = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.authNodeNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.authUserNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.authCapacity = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.expiredDay = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.endTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.activeTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLicenseInfo')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 1)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        if self.model is not None:
            oprot.writeFieldBegin('model', TType.STRING, 2)
            oprot.writeString(self.model.encode('utf-8') if sys.version_info[0] == 2 else self.model)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 3)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.authNodeNum is not None:
            oprot.writeFieldBegin('authNodeNum', TType.I32, 4)
            oprot.writeI32(self.authNodeNum)
            oprot.writeFieldEnd()
        if self.authUserNum is not None:
            oprot.writeFieldBegin('authUserNum', TType.I64, 5)
            oprot.writeI64(self.authUserNum)
            oprot.writeFieldEnd()
        if self.authCapacity is not None:
            oprot.writeFieldBegin('authCapacity', TType.I64, 6)
            oprot.writeI64(self.authCapacity)
            oprot.writeFieldEnd()
        if self.expiredDay is not None:
            oprot.writeFieldBegin('expiredDay', TType.I32, 7)
            oprot.writeI32(self.expiredDay)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 8)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.I64, 9)
            oprot.writeI64(self.endTime)
            oprot.writeFieldEnd()
        if self.activeTime is not None:
            oprot.writeFieldBegin('activeTime', TType.I64, 10)
            oprot.writeI64(self.activeTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTCMPHostInfo(object):
    """
    Attributes:
     - host
     - port
     - tenantName
     - tenantPwd

    """


    def __init__(self, host=None, port=None, tenantName=None, tenantPwd=None,):
        self.host = host
        self.port = port
        self.tenantName = tenantName
        self.tenantPwd = tenantPwd

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.tenantName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.tenantPwd = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTCMPHostInfo')
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 1)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 2)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.tenantName is not None:
            oprot.writeFieldBegin('tenantName', TType.STRING, 3)
            oprot.writeString(self.tenantName.encode('utf-8') if sys.version_info[0] == 2 else self.tenantName)
            oprot.writeFieldEnd()
        if self.tenantPwd is not None:
            oprot.writeFieldBegin('tenantPwd', TType.STRING, 4)
            oprot.writeString(self.tenantPwd.encode('utf-8') if sys.version_info[0] == 2 else self.tenantPwd)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncTDeviceInfo)
ncTDeviceInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'softwareType', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'hardwareType', 'UTF8', None, ),  # 2
    (3, TType.I32, 'usedNodeNum', None, None, ),  # 3
    (4, TType.I32, 'authNodeNum', None, None, ),  # 4
    (5, TType.I64, 'usedUserNum', None, None, ),  # 5
    (6, TType.I64, 'authUserNum', None, None, ),  # 6
    (7, TType.I64, 'authCapacity', None, None, ),  # 7
    (8, TType.I32, 'authorizedStatus', None, None, ),  # 8
    (9, TType.I32, 'expiredDay', None, None, ),  # 9
    (10, TType.I64, 'endTime', None, None, ),  # 10
    (11, TType.I32, 'authorizedType', None, None, ),  # 11
    (12, TType.STRING, 'machineCode', 'UTF8', None, ),  # 12
    (13, TType.I64, 'authExcelUserNum', None, None, ),  # 13
)
all_structs.append(ncTLicenseInfo)
ncTLicenseInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'value', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'model', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'type', 'UTF8', None, ),  # 3
    (4, TType.I32, 'authNodeNum', None, None, ),  # 4
    (5, TType.I64, 'authUserNum', None, None, ),  # 5
    (6, TType.I64, 'authCapacity', None, None, ),  # 6
    (7, TType.I32, 'expiredDay', None, None, ),  # 7
    (8, TType.I32, 'status', None, None, ),  # 8
    (9, TType.I64, 'endTime', None, None, ),  # 9
    (10, TType.I64, 'activeTime', None, None, ),  # 10
)
all_structs.append(ncTCMPHostInfo)
ncTCMPHostInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'host', 'UTF8', None, ),  # 1
    (2, TType.I32, 'port', None, None, ),  # 2
    (3, TType.STRING, 'tenantName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'tenantPwd', 'UTF8', None, ),  # 4
)
fix_spec(all_structs)
del all_structs
