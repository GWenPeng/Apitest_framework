#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import EThriftException.ttypes
import EACPLog.ttypes

from thrift.transport import TTransport
all_structs = []


class ncTUsrmUserType(object):
    NCT_USER_TYPE_LOCAL = 1
    NCT_USER_TYPE_DOMAIN = 2
    NCT_USER_TYPE_THIRD = 3

    _VALUES_TO_NAMES = {
        1: "NCT_USER_TYPE_LOCAL",
        2: "NCT_USER_TYPE_DOMAIN",
        3: "NCT_USER_TYPE_THIRD",
    }

    _NAMES_TO_VALUES = {
        "NCT_USER_TYPE_LOCAL": 1,
        "NCT_USER_TYPE_DOMAIN": 2,
        "NCT_USER_TYPE_THIRD": 3,
    }


class ncTUsrmUserStatus(object):
    NCT_STATUS_ENABLE = 0
    NCT_STATUS_DISABLE = 1
    NCT_STATUS_DELETE = 2

    _VALUES_TO_NAMES = {
        0: "NCT_STATUS_ENABLE",
        1: "NCT_STATUS_DISABLE",
        2: "NCT_STATUS_DELETE",
    }

    _NAMES_TO_VALUES = {
        "NCT_STATUS_ENABLE": 0,
        "NCT_STATUS_DISABLE": 1,
        "NCT_STATUS_DELETE": 2,
    }


class ncTUsrmDepartType(object):
    NCT_DEPART_TYPE_LOCAL = 1
    NCT_DEPART_TYPE_DOMAIN = 2
    NCT_DEPART_TYPE_THIRD = 3

    _VALUES_TO_NAMES = {
        1: "NCT_DEPART_TYPE_LOCAL",
        2: "NCT_DEPART_TYPE_DOMAIN",
        3: "NCT_DEPART_TYPE_THIRD",
    }

    _NAMES_TO_VALUES = {
        "NCT_DEPART_TYPE_LOCAL": 1,
        "NCT_DEPART_TYPE_DOMAIN": 2,
        "NCT_DEPART_TYPE_THIRD": 3,
    }


class ncTUsrmDomainType(object):
    NCT_DOMAIN_TYPE_PRIMARY = 1
    NCT_DOMAIN_TYPE_SUB = 2
    NCT_DOMAIN_TYPE_TRUST = 3

    _VALUES_TO_NAMES = {
        1: "NCT_DOMAIN_TYPE_PRIMARY",
        2: "NCT_DOMAIN_TYPE_SUB",
        3: "NCT_DOMAIN_TYPE_TRUST",
    }

    _NAMES_TO_VALUES = {
        "NCT_DOMAIN_TYPE_PRIMARY": 1,
        "NCT_DOMAIN_TYPE_SUB": 2,
        "NCT_DOMAIN_TYPE_TRUST": 3,
    }


class ncTDBType(object):
    NCT_MYSQL = 1
    NCT_ORACLE = 2
    NCT_MSSQL = 3

    _VALUES_TO_NAMES = {
        1: "NCT_MYSQL",
        2: "NCT_ORACLE",
        3: "NCT_MSSQL",
    }

    _NAMES_TO_VALUES = {
        "NCT_MYSQL": 1,
        "NCT_ORACLE": 2,
        "NCT_MSSQL": 3,
    }


class ncTUsrmAuthenType(object):
    NCT_AUTHEN_TYPE_MANAGER = 1
    NCT_AUTHEN_TYPE_NORMAL = 2
    NCT_AUTHEN_TYPE_THIRD = 3

    _VALUES_TO_NAMES = {
        1: "NCT_AUTHEN_TYPE_MANAGER",
        2: "NCT_AUTHEN_TYPE_NORMAL",
        3: "NCT_AUTHEN_TYPE_THIRD",
    }

    _NAMES_TO_VALUES = {
        "NCT_AUTHEN_TYPE_MANAGER": 1,
        "NCT_AUTHEN_TYPE_NORMAL": 2,
        "NCT_AUTHEN_TYPE_THIRD": 3,
    }


class ncTAuditType(object):
    NCT_PERM_SHARE = 1
    NCT_CSF_LEVEL = 2
    NCT_PERM_AND_CSF_SHARE = 3
    NCT_DOC_FLOW = 4

    _VALUES_TO_NAMES = {
        1: "NCT_PERM_SHARE",
        2: "NCT_CSF_LEVEL",
        3: "NCT_PERM_AND_CSF_SHARE",
        4: "NCT_DOC_FLOW",
    }

    _NAMES_TO_VALUES = {
        "NCT_PERM_SHARE": 1,
        "NCT_CSF_LEVEL": 2,
        "NCT_PERM_AND_CSF_SHARE": 3,
        "NCT_DOC_FLOW": 4,
    }


class ncTAuditObjectType(object):
    NCT_AUDIT_OBJECT_USER = 1
    NCT_AUDIT_OBJECT_DEPT = 2
    NCT_AUDIT_OBJECT_LIBRARY = 3
    NCT_AUDIT_OBJECT_ARCHIVE = 4

    _VALUES_TO_NAMES = {
        1: "NCT_AUDIT_OBJECT_USER",
        2: "NCT_AUDIT_OBJECT_DEPT",
        3: "NCT_AUDIT_OBJECT_LIBRARY",
        4: "NCT_AUDIT_OBJECT_ARCHIVE",
    }

    _NAMES_TO_VALUES = {
        "NCT_AUDIT_OBJECT_USER": 1,
        "NCT_AUDIT_OBJECT_DEPT": 2,
        "NCT_AUDIT_OBJECT_LIBRARY": 3,
        "NCT_AUDIT_OBJECT_ARCHIVE": 4,
    }


class ncTUsrmDomainSyncMode(object):
    NCT_SYNC_UPPER_OU = 0
    NCT_NOT_SYNC_UPPER_OU = 1
    NCT_SYNC_USERS_ONLY = 2

    _VALUES_TO_NAMES = {
        0: "NCT_SYNC_UPPER_OU",
        1: "NCT_NOT_SYNC_UPPER_OU",
        2: "NCT_SYNC_USERS_ONLY",
    }

    _NAMES_TO_VALUES = {
        "NCT_SYNC_UPPER_OU": 0,
        "NCT_NOT_SYNC_UPPER_OU": 1,
        "NCT_SYNC_USERS_ONLY": 2,
    }


class ncTOSType(object):
    android = 2
    mac = 3
    WIN_32_ADVANCED = 4
    WIN_64_ADVANCED = 5
    officePlugin = 6
    iOS = 7

    _VALUES_TO_NAMES = {
        2: "android",
        3: "mac",
        4: "WIN_32_ADVANCED",
        5: "WIN_64_ADVANCED",
        6: "officePlugin",
        7: "iOS",
    }

    _NAMES_TO_VALUES = {
        "android": 2,
        "mac": 3,
        "WIN_32_ADVANCED": 4,
        "WIN_64_ADVANCED": 5,
        "officePlugin": 6,
        "iOS": 7,
    }


class ncTDocExchangeLimitType(object):
    NCT_DOC_EXCHANGE = 1
    NCT_LIB_SYNC = 2
    NCT_DOC_EXCHANGE_AND_LIB_SYNC = 3

    _VALUES_TO_NAMES = {
        1: "NCT_DOC_EXCHANGE",
        2: "NCT_LIB_SYNC",
        3: "NCT_DOC_EXCHANGE_AND_LIB_SYNC",
    }

    _NAMES_TO_VALUES = {
        "NCT_DOC_EXCHANGE": 1,
        "NCT_LIB_SYNC": 2,
        "NCT_DOC_EXCHANGE_AND_LIB_SYNC": 3,
    }


class ncTDeviceOsType(object):
    NCT_UNKNOWN = 0
    NCT_IOS = 1
    NCT_ANDROID = 2
    NCT_WINDOWSPHONE = 3
    NCT_WINDOWS = 4
    NCT_MACOSX = 5
    NCT_WEB = 6
    NCT_MOBILEWEB = 7

    _VALUES_TO_NAMES = {
        0: "NCT_UNKNOWN",
        1: "NCT_IOS",
        2: "NCT_ANDROID",
        3: "NCT_WINDOWSPHONE",
        4: "NCT_WINDOWS",
        5: "NCT_MACOSX",
        6: "NCT_WEB",
        7: "NCT_MOBILEWEB",
    }

    _NAMES_TO_VALUES = {
        "NCT_UNKNOWN": 0,
        "NCT_IOS": 1,
        "NCT_ANDROID": 2,
        "NCT_WINDOWSPHONE": 3,
        "NCT_WINDOWS": 4,
        "NCT_MACOSX": 5,
        "NCT_WEB": 6,
        "NCT_MOBILEWEB": 7,
    }


class ncTPluginType(object):
    AUTHENTICATION = 0
    MESSAGE = 1

    _VALUES_TO_NAMES = {
        0: "AUTHENTICATION",
        1: "MESSAGE",
    }

    _NAMES_TO_VALUES = {
        "AUTHENTICATION": 0,
        "MESSAGE": 1,
    }


class ncTMFAType(object):
    SMSAuth = 0
    OTPAuth = 1

    _VALUES_TO_NAMES = {
        0: "SMSAuth",
        1: "OTPAuth",
    }

    _NAMES_TO_VALUES = {
        "SMSAuth": 0,
        "OTPAuth": 1,
    }


class ncTVcodeType(object):
    IMAGE_VCODE = 1
    NUM_VCODE = 2
    DAUL_AUTH_VCODE = 3

    _VALUES_TO_NAMES = {
        1: "IMAGE_VCODE",
        2: "NUM_VCODE",
        3: "DAUL_AUTH_VCODE",
    }

    _NAMES_TO_VALUES = {
        "IMAGE_VCODE": 1,
        "NUM_VCODE": 2,
        "DAUL_AUTH_VCODE": 3,
    }


class ncTDocAuditType(object):
    NCT_DAT_ONE = 1
    NCT_DAT_ALL = 2
    NCT_DAT_LEVEL = 3
    NCT_DAT_FREE = 4

    _VALUES_TO_NAMES = {
        1: "NCT_DAT_ONE",
        2: "NCT_DAT_ALL",
        3: "NCT_DAT_LEVEL",
        4: "NCT_DAT_FREE",
    }

    _NAMES_TO_VALUES = {
        "NCT_DAT_ONE": 1,
        "NCT_DAT_ALL": 2,
        "NCT_DAT_LEVEL": 3,
        "NCT_DAT_FREE": 4,
    }


class ncTExtAppType(object):
    NCT_CHAOJIBIAOGE = 1

    _VALUES_TO_NAMES = {
        1: "NCT_CHAOJIBIAOGE",
    }

    _NAMES_TO_VALUES = {
        "NCT_CHAOJIBIAOGE": 1,
    }


class ncTLimitRateType(object):
    LIMIT_USER = 0
    LIMIT_USER_GROUP = 1

    _VALUES_TO_NAMES = {
        0: "LIMIT_USER",
        1: "LIMIT_USER_GROUP",
    }

    _NAMES_TO_VALUES = {
        "LIMIT_USER": 0,
        "LIMIT_USER_GROUP": 1,
    }


class ncTTemplateType(object):
    INTERNAL_LINK = 0
    EXTERNAL_LINK = 1

    _VALUES_TO_NAMES = {
        0: "INTERNAL_LINK",
        1: "EXTERNAL_LINK",
    }

    _NAMES_TO_VALUES = {
        "INTERNAL_LINK": 0,
        "EXTERNAL_LINK": 1,
    }


class ncTDocType(object):
    NCT_USER_DOC = 1
    NCT_CUSTOM_DOC = 3
    NCT_SHARE_DOC = 4
    NCT_ARCHIVE_DOC = 5

    _VALUES_TO_NAMES = {
        1: "NCT_USER_DOC",
        3: "NCT_CUSTOM_DOC",
        4: "NCT_SHARE_DOC",
        5: "NCT_ARCHIVE_DOC",
    }

    _NAMES_TO_VALUES = {
        "NCT_USER_DOC": 1,
        "NCT_CUSTOM_DOC": 3,
        "NCT_SHARE_DOC": 4,
        "NCT_ARCHIVE_DOC": 5,
    }


class ncTBindStatusSearchScope(object):
    NCT_ALL = 1
    NCT_BIND = 2
    NCT_UNBIND = 3

    _VALUES_TO_NAMES = {
        1: "NCT_ALL",
        2: "NCT_BIND",
        3: "NCT_UNBIND",
    }

    _NAMES_TO_VALUES = {
        "NCT_ALL": 1,
        "NCT_BIND": 2,
        "NCT_UNBIND": 3,
    }


class ncTSearchRange(object):
    NCT_LOGIN_NAME = 1
    NCT_DISPLAY_NAME = 2
    NCT_LOGIN_AND_DISPLAY = 3

    _VALUES_TO_NAMES = {
        1: "NCT_LOGIN_NAME",
        2: "NCT_DISPLAY_NAME",
        3: "NCT_LOGIN_AND_DISPLAY",
    }

    _NAMES_TO_VALUES = {
        "NCT_LOGIN_NAME": 1,
        "NCT_DISPLAY_NAME": 2,
        "NCT_LOGIN_AND_DISPLAY": 3,
    }


class ncTSearchResults(object):
    NCT_DISPLAY_NAME = 1
    NCT_LOGIN_AND_DISPLAY = 2

    _VALUES_TO_NAMES = {
        1: "NCT_DISPLAY_NAME",
        2: "NCT_LOGIN_AND_DISPLAY",
    }

    _NAMES_TO_VALUES = {
        "NCT_DISPLAY_NAME": 1,
        "NCT_LOGIN_AND_DISPLAY": 2,
    }


class ncTVirusProcessType(object):
    NCT_VIRUS_DELETE = 0
    NCT_VIRUS_FIX = 1

    _VALUES_TO_NAMES = {
        0: "NCT_VIRUS_DELETE",
        1: "NCT_VIRUS_FIX",
    }

    _NAMES_TO_VALUES = {
        "NCT_VIRUS_DELETE": 0,
        "NCT_VIRUS_FIX": 1,
    }


class ncTVirusUpdateMethodType(object):
    MULTISITE_UPDATE = 0
    FTP_UPDATE = 1

    _VALUES_TO_NAMES = {
        0: "MULTISITE_UPDATE",
        1: "FTP_UPDATE",
    }

    _NAMES_TO_VALUES = {
        "MULTISITE_UPDATE": 0,
        "FTP_UPDATE": 1,
    }


class ncTScanTaskStatus(object):
    NCT_NOT_START = 0
    NCT_INITING = 1
    NCT_RUNNING = 2
    NCT_STOP = 3
    NCT_FINISH = 4

    _VALUES_TO_NAMES = {
        0: "NCT_NOT_START",
        1: "NCT_INITING",
        2: "NCT_RUNNING",
        3: "NCT_STOP",
        4: "NCT_FINISH",
    }

    _NAMES_TO_VALUES = {
        "NCT_NOT_START": 0,
        "NCT_INITING": 1,
        "NCT_RUNNING": 2,
        "NCT_STOP": 3,
        "NCT_FINISH": 4,
    }


class ncTScanType(object):
    NCT_SCAN_TYPE_ALL = 0
    MCT_SCAN_TYPE_CUSTOM = 1

    _VALUES_TO_NAMES = {
        0: "NCT_SCAN_TYPE_ALL",
        1: "MCT_SCAN_TYPE_CUSTOM",
    }

    _NAMES_TO_VALUES = {
        "NCT_SCAN_TYPE_ALL": 0,
        "MCT_SCAN_TYPE_CUSTOM": 1,
    }


class ncTShareMgntError(object):
    NCT_DB_OPERATE_FAILED = 10001
    NCT_UNKNOWN_ERROR = 10002
    NCT_INVALID_URL = 20001
    NCT_START_LESS_THAN_ZERO = 20002
    NCT_START_MORE_THAN_TOTAL = 20003
    NCT_LIMIT_LESS_THAN_MINUS_ONE = 20004
    NCT_INVALID_DATETIME = 20005
    NCT_INVALID_LOGIN_NAME = 20101
    NCT_INVALID_DISPLAY_NAME = 20102
    NCT_INVALID_EMAIL = 20103
    NCT_INVALID_PHONE_NUM = 20104
    NCT_DUPLICATED_LOGIN_NAME = 20105
    NCT_DUPLICATED_EMALI = 20106
    NCT_USER_NOT_ADMIN = 20107
    NCT_INVALID_ACCOUNT_OR_PASSWORD = 20108
    NCT_USER_DISABLED = 20109
    NCT_USER_NOT_EXIST = 20110
    NCT_USER_HAS_EXIST = 20111
    NCT_CANNOT_MOVE_USER_TO_UNDISTRIBUTE_GROUP = 20112
    NCT_GROUP_NOT_EXIST = 20113
    NCT_GROUP_HAS_EXIST = 20114
    NCT_CANNOT_MODIFY_NONLOCAL_USER_PASSWORD = 20115
    NCT_CHECK_PASSWORD_FAILED = 20116
    NCT_INVALID_GROUP_NAME = 20117
    NCT_CANNOT_OPERATE_TMP_GROUP = 20118
    NCT_CANNOT_FIND_LOGINNAME_OR_EMAIL = 20119
    NCT_CANNOT_ADD_SELF_TO_GROUP = 20120
    NCT_CONTACT_HASE_EXIST = 20121
    NCT_CONTACT_NOT_EXIST = 20122
    NCT_DUPLICATED_DISPLAY_NAME = 20123
    NCT_INVALID_USER_PRIORITY = 20124
    NCT_INVALID_PASSWORD = 20125
    NCT_INVALID_STRONG_PASSWORD = 20126
    NCT_PASSWORD_EXPIRE = 20127
    NCT_PASSWORD_NOT_SAFE = 20128
    NCT_PASSWORD_IS_INITIAL = 20129
    NCT_ACCOUNT_LOCKED = 20130
    NCT_PWD_FIRST_FAILED = 20131
    NCT_PWD_SECOND_FAILED = 20132
    NCT_INVALID_SAPCE_SIZE = 20133
    NCT_WRONG_PASSWORD = 20134
    NCT_PWD_THIRD_FAILED = 20135
    NCT_CANNOT_MODIFY_CONTROL_PASSWORD = 20136
    NCT_CONTROLED_PASSWORD_EXPIRE = 20137
    NCT_SPACE_ALLOCATED_FOR_USER_EXCEEDS_THE_MAX_LIMIT = 20138
    NCT_CANNOT_LOGIN_SLAVE_SITE = 201239
    NCT_INVALID_USER_TYPE = 201240
    NCT_USER_LOGIN_IP_RESTRICTED = 201241
    NCT_INVALID_PASSWORD_ERR_CNT = 201242
    NCT_ACCOUNT_CANNOT_LOGIN_IN_SECRET_NODE = 20145
    NCT_UNINSTALL_PWD_NOT_ENABLED = 20146
    NCT_UNINSTALL_PWD_INCORRECT = 20147
    NCT_CHECK_USER_TOKEN_FAILED = 20148
    NCT_CHECK_VCODE_IS_NULL = 20149
    NCT_CHECK_VCODE_IS_TIMEOUT = 20150
    NCT_CHECK_VCODE_IS_WRONG = 20151
    NCT_USER_NOT_SUPER_ADMIN = 20152
    NCT_REMAIN_ADMIN_ACCOUNT = 20153
    NCT_ACCOUNT_CONFICT_WITH_ADMIN = 20154
    NCT_RESPONSIBLE_PERSON_EXIST = 20155
    NCT_INVALID_STRONG_PWD_LENGTH = 20156
    NCT_USER_ACCOUNT_HAS_EXPIRED = 20157
    NCT_INVALID_REMARK = 20158
    NCT_INVALID_IDCARDNUMBER = 20159
    NCT_DUPLICATED_IDCARDNUMBER = 20160
    NCT_CHECK_VCODE_MORE_THAN_THE_LIMIT = 20161
    NCT_OTP_WRONG = 20162
    NCT_MFA_OTP_SERVER_ERROR = 20163
    NCT_USER_HAS_NOT_BOUND_PHONE = 20164
    NCT_PHONE_NUMBER_HAS_BEEN_CHANGED = 20165
    NCT_OTP_TIMEOUT = 20166
    NCT_OTP_TOO_MANY_WRONG_TIME = 20167
    NCT_MFA_SMS_SERVER_ERROR = 20168
    NCT_INVALID_USER_SPACE = 20169
    NCT_INVALID_USER_STATUS = 20170
    NCT_DEPARTMENT_NOT_EXIST = 20201
    NCT_DEPARTMENT_HAS_EXIST = 20202
    NCT_INVALID_DEPART_NAME = 20203
    NCT_ORGNIZATION_NOT_EXIST = 20204
    NCT_ORGNIZATION_HAS_EXIST = 20205
    NCT_INVALID_ORG_NAME = 20206
    NCT_CANNOT_MOVE_DEPARTMENT_TO_UNDISTRIBUTE_GROUP = 20207
    NCT_CANNOT_MOVE_DEPARTMENT_TO_ALL_GROUP = 20208
    NCT_CANNOT_MOVE_DEPARTMENT_TO_CHILDREN = 20209
    NCT_SRC_DEPARTMENT_NOT_EXIST = 20210
    NCT_DEST_DEPARTMENT_NOT_EXIST = 20211
    NCT_DUPLICATED_SUBDEP_EXIST_IN_DEP = 20212
    NCT_USER_NOT_IN_DEPARTMENT = 20213
    NCT_CHECK_RESPONSE_ERROR = 20214
    NCT_ORG_OR_DEPART_NOT_EXIST = 20215
    NCT_CANNOT_DELETE_DEPART = 20216
    NCT_CANT_DEL_USER_CAUSE_USER_DOC_EXISTS = 20217
    NCT_INVALID_ORGAN_PRIORITY = 20218
    NCT_INVALID_DEPART_PRIORITY = 20219
    NCT_CANNOT_DELETE_DEPART_NO_PERM = 20220
    NCT_CANNOT_MANAGER_DEPARTMENT = 20221
    NCT_NOT_IN_ORIGINAL_DEPARTMENT = 20222
    NCT_DEST_POSTION_ILLEGAL = 20223
    NCT_BATCH_USERS_EXPORTING = 20301
    NCT_BATCH_USERS_IMPORTING = 20302
    NCT_CANNOT_SELECT_UNDISTRIBUTE_AND_ALL_GROUP = 20303
    NCT_WRONG_FILE_FORMAT = 20304
    NCT_CANNOT_FILL_IN_DEFAUL_PASSWORD = 20305
    NCT_DOWNLOAD_BATCH_USERS_FAILED = 20306
    NCT_DOWNLOAD_BATCH_USERS_TASK_NOT_EXIST = 20307
    NCT_ORG_MANAGER_CANNOT_EDIT_OWN_AUTH_INFO = 20308
    NCT_INVALID_DOMAIN_PARAMETER = 20401
    NCT_DOMAIN_NOT_EXIST = 20402
    NCT_DOMAIN_HAS_EXIST = 20403
    NCT_DOMAIN_USER_NOT_EXIST = 20404
    NCT_DOMAIN_USER_HAX_EXIST = 20405
    NCT_CANNOT_IMPORT_DOMAIN_USER_TO_UNDISTRIBUTE = 20406
    NCT_CANNOT_IMPORT_DOMAIN_USER_TO_ALL = 20407
    NCT_FAILED_CHECK_DOMAIN_USER = 24008
    NCT_CANNOT_IMPORT_AGAIN = 20409
    NCT_DOMAIN_TYPE_NOT_MATCH = 20410
    NCT_DOMAIN_SERVER_UNAVAILABLE = 20411
    NCT_DOMAIN_ERROR = 20412
    NCT_DOMAIN_DISABLE = 20413
    NCT_FORBIDDEN_LOGIN = 20414
    NCT_DOMAIN_CONFIF_PARAMETER = 20415
    NCT_PARAMETER_IS_NULL = 20416
    NCT_DOMAIN_IMPORTING = 20417
    NCT_DOMAIN_NAME_CONFIF_ERROR = 20418
    NCT_THREAD_IMPORTING = 20419
    NCT_PARENT_DOMAIN_NOT_EXIST = 20420
    NCT_FAILOVER_NOT_MATCH_PARENT = 20421
    NCT_DUPLICATED_FAILOVER_DOMAIN = 20422
    NCT_FAILOVER_DOMAIN_ADDRESS_SAME_WITH_PARENT = 20423
    NCT_USER_NUM_OVERFLOW = 20518
    NCT_PRODUCT_NOT_AUTHORIZED = 20519
    NCT_PRODUCT_HAS_EXPIRED = 20524
    NCT_FAILED_THIRD_VERIFY = 20601
    NCT_FAILED_THIRD_CONFIG = 20602
    NCT_INVALID_APPID_OR_APPKEY = 20603
    NCT_THIRD_CONFIG_NOT_EXIST = 20604
    NCT_THIRD_CONFIG_HAS_EXIST = 20605
    NCT_THIRD_PARTY_AUTH_ERROR = 20606
    NCT_THIRD_PARTY_AUTH_NOT_OPEN = 20607
    NCT_CANNOT_CONNECT_THID_PARTY_SERVER = 20608
    NCT_USER_NOT_EXIST_IN_LDAP = 20609
    NCT_NEED_THIRD_OAUTH = 20610
    NCT_USER_HAS_BEEN_DELETED = 20611
    NCT_THIRD_DB_NOT_EXISTS = 20612
    NCT_THIRD_TABLE_NOT_EXISTS = 20613
    NCT_TIMESTAMP_EXPIRED = 20614
    NCT_INVALID_THIRD_PARTY_PLUGIN = 20615
    NCT_INVALID_FILENAME = 20616
    NCT_THIRD_PLUGIN_INTER_ERROR = 20617
    NCT_MFA_CONFIG_ERROR = 20618
    NCT_INVALID_SECTION = 20701
    NCT_INVALID_OPTION = 20702
    NCT_INVALID_VALUE = 20703
    NCT_OPTION_NOT_EXISTS = 20704
    NCT_SECTION_NOT_EXISTS = 20705
    NCT_SMTP_SEND_FAILED = 20801
    NCT_SHARER_IS_EMPTY = 20802
    NCT_SHARE_SCOPE_IS_EMPTY = 20803
    NCT_SHARE_STRATEGY_NOT_EXISTS = 20804
    NCT_USER_NOT_IN_PERM_SOCPE = 20805
    NCT_SMTP_PARAMETER_PARSE_FAILED = 20806
    NCT_SMTP_SERVER_NOT_SET = 20807
    NCT_SMTP_SERVER_NOT_AVAILABLE = 20808
    NCT_SMTP_RECIPIENT_MAIL_ILLEGAL = 20809
    NCT_SMTP_LOGIN_FAILED = 20810
    NCT_SMTP_AUTHENTICATION_METHOD_NOT_FOUND = 20811
    NCT_INVALID_SERVER = 20812
    NCT_INVALID_PORT = 20813
    NCT_INVALID_SAFEMODE = 20814
    NCT_SMTP_PASSWORD_NOT_SET = 20815
    NCT_INVALID_CSF_LEVEL = 20901
    NCT_SYS_CSF_LEVEL_CANT_DOWNGRADE = 20902
    NCT_USER_CSF_LEVEL_CANT_BE_HIGHER_THAN_SYS = 20903
    NCT_DOC_CSF_LEVEL_CANT_BE_HIGHER_THAN_SYA = 20904
    NCT_CSF_LEVEL_ENUM_HAS_BEEN_INITIALIZED = 20905
    NCT_CSF_LEVEL_ENUM_HAS_NOT_BEEN_INITIALIZED = 20906
    NCT_INVALID_ACCESSOR_TYPE = 21001
    NCT_ACCESSOR_ID_NOT_EXISTS = 21002
    NCT_INVALID_PERM_VALUE = 21003
    NCT_STRATEGY_ID_NOT_EXISTS = 21004
    NCT_ACCESSOR_ID_ALREADY_EXISTS = 21005
    NCT_PACKAGE_NAME_ERROR = 21100
    NCT_PACKAGE_NOT_EXIST = 21101
    NCT_PACKAGE_OS_ERROR = 21102
    NCT_PACKAGE_MODE_ERROR = 21103
    NCT_UPLOAD_EOSS_FAILED = 21104
    NCT_INVALID_OS_PARAMETER = 21105
    NCT_DEL_PKG_INFO_FAILED = 21106
    NCT_GET_URL_FAILED = 21107
    APPID_NOT_EXIST = 21108
    APPID_DISABLED = 21109
    SIGN_AUTH_FAILED = 21110
    APPID_HAS_EXIST = 21111
    APPID_LENGTH_MORE_THAN_50 = 21112
    APPKEY_LENGTH_MORE_THAN_50_OR_EMPTY = 21113
    NCT_AUDITOR_ALREADY_SET = 21201
    NCT_INVALID_AUDIT_OBJECT = 21202
    NCT_AUDITOR_NOT_EXIST = 21203
    NCT_AUDITOR_CSF_LEVEL_CHECK_FAILED = 21204
    NCT_AUDIT_OBJECT_TYPE_NOT_SUPPORT = 21205
    NCT_INVALID_DEPARTMENT_LIST = 21206
    NCT_CANT_SET_NONE_DIRECT_DEPART_STATUS = 21207
    NCT_CANT_OPERATE_AUDITOR_BECAUSEOF_SCOPE = 21208
    NCT_TOOL_ID_NOT_SUPPORT = 21301
    NCT_TOOL_ID_IS_EMPTY = 21302
    NCT_URL_EMPTY = 21303
    NCT_TOOL_NAME_NOT_SUPPORT = 21304
    NCT_INVALID_NET_ACCESSORS_PARAM = 21401
    NCT_INVALID_NET_IP_PARAM = 21402
    NCT_INVALID_NET_MASK_PARAM = 21403
    NCT_INVALID_ACCESSOR_TYPE_PARAM = 21404
    NCT_NET_ACCESSOR_ID_NOT_EXIST = 21405
    NCT_NET_ACCESSOR_EXIST = 21406
    NCT_NET_ACCESSOR_DATA_ERROR = 21407
    NCT_INVALID_CREATORID = 21501
    NCT_INVALID_DOC_AUDIT_INFO_PARAM = 21502
    NCT_INVALID_DOC_AUDIT_TYPE = 21503
    NCT_INVALID_AUDITORS = 21504
    NCT_INVALID_AUDITORS_OR_TYPE = 21505
    NCT_DOC_AUDIT_NAME_EXIST = 21506
    NCT_DOC_AUDIT_PROCESS_ID_NOT_EXIST = 21507
    NCT_INVALID_EDITORID = 21508
    NCT_INVALID_SEARCH_DOC_AUDIT_TYPE = 21509
    NCT_INVALID_AUDIT_PROCESS_NAME = 21510
    NCT_INVALID_DEST_DOC_ID = 21511
    NCT_EDITORID_NOT_EXIST = 21512
    NCT_EDITORID_DISABLED = 21513
    NCT_INVALID_MANAGER_ID = 21514
    NCT_DOC_AUDIT_PROCESS_IS_EMPTY = 21515
    NCT_INVALID_ACCESSOR_INFOS = 21516
    NCT_DEST_DOC_ID_TOO_DEEP = 21517
    NCT_INVALID_EXT_APP_PARAMS = 21601
    NCT_INVALID_EXT_APP_TYPE = 21602
    NCT_INVALID_EXT_APP_CONFIG = 21603
    NCT_EXT_APP_DISABLED = 21604
    NCT_ENTER_EXT_APP_FAILED = 21605
    NCT_CONNECT_EXT_APP_FAILED = 21606
    NCT_INVALID_RECEIVE_KEY = 21701
    NCT_OBJ_NOT_EXIST = 21702
    NCT_PARAMTER_IS_EMPTY = 21703
    NCT_OBJ_EXIST = 21704
    NCT_INVALID_GNS_PATH = 21801
    NCT_DUPLICATE_MOUNT_POINT = 21802
    NCT_NOT_INACTIVATED = 21803
    NCT_INVALID_PARAMTER = 21804
    NCT_GET_NODE_LIST_FAILED = 21805
    NCT_NODE_NOT_ONLINE = 21806
    NCT_LIMIT_RATE_OBJECT_NOT_SET = 21901
    NCT_LIMIT_RATE_NOT_EXIST = 21902
    NCT_INVALID_LIMIT_RATE_VALUES = 21903
    NCT_INVALID_LIMIT_RATE_TYPE = 21904
    NCT_ONLY_ONE_LIMIT_RATE_OBJECT = 21905
    NCT_LIMIT_USER_EXIST = 21906
    NCT_LIMIT_DEPART_EXIST = 21907
    NCT_AT_LEAST_SET_ONE_SPEED = 21908
    NCT_INVALID_DOC_WATERMARK_CONFIG = 22001
    NCT_DOC_WATERMARK_DISABLED = 22002
    NCT_INVALID_WATERMARK_TYPE = 22003
    NCT_INVALID_LINK_TEMPLATE_TYPE = 22101
    NCT_INVALID_SHAERER_TYPE = 22102
    NCT_TEMPLATE_NOT_EXIST = 22103
    NCT_CANNOT_DELETE_DEFAULT_LINK_TEMPLATE = 22104
    NCT_CANNOT_EDIT_DEFAULT_LINK_TEMPLATE_SHARER = 22105
    NCT_CANNOT_SET_OWNER = 22106
    NCT_EXCEED_MAX_INTERNAL_LINK_EXPIRE_DAY = 22107
    NCT_EXCEED_MAX_LINK_PERM = 22108
    NCT_EXCEED_MAX_EXTERNAL_LINK_EXPIRE_DAY = 22109
    NCT_NEED_SET_ACCESS_PASSWORD = 22110
    NCT_EXCEED_MAX_EXTERNAL_LINK_EXPIRE_TIME = 22111
    NCT_NET_DOCS_LIMIT_ID_NOT_EXIST = 22201
    NCT_NET_DOCS_LIMIT_EXIST = 22202
    NCT_DOC_ID_NOT_SET = 22203
    NCT_DOC_DOWNLOAD_LIMIT_OBJECT_NOT_SET = 22204
    NCT_DOC_DOWNLOAD_LIMIT_NOT_EXIST = 22205
    NCT_INVALID_DOC_DOWNLOAD_LIMIT_VALUE = 22206
    NCT_INVALID_DOC_TYPE = 22207
    NCT_INVALID_CPU_USAGE_THRESHOLD = 22208
    NCT_INVALID_MEMORY_USAGE_THRESHOLD = 22209
    NCT_INVALID_PRIORITY = 22210
    NCT_INSUFFICIENT_SYSTEM_RESOURCES = 22211
    NCT_SITE_NOT_EXIST = 22305
    NCT_EMAILADDR_NOT_SET = 22306
    NCT_SECURIT_EMAILADDR_NOT_SET = 22307
    NCT_SITE_HAS_BEEN_MOVED = 22308
    NCT_INVALID_SEARCH_SCOPE = 22401
    NCT_INVALID_SEARCH_CONFIG_PARAM = 22402
    NCT_INVALID_FILE_NAME = 22501
    NCT_INVALID_COMPRESS_PASSWORD = 22502
    NCT_INVALID_ACTIVE_PARAM = 22503
    NCT_INVALID_HISTORY_PARAM = 22504
    NCT_COMPRESS_TASK_FAILED = 22505
    NCT_COMPRESS_TASK_IN_PROGRESS = 22506
    NCT_COMPRESS_TASK_NOT_EXIST = 22507
    NCT_DOWNLOAD_HISTORY_LOG_FAILED = 22508
    NCT_INVALID_SMS_CONFIG = 22601
    NCT_USER_NOT_ACTIVATE = 22602
    NCT_INVALID_TEL_NUMBER = 22603
    NCT_TEL_NUMBER_EXISTS = 22604
    NCT_NOT_SUPPORT_SMS_SERVER = 22605
    NCT_USER_IS_ACTIVATE = 22606
    NCT_SMS_VERIFY_CODE_ERROR = 22607
    NCT_SMS_VERIFY_CODE_TIMEOUT = 22608
    NCT_SMS_ACTIVATE_DISABLED = 22609
    NCT_CONNECT_SMS_SERVER_ERROR = 22610
    NCT_SEND_VERIFY_CODE_FAIL = 22611
    NCT_DOWNLOAD_ACTIVE_REPORT_FAILED = 22701
    NCT_DOWNLOAD_ACTIVE_REPORT_IN_PROGRESS = 22702
    NCT_DOWNLOAD_ACTIVE_REPORT_NOT_EXIST = 22703
    NCT_INVALID_RECV_AREA_NAME = 22801
    NCT_RECV_AREA_EXIST = 22802
    NCT_RECV_AREA_NOT_EXIST = 22803
    NCT_CREATE_SEND_DIR_ERROR = 22804
    NCT_RECV_AREA_NAME_IS_EMPTY = 22805
    NCT_ROLE_NAME_EXIST = 22901
    NCT_INVALID_ROLE_NAME = 22902
    NCT_INVALID_CREATOR = 22903
    NCT_ROLE_NOT_EXIST = 22904
    NCT_INVALID_OPERATOR = 22905
    NCT_INVALID_MEMBER = 22906
    NCT_SYS_ROLE_CANNOT_SET_OR_DELETE = 22908
    NCT_ROLE_MEMBER_NOT_EXIST = 22909
    NCT_FILE_CRAWL_STRATEGY_EXIST = 23001
    NCT_CUSTOM_DOC_NOT_EXIST = 23002
    NCT_AUTO_ARCHIVE_CONFIG_EXIST = 23101
    NCT_AUTO_ARCHIVE_CONFIG_NOT_EXIST = 23102
    NCT_AUTO_ARCHIVE_DEST_NOT_ARCHIVE_DOC = 23103
    NCT_INVALID_AUTO_ARCHIVE_CONFIG = 23104
    NCT_CAN_NOT_DELETE_DEFAULT_AUTO_CLEAN_CONFIG = 23105
    NCT_AUTO_CLEAN_CONFIG_NOT_EXIST = 23106
    NCT_AUTO_CLEAN_CONFIG_EXIST = 23107
    NCT_UPDATE_ANTIVIRUS_TASK_STATUS_ERROR = 23201
    NCT_INVALID_TASK = 23202
    NCT_ANTIVIRUS_SERVER_DISABLED = 23203
    NCT_ANTIVIRUS_OPTION_LICENSE_EXPIRE = 23204
    NCT_CANT_DELETE_ACTIVATED_ANTIVIRUS_LICENSE = 23205
    NCT_ANTIVIRUS_FTP_NOT_AVAILABLE = 23206
    NCT_ANTIVIRUS_FTP_LOGIN_FAILED = 23207
    NCT_ANTIVIRUS_FTP_NETWORK_ERROR = 23208
    NCT_LOCAL_SYNC_CONFIG_EXIST = 23301
    NCT_LOCAL_SYNC_CONFIG_NOT_EXIST = 23302
    NCT_CAN_NOT_DELETE_DEFAULT_LOCAL_SYNC_CONFIG = 23303
    NCT_INVALID_LOCAL_SYNC_CONFIG = 23304
    NCT_EXPORT_SPACE_REPORT_FAILED = 23401
    NCT_EXPORT_SPACE_REPORT_IN_PROGRESS = 23402
    NCT_EXPORT_SPACE_REPORT_NOT_EXIST = 23403
    NCT_HAVE_OTHER_SAME_TYPE_SPACE_REPORT_TASK_IN_PROGRESS = 23404
    NCT_DOC_TYPE_NOT_SUPPORT_EXPORT = 23405
    NCT_OSS_NOT_EXIST = 24404
    NCT_OSS_HAS_BEEN_DISABLED = 24405
    NCT_NO_AVAILABLE_OSS = 24406

    _VALUES_TO_NAMES = {
        10001: "NCT_DB_OPERATE_FAILED",
        10002: "NCT_UNKNOWN_ERROR",
        20001: "NCT_INVALID_URL",
        20002: "NCT_START_LESS_THAN_ZERO",
        20003: "NCT_START_MORE_THAN_TOTAL",
        20004: "NCT_LIMIT_LESS_THAN_MINUS_ONE",
        20005: "NCT_INVALID_DATETIME",
        20101: "NCT_INVALID_LOGIN_NAME",
        20102: "NCT_INVALID_DISPLAY_NAME",
        20103: "NCT_INVALID_EMAIL",
        20104: "NCT_INVALID_PHONE_NUM",
        20105: "NCT_DUPLICATED_LOGIN_NAME",
        20106: "NCT_DUPLICATED_EMALI",
        20107: "NCT_USER_NOT_ADMIN",
        20108: "NCT_INVALID_ACCOUNT_OR_PASSWORD",
        20109: "NCT_USER_DISABLED",
        20110: "NCT_USER_NOT_EXIST",
        20111: "NCT_USER_HAS_EXIST",
        20112: "NCT_CANNOT_MOVE_USER_TO_UNDISTRIBUTE_GROUP",
        20113: "NCT_GROUP_NOT_EXIST",
        20114: "NCT_GROUP_HAS_EXIST",
        20115: "NCT_CANNOT_MODIFY_NONLOCAL_USER_PASSWORD",
        20116: "NCT_CHECK_PASSWORD_FAILED",
        20117: "NCT_INVALID_GROUP_NAME",
        20118: "NCT_CANNOT_OPERATE_TMP_GROUP",
        20119: "NCT_CANNOT_FIND_LOGINNAME_OR_EMAIL",
        20120: "NCT_CANNOT_ADD_SELF_TO_GROUP",
        20121: "NCT_CONTACT_HASE_EXIST",
        20122: "NCT_CONTACT_NOT_EXIST",
        20123: "NCT_DUPLICATED_DISPLAY_NAME",
        20124: "NCT_INVALID_USER_PRIORITY",
        20125: "NCT_INVALID_PASSWORD",
        20126: "NCT_INVALID_STRONG_PASSWORD",
        20127: "NCT_PASSWORD_EXPIRE",
        20128: "NCT_PASSWORD_NOT_SAFE",
        20129: "NCT_PASSWORD_IS_INITIAL",
        20130: "NCT_ACCOUNT_LOCKED",
        20131: "NCT_PWD_FIRST_FAILED",
        20132: "NCT_PWD_SECOND_FAILED",
        20133: "NCT_INVALID_SAPCE_SIZE",
        20134: "NCT_WRONG_PASSWORD",
        20135: "NCT_PWD_THIRD_FAILED",
        20136: "NCT_CANNOT_MODIFY_CONTROL_PASSWORD",
        20137: "NCT_CONTROLED_PASSWORD_EXPIRE",
        20138: "NCT_SPACE_ALLOCATED_FOR_USER_EXCEEDS_THE_MAX_LIMIT",
        201239: "NCT_CANNOT_LOGIN_SLAVE_SITE",
        201240: "NCT_INVALID_USER_TYPE",
        201241: "NCT_USER_LOGIN_IP_RESTRICTED",
        201242: "NCT_INVALID_PASSWORD_ERR_CNT",
        20145: "NCT_ACCOUNT_CANNOT_LOGIN_IN_SECRET_NODE",
        20146: "NCT_UNINSTALL_PWD_NOT_ENABLED",
        20147: "NCT_UNINSTALL_PWD_INCORRECT",
        20148: "NCT_CHECK_USER_TOKEN_FAILED",
        20149: "NCT_CHECK_VCODE_IS_NULL",
        20150: "NCT_CHECK_VCODE_IS_TIMEOUT",
        20151: "NCT_CHECK_VCODE_IS_WRONG",
        20152: "NCT_USER_NOT_SUPER_ADMIN",
        20153: "NCT_REMAIN_ADMIN_ACCOUNT",
        20154: "NCT_ACCOUNT_CONFICT_WITH_ADMIN",
        20155: "NCT_RESPONSIBLE_PERSON_EXIST",
        20156: "NCT_INVALID_STRONG_PWD_LENGTH",
        20157: "NCT_USER_ACCOUNT_HAS_EXPIRED",
        20158: "NCT_INVALID_REMARK",
        20159: "NCT_INVALID_IDCARDNUMBER",
        20160: "NCT_DUPLICATED_IDCARDNUMBER",
        20161: "NCT_CHECK_VCODE_MORE_THAN_THE_LIMIT",
        20162: "NCT_OTP_WRONG",
        20163: "NCT_MFA_OTP_SERVER_ERROR",
        20164: "NCT_USER_HAS_NOT_BOUND_PHONE",
        20165: "NCT_PHONE_NUMBER_HAS_BEEN_CHANGED",
        20166: "NCT_OTP_TIMEOUT",
        20167: "NCT_OTP_TOO_MANY_WRONG_TIME",
        20168: "NCT_MFA_SMS_SERVER_ERROR",
        20169: "NCT_INVALID_USER_SPACE",
        20170: "NCT_INVALID_USER_STATUS",
        20201: "NCT_DEPARTMENT_NOT_EXIST",
        20202: "NCT_DEPARTMENT_HAS_EXIST",
        20203: "NCT_INVALID_DEPART_NAME",
        20204: "NCT_ORGNIZATION_NOT_EXIST",
        20205: "NCT_ORGNIZATION_HAS_EXIST",
        20206: "NCT_INVALID_ORG_NAME",
        20207: "NCT_CANNOT_MOVE_DEPARTMENT_TO_UNDISTRIBUTE_GROUP",
        20208: "NCT_CANNOT_MOVE_DEPARTMENT_TO_ALL_GROUP",
        20209: "NCT_CANNOT_MOVE_DEPARTMENT_TO_CHILDREN",
        20210: "NCT_SRC_DEPARTMENT_NOT_EXIST",
        20211: "NCT_DEST_DEPARTMENT_NOT_EXIST",
        20212: "NCT_DUPLICATED_SUBDEP_EXIST_IN_DEP",
        20213: "NCT_USER_NOT_IN_DEPARTMENT",
        20214: "NCT_CHECK_RESPONSE_ERROR",
        20215: "NCT_ORG_OR_DEPART_NOT_EXIST",
        20216: "NCT_CANNOT_DELETE_DEPART",
        20217: "NCT_CANT_DEL_USER_CAUSE_USER_DOC_EXISTS",
        20218: "NCT_INVALID_ORGAN_PRIORITY",
        20219: "NCT_INVALID_DEPART_PRIORITY",
        20220: "NCT_CANNOT_DELETE_DEPART_NO_PERM",
        20221: "NCT_CANNOT_MANAGER_DEPARTMENT",
        20222: "NCT_NOT_IN_ORIGINAL_DEPARTMENT",
        20223: "NCT_DEST_POSTION_ILLEGAL",
        20301: "NCT_BATCH_USERS_EXPORTING",
        20302: "NCT_BATCH_USERS_IMPORTING",
        20303: "NCT_CANNOT_SELECT_UNDISTRIBUTE_AND_ALL_GROUP",
        20304: "NCT_WRONG_FILE_FORMAT",
        20305: "NCT_CANNOT_FILL_IN_DEFAUL_PASSWORD",
        20306: "NCT_DOWNLOAD_BATCH_USERS_FAILED",
        20307: "NCT_DOWNLOAD_BATCH_USERS_TASK_NOT_EXIST",
        20308: "NCT_ORG_MANAGER_CANNOT_EDIT_OWN_AUTH_INFO",
        20401: "NCT_INVALID_DOMAIN_PARAMETER",
        20402: "NCT_DOMAIN_NOT_EXIST",
        20403: "NCT_DOMAIN_HAS_EXIST",
        20404: "NCT_DOMAIN_USER_NOT_EXIST",
        20405: "NCT_DOMAIN_USER_HAX_EXIST",
        20406: "NCT_CANNOT_IMPORT_DOMAIN_USER_TO_UNDISTRIBUTE",
        20407: "NCT_CANNOT_IMPORT_DOMAIN_USER_TO_ALL",
        24008: "NCT_FAILED_CHECK_DOMAIN_USER",
        20409: "NCT_CANNOT_IMPORT_AGAIN",
        20410: "NCT_DOMAIN_TYPE_NOT_MATCH",
        20411: "NCT_DOMAIN_SERVER_UNAVAILABLE",
        20412: "NCT_DOMAIN_ERROR",
        20413: "NCT_DOMAIN_DISABLE",
        20414: "NCT_FORBIDDEN_LOGIN",
        20415: "NCT_DOMAIN_CONFIF_PARAMETER",
        20416: "NCT_PARAMETER_IS_NULL",
        20417: "NCT_DOMAIN_IMPORTING",
        20418: "NCT_DOMAIN_NAME_CONFIF_ERROR",
        20419: "NCT_THREAD_IMPORTING",
        20420: "NCT_PARENT_DOMAIN_NOT_EXIST",
        20421: "NCT_FAILOVER_NOT_MATCH_PARENT",
        20422: "NCT_DUPLICATED_FAILOVER_DOMAIN",
        20423: "NCT_FAILOVER_DOMAIN_ADDRESS_SAME_WITH_PARENT",
        20518: "NCT_USER_NUM_OVERFLOW",
        20519: "NCT_PRODUCT_NOT_AUTHORIZED",
        20524: "NCT_PRODUCT_HAS_EXPIRED",
        20601: "NCT_FAILED_THIRD_VERIFY",
        20602: "NCT_FAILED_THIRD_CONFIG",
        20603: "NCT_INVALID_APPID_OR_APPKEY",
        20604: "NCT_THIRD_CONFIG_NOT_EXIST",
        20605: "NCT_THIRD_CONFIG_HAS_EXIST",
        20606: "NCT_THIRD_PARTY_AUTH_ERROR",
        20607: "NCT_THIRD_PARTY_AUTH_NOT_OPEN",
        20608: "NCT_CANNOT_CONNECT_THID_PARTY_SERVER",
        20609: "NCT_USER_NOT_EXIST_IN_LDAP",
        20610: "NCT_NEED_THIRD_OAUTH",
        20611: "NCT_USER_HAS_BEEN_DELETED",
        20612: "NCT_THIRD_DB_NOT_EXISTS",
        20613: "NCT_THIRD_TABLE_NOT_EXISTS",
        20614: "NCT_TIMESTAMP_EXPIRED",
        20615: "NCT_INVALID_THIRD_PARTY_PLUGIN",
        20616: "NCT_INVALID_FILENAME",
        20617: "NCT_THIRD_PLUGIN_INTER_ERROR",
        20618: "NCT_MFA_CONFIG_ERROR",
        20701: "NCT_INVALID_SECTION",
        20702: "NCT_INVALID_OPTION",
        20703: "NCT_INVALID_VALUE",
        20704: "NCT_OPTION_NOT_EXISTS",
        20705: "NCT_SECTION_NOT_EXISTS",
        20801: "NCT_SMTP_SEND_FAILED",
        20802: "NCT_SHARER_IS_EMPTY",
        20803: "NCT_SHARE_SCOPE_IS_EMPTY",
        20804: "NCT_SHARE_STRATEGY_NOT_EXISTS",
        20805: "NCT_USER_NOT_IN_PERM_SOCPE",
        20806: "NCT_SMTP_PARAMETER_PARSE_FAILED",
        20807: "NCT_SMTP_SERVER_NOT_SET",
        20808: "NCT_SMTP_SERVER_NOT_AVAILABLE",
        20809: "NCT_SMTP_RECIPIENT_MAIL_ILLEGAL",
        20810: "NCT_SMTP_LOGIN_FAILED",
        20811: "NCT_SMTP_AUTHENTICATION_METHOD_NOT_FOUND",
        20812: "NCT_INVALID_SERVER",
        20813: "NCT_INVALID_PORT",
        20814: "NCT_INVALID_SAFEMODE",
        20815: "NCT_SMTP_PASSWORD_NOT_SET",
        20901: "NCT_INVALID_CSF_LEVEL",
        20902: "NCT_SYS_CSF_LEVEL_CANT_DOWNGRADE",
        20903: "NCT_USER_CSF_LEVEL_CANT_BE_HIGHER_THAN_SYS",
        20904: "NCT_DOC_CSF_LEVEL_CANT_BE_HIGHER_THAN_SYA",
        20905: "NCT_CSF_LEVEL_ENUM_HAS_BEEN_INITIALIZED",
        20906: "NCT_CSF_LEVEL_ENUM_HAS_NOT_BEEN_INITIALIZED",
        21001: "NCT_INVALID_ACCESSOR_TYPE",
        21002: "NCT_ACCESSOR_ID_NOT_EXISTS",
        21003: "NCT_INVALID_PERM_VALUE",
        21004: "NCT_STRATEGY_ID_NOT_EXISTS",
        21005: "NCT_ACCESSOR_ID_ALREADY_EXISTS",
        21100: "NCT_PACKAGE_NAME_ERROR",
        21101: "NCT_PACKAGE_NOT_EXIST",
        21102: "NCT_PACKAGE_OS_ERROR",
        21103: "NCT_PACKAGE_MODE_ERROR",
        21104: "NCT_UPLOAD_EOSS_FAILED",
        21105: "NCT_INVALID_OS_PARAMETER",
        21106: "NCT_DEL_PKG_INFO_FAILED",
        21107: "NCT_GET_URL_FAILED",
        21108: "APPID_NOT_EXIST",
        21109: "APPID_DISABLED",
        21110: "SIGN_AUTH_FAILED",
        21111: "APPID_HAS_EXIST",
        21112: "APPID_LENGTH_MORE_THAN_50",
        21113: "APPKEY_LENGTH_MORE_THAN_50_OR_EMPTY",
        21201: "NCT_AUDITOR_ALREADY_SET",
        21202: "NCT_INVALID_AUDIT_OBJECT",
        21203: "NCT_AUDITOR_NOT_EXIST",
        21204: "NCT_AUDITOR_CSF_LEVEL_CHECK_FAILED",
        21205: "NCT_AUDIT_OBJECT_TYPE_NOT_SUPPORT",
        21206: "NCT_INVALID_DEPARTMENT_LIST",
        21207: "NCT_CANT_SET_NONE_DIRECT_DEPART_STATUS",
        21208: "NCT_CANT_OPERATE_AUDITOR_BECAUSEOF_SCOPE",
        21301: "NCT_TOOL_ID_NOT_SUPPORT",
        21302: "NCT_TOOL_ID_IS_EMPTY",
        21303: "NCT_URL_EMPTY",
        21304: "NCT_TOOL_NAME_NOT_SUPPORT",
        21401: "NCT_INVALID_NET_ACCESSORS_PARAM",
        21402: "NCT_INVALID_NET_IP_PARAM",
        21403: "NCT_INVALID_NET_MASK_PARAM",
        21404: "NCT_INVALID_ACCESSOR_TYPE_PARAM",
        21405: "NCT_NET_ACCESSOR_ID_NOT_EXIST",
        21406: "NCT_NET_ACCESSOR_EXIST",
        21407: "NCT_NET_ACCESSOR_DATA_ERROR",
        21501: "NCT_INVALID_CREATORID",
        21502: "NCT_INVALID_DOC_AUDIT_INFO_PARAM",
        21503: "NCT_INVALID_DOC_AUDIT_TYPE",
        21504: "NCT_INVALID_AUDITORS",
        21505: "NCT_INVALID_AUDITORS_OR_TYPE",
        21506: "NCT_DOC_AUDIT_NAME_EXIST",
        21507: "NCT_DOC_AUDIT_PROCESS_ID_NOT_EXIST",
        21508: "NCT_INVALID_EDITORID",
        21509: "NCT_INVALID_SEARCH_DOC_AUDIT_TYPE",
        21510: "NCT_INVALID_AUDIT_PROCESS_NAME",
        21511: "NCT_INVALID_DEST_DOC_ID",
        21512: "NCT_EDITORID_NOT_EXIST",
        21513: "NCT_EDITORID_DISABLED",
        21514: "NCT_INVALID_MANAGER_ID",
        21515: "NCT_DOC_AUDIT_PROCESS_IS_EMPTY",
        21516: "NCT_INVALID_ACCESSOR_INFOS",
        21517: "NCT_DEST_DOC_ID_TOO_DEEP",
        21601: "NCT_INVALID_EXT_APP_PARAMS",
        21602: "NCT_INVALID_EXT_APP_TYPE",
        21603: "NCT_INVALID_EXT_APP_CONFIG",
        21604: "NCT_EXT_APP_DISABLED",
        21605: "NCT_ENTER_EXT_APP_FAILED",
        21606: "NCT_CONNECT_EXT_APP_FAILED",
        21701: "NCT_INVALID_RECEIVE_KEY",
        21702: "NCT_OBJ_NOT_EXIST",
        21703: "NCT_PARAMTER_IS_EMPTY",
        21704: "NCT_OBJ_EXIST",
        21801: "NCT_INVALID_GNS_PATH",
        21802: "NCT_DUPLICATE_MOUNT_POINT",
        21803: "NCT_NOT_INACTIVATED",
        21804: "NCT_INVALID_PARAMTER",
        21805: "NCT_GET_NODE_LIST_FAILED",
        21806: "NCT_NODE_NOT_ONLINE",
        21901: "NCT_LIMIT_RATE_OBJECT_NOT_SET",
        21902: "NCT_LIMIT_RATE_NOT_EXIST",
        21903: "NCT_INVALID_LIMIT_RATE_VALUES",
        21904: "NCT_INVALID_LIMIT_RATE_TYPE",
        21905: "NCT_ONLY_ONE_LIMIT_RATE_OBJECT",
        21906: "NCT_LIMIT_USER_EXIST",
        21907: "NCT_LIMIT_DEPART_EXIST",
        21908: "NCT_AT_LEAST_SET_ONE_SPEED",
        22001: "NCT_INVALID_DOC_WATERMARK_CONFIG",
        22002: "NCT_DOC_WATERMARK_DISABLED",
        22003: "NCT_INVALID_WATERMARK_TYPE",
        22101: "NCT_INVALID_LINK_TEMPLATE_TYPE",
        22102: "NCT_INVALID_SHAERER_TYPE",
        22103: "NCT_TEMPLATE_NOT_EXIST",
        22104: "NCT_CANNOT_DELETE_DEFAULT_LINK_TEMPLATE",
        22105: "NCT_CANNOT_EDIT_DEFAULT_LINK_TEMPLATE_SHARER",
        22106: "NCT_CANNOT_SET_OWNER",
        22107: "NCT_EXCEED_MAX_INTERNAL_LINK_EXPIRE_DAY",
        22108: "NCT_EXCEED_MAX_LINK_PERM",
        22109: "NCT_EXCEED_MAX_EXTERNAL_LINK_EXPIRE_DAY",
        22110: "NCT_NEED_SET_ACCESS_PASSWORD",
        22111: "NCT_EXCEED_MAX_EXTERNAL_LINK_EXPIRE_TIME",
        22201: "NCT_NET_DOCS_LIMIT_ID_NOT_EXIST",
        22202: "NCT_NET_DOCS_LIMIT_EXIST",
        22203: "NCT_DOC_ID_NOT_SET",
        22204: "NCT_DOC_DOWNLOAD_LIMIT_OBJECT_NOT_SET",
        22205: "NCT_DOC_DOWNLOAD_LIMIT_NOT_EXIST",
        22206: "NCT_INVALID_DOC_DOWNLOAD_LIMIT_VALUE",
        22207: "NCT_INVALID_DOC_TYPE",
        22208: "NCT_INVALID_CPU_USAGE_THRESHOLD",
        22209: "NCT_INVALID_MEMORY_USAGE_THRESHOLD",
        22210: "NCT_INVALID_PRIORITY",
        22211: "NCT_INSUFFICIENT_SYSTEM_RESOURCES",
        22305: "NCT_SITE_NOT_EXIST",
        22306: "NCT_EMAILADDR_NOT_SET",
        22307: "NCT_SECURIT_EMAILADDR_NOT_SET",
        22308: "NCT_SITE_HAS_BEEN_MOVED",
        22401: "NCT_INVALID_SEARCH_SCOPE",
        22402: "NCT_INVALID_SEARCH_CONFIG_PARAM",
        22501: "NCT_INVALID_FILE_NAME",
        22502: "NCT_INVALID_COMPRESS_PASSWORD",
        22503: "NCT_INVALID_ACTIVE_PARAM",
        22504: "NCT_INVALID_HISTORY_PARAM",
        22505: "NCT_COMPRESS_TASK_FAILED",
        22506: "NCT_COMPRESS_TASK_IN_PROGRESS",
        22507: "NCT_COMPRESS_TASK_NOT_EXIST",
        22508: "NCT_DOWNLOAD_HISTORY_LOG_FAILED",
        22601: "NCT_INVALID_SMS_CONFIG",
        22602: "NCT_USER_NOT_ACTIVATE",
        22603: "NCT_INVALID_TEL_NUMBER",
        22604: "NCT_TEL_NUMBER_EXISTS",
        22605: "NCT_NOT_SUPPORT_SMS_SERVER",
        22606: "NCT_USER_IS_ACTIVATE",
        22607: "NCT_SMS_VERIFY_CODE_ERROR",
        22608: "NCT_SMS_VERIFY_CODE_TIMEOUT",
        22609: "NCT_SMS_ACTIVATE_DISABLED",
        22610: "NCT_CONNECT_SMS_SERVER_ERROR",
        22611: "NCT_SEND_VERIFY_CODE_FAIL",
        22701: "NCT_DOWNLOAD_ACTIVE_REPORT_FAILED",
        22702: "NCT_DOWNLOAD_ACTIVE_REPORT_IN_PROGRESS",
        22703: "NCT_DOWNLOAD_ACTIVE_REPORT_NOT_EXIST",
        22801: "NCT_INVALID_RECV_AREA_NAME",
        22802: "NCT_RECV_AREA_EXIST",
        22803: "NCT_RECV_AREA_NOT_EXIST",
        22804: "NCT_CREATE_SEND_DIR_ERROR",
        22805: "NCT_RECV_AREA_NAME_IS_EMPTY",
        22901: "NCT_ROLE_NAME_EXIST",
        22902: "NCT_INVALID_ROLE_NAME",
        22903: "NCT_INVALID_CREATOR",
        22904: "NCT_ROLE_NOT_EXIST",
        22905: "NCT_INVALID_OPERATOR",
        22906: "NCT_INVALID_MEMBER",
        22908: "NCT_SYS_ROLE_CANNOT_SET_OR_DELETE",
        22909: "NCT_ROLE_MEMBER_NOT_EXIST",
        23001: "NCT_FILE_CRAWL_STRATEGY_EXIST",
        23002: "NCT_CUSTOM_DOC_NOT_EXIST",
        23101: "NCT_AUTO_ARCHIVE_CONFIG_EXIST",
        23102: "NCT_AUTO_ARCHIVE_CONFIG_NOT_EXIST",
        23103: "NCT_AUTO_ARCHIVE_DEST_NOT_ARCHIVE_DOC",
        23104: "NCT_INVALID_AUTO_ARCHIVE_CONFIG",
        23105: "NCT_CAN_NOT_DELETE_DEFAULT_AUTO_CLEAN_CONFIG",
        23106: "NCT_AUTO_CLEAN_CONFIG_NOT_EXIST",
        23107: "NCT_AUTO_CLEAN_CONFIG_EXIST",
        23201: "NCT_UPDATE_ANTIVIRUS_TASK_STATUS_ERROR",
        23202: "NCT_INVALID_TASK",
        23203: "NCT_ANTIVIRUS_SERVER_DISABLED",
        23204: "NCT_ANTIVIRUS_OPTION_LICENSE_EXPIRE",
        23205: "NCT_CANT_DELETE_ACTIVATED_ANTIVIRUS_LICENSE",
        23206: "NCT_ANTIVIRUS_FTP_NOT_AVAILABLE",
        23207: "NCT_ANTIVIRUS_FTP_LOGIN_FAILED",
        23208: "NCT_ANTIVIRUS_FTP_NETWORK_ERROR",
        23301: "NCT_LOCAL_SYNC_CONFIG_EXIST",
        23302: "NCT_LOCAL_SYNC_CONFIG_NOT_EXIST",
        23303: "NCT_CAN_NOT_DELETE_DEFAULT_LOCAL_SYNC_CONFIG",
        23304: "NCT_INVALID_LOCAL_SYNC_CONFIG",
        23401: "NCT_EXPORT_SPACE_REPORT_FAILED",
        23402: "NCT_EXPORT_SPACE_REPORT_IN_PROGRESS",
        23403: "NCT_EXPORT_SPACE_REPORT_NOT_EXIST",
        23404: "NCT_HAVE_OTHER_SAME_TYPE_SPACE_REPORT_TASK_IN_PROGRESS",
        23405: "NCT_DOC_TYPE_NOT_SUPPORT_EXPORT",
        24404: "NCT_OSS_NOT_EXIST",
        24405: "NCT_OSS_HAS_BEEN_DISABLED",
        24406: "NCT_NO_AVAILABLE_OSS",
    }

    _NAMES_TO_VALUES = {
        "NCT_DB_OPERATE_FAILED": 10001,
        "NCT_UNKNOWN_ERROR": 10002,
        "NCT_INVALID_URL": 20001,
        "NCT_START_LESS_THAN_ZERO": 20002,
        "NCT_START_MORE_THAN_TOTAL": 20003,
        "NCT_LIMIT_LESS_THAN_MINUS_ONE": 20004,
        "NCT_INVALID_DATETIME": 20005,
        "NCT_INVALID_LOGIN_NAME": 20101,
        "NCT_INVALID_DISPLAY_NAME": 20102,
        "NCT_INVALID_EMAIL": 20103,
        "NCT_INVALID_PHONE_NUM": 20104,
        "NCT_DUPLICATED_LOGIN_NAME": 20105,
        "NCT_DUPLICATED_EMALI": 20106,
        "NCT_USER_NOT_ADMIN": 20107,
        "NCT_INVALID_ACCOUNT_OR_PASSWORD": 20108,
        "NCT_USER_DISABLED": 20109,
        "NCT_USER_NOT_EXIST": 20110,
        "NCT_USER_HAS_EXIST": 20111,
        "NCT_CANNOT_MOVE_USER_TO_UNDISTRIBUTE_GROUP": 20112,
        "NCT_GROUP_NOT_EXIST": 20113,
        "NCT_GROUP_HAS_EXIST": 20114,
        "NCT_CANNOT_MODIFY_NONLOCAL_USER_PASSWORD": 20115,
        "NCT_CHECK_PASSWORD_FAILED": 20116,
        "NCT_INVALID_GROUP_NAME": 20117,
        "NCT_CANNOT_OPERATE_TMP_GROUP": 20118,
        "NCT_CANNOT_FIND_LOGINNAME_OR_EMAIL": 20119,
        "NCT_CANNOT_ADD_SELF_TO_GROUP": 20120,
        "NCT_CONTACT_HASE_EXIST": 20121,
        "NCT_CONTACT_NOT_EXIST": 20122,
        "NCT_DUPLICATED_DISPLAY_NAME": 20123,
        "NCT_INVALID_USER_PRIORITY": 20124,
        "NCT_INVALID_PASSWORD": 20125,
        "NCT_INVALID_STRONG_PASSWORD": 20126,
        "NCT_PASSWORD_EXPIRE": 20127,
        "NCT_PASSWORD_NOT_SAFE": 20128,
        "NCT_PASSWORD_IS_INITIAL": 20129,
        "NCT_ACCOUNT_LOCKED": 20130,
        "NCT_PWD_FIRST_FAILED": 20131,
        "NCT_PWD_SECOND_FAILED": 20132,
        "NCT_INVALID_SAPCE_SIZE": 20133,
        "NCT_WRONG_PASSWORD": 20134,
        "NCT_PWD_THIRD_FAILED": 20135,
        "NCT_CANNOT_MODIFY_CONTROL_PASSWORD": 20136,
        "NCT_CONTROLED_PASSWORD_EXPIRE": 20137,
        "NCT_SPACE_ALLOCATED_FOR_USER_EXCEEDS_THE_MAX_LIMIT": 20138,
        "NCT_CANNOT_LOGIN_SLAVE_SITE": 201239,
        "NCT_INVALID_USER_TYPE": 201240,
        "NCT_USER_LOGIN_IP_RESTRICTED": 201241,
        "NCT_INVALID_PASSWORD_ERR_CNT": 201242,
        "NCT_ACCOUNT_CANNOT_LOGIN_IN_SECRET_NODE": 20145,
        "NCT_UNINSTALL_PWD_NOT_ENABLED": 20146,
        "NCT_UNINSTALL_PWD_INCORRECT": 20147,
        "NCT_CHECK_USER_TOKEN_FAILED": 20148,
        "NCT_CHECK_VCODE_IS_NULL": 20149,
        "NCT_CHECK_VCODE_IS_TIMEOUT": 20150,
        "NCT_CHECK_VCODE_IS_WRONG": 20151,
        "NCT_USER_NOT_SUPER_ADMIN": 20152,
        "NCT_REMAIN_ADMIN_ACCOUNT": 20153,
        "NCT_ACCOUNT_CONFICT_WITH_ADMIN": 20154,
        "NCT_RESPONSIBLE_PERSON_EXIST": 20155,
        "NCT_INVALID_STRONG_PWD_LENGTH": 20156,
        "NCT_USER_ACCOUNT_HAS_EXPIRED": 20157,
        "NCT_INVALID_REMARK": 20158,
        "NCT_INVALID_IDCARDNUMBER": 20159,
        "NCT_DUPLICATED_IDCARDNUMBER": 20160,
        "NCT_CHECK_VCODE_MORE_THAN_THE_LIMIT": 20161,
        "NCT_OTP_WRONG": 20162,
        "NCT_MFA_OTP_SERVER_ERROR": 20163,
        "NCT_USER_HAS_NOT_BOUND_PHONE": 20164,
        "NCT_PHONE_NUMBER_HAS_BEEN_CHANGED": 20165,
        "NCT_OTP_TIMEOUT": 20166,
        "NCT_OTP_TOO_MANY_WRONG_TIME": 20167,
        "NCT_MFA_SMS_SERVER_ERROR": 20168,
        "NCT_INVALID_USER_SPACE": 20169,
        "NCT_INVALID_USER_STATUS": 20170,
        "NCT_DEPARTMENT_NOT_EXIST": 20201,
        "NCT_DEPARTMENT_HAS_EXIST": 20202,
        "NCT_INVALID_DEPART_NAME": 20203,
        "NCT_ORGNIZATION_NOT_EXIST": 20204,
        "NCT_ORGNIZATION_HAS_EXIST": 20205,
        "NCT_INVALID_ORG_NAME": 20206,
        "NCT_CANNOT_MOVE_DEPARTMENT_TO_UNDISTRIBUTE_GROUP": 20207,
        "NCT_CANNOT_MOVE_DEPARTMENT_TO_ALL_GROUP": 20208,
        "NCT_CANNOT_MOVE_DEPARTMENT_TO_CHILDREN": 20209,
        "NCT_SRC_DEPARTMENT_NOT_EXIST": 20210,
        "NCT_DEST_DEPARTMENT_NOT_EXIST": 20211,
        "NCT_DUPLICATED_SUBDEP_EXIST_IN_DEP": 20212,
        "NCT_USER_NOT_IN_DEPARTMENT": 20213,
        "NCT_CHECK_RESPONSE_ERROR": 20214,
        "NCT_ORG_OR_DEPART_NOT_EXIST": 20215,
        "NCT_CANNOT_DELETE_DEPART": 20216,
        "NCT_CANT_DEL_USER_CAUSE_USER_DOC_EXISTS": 20217,
        "NCT_INVALID_ORGAN_PRIORITY": 20218,
        "NCT_INVALID_DEPART_PRIORITY": 20219,
        "NCT_CANNOT_DELETE_DEPART_NO_PERM": 20220,
        "NCT_CANNOT_MANAGER_DEPARTMENT": 20221,
        "NCT_NOT_IN_ORIGINAL_DEPARTMENT": 20222,
        "NCT_DEST_POSTION_ILLEGAL": 20223,
        "NCT_BATCH_USERS_EXPORTING": 20301,
        "NCT_BATCH_USERS_IMPORTING": 20302,
        "NCT_CANNOT_SELECT_UNDISTRIBUTE_AND_ALL_GROUP": 20303,
        "NCT_WRONG_FILE_FORMAT": 20304,
        "NCT_CANNOT_FILL_IN_DEFAUL_PASSWORD": 20305,
        "NCT_DOWNLOAD_BATCH_USERS_FAILED": 20306,
        "NCT_DOWNLOAD_BATCH_USERS_TASK_NOT_EXIST": 20307,
        "NCT_ORG_MANAGER_CANNOT_EDIT_OWN_AUTH_INFO": 20308,
        "NCT_INVALID_DOMAIN_PARAMETER": 20401,
        "NCT_DOMAIN_NOT_EXIST": 20402,
        "NCT_DOMAIN_HAS_EXIST": 20403,
        "NCT_DOMAIN_USER_NOT_EXIST": 20404,
        "NCT_DOMAIN_USER_HAX_EXIST": 20405,
        "NCT_CANNOT_IMPORT_DOMAIN_USER_TO_UNDISTRIBUTE": 20406,
        "NCT_CANNOT_IMPORT_DOMAIN_USER_TO_ALL": 20407,
        "NCT_FAILED_CHECK_DOMAIN_USER": 24008,
        "NCT_CANNOT_IMPORT_AGAIN": 20409,
        "NCT_DOMAIN_TYPE_NOT_MATCH": 20410,
        "NCT_DOMAIN_SERVER_UNAVAILABLE": 20411,
        "NCT_DOMAIN_ERROR": 20412,
        "NCT_DOMAIN_DISABLE": 20413,
        "NCT_FORBIDDEN_LOGIN": 20414,
        "NCT_DOMAIN_CONFIF_PARAMETER": 20415,
        "NCT_PARAMETER_IS_NULL": 20416,
        "NCT_DOMAIN_IMPORTING": 20417,
        "NCT_DOMAIN_NAME_CONFIF_ERROR": 20418,
        "NCT_THREAD_IMPORTING": 20419,
        "NCT_PARENT_DOMAIN_NOT_EXIST": 20420,
        "NCT_FAILOVER_NOT_MATCH_PARENT": 20421,
        "NCT_DUPLICATED_FAILOVER_DOMAIN": 20422,
        "NCT_FAILOVER_DOMAIN_ADDRESS_SAME_WITH_PARENT": 20423,
        "NCT_USER_NUM_OVERFLOW": 20518,
        "NCT_PRODUCT_NOT_AUTHORIZED": 20519,
        "NCT_PRODUCT_HAS_EXPIRED": 20524,
        "NCT_FAILED_THIRD_VERIFY": 20601,
        "NCT_FAILED_THIRD_CONFIG": 20602,
        "NCT_INVALID_APPID_OR_APPKEY": 20603,
        "NCT_THIRD_CONFIG_NOT_EXIST": 20604,
        "NCT_THIRD_CONFIG_HAS_EXIST": 20605,
        "NCT_THIRD_PARTY_AUTH_ERROR": 20606,
        "NCT_THIRD_PARTY_AUTH_NOT_OPEN": 20607,
        "NCT_CANNOT_CONNECT_THID_PARTY_SERVER": 20608,
        "NCT_USER_NOT_EXIST_IN_LDAP": 20609,
        "NCT_NEED_THIRD_OAUTH": 20610,
        "NCT_USER_HAS_BEEN_DELETED": 20611,
        "NCT_THIRD_DB_NOT_EXISTS": 20612,
        "NCT_THIRD_TABLE_NOT_EXISTS": 20613,
        "NCT_TIMESTAMP_EXPIRED": 20614,
        "NCT_INVALID_THIRD_PARTY_PLUGIN": 20615,
        "NCT_INVALID_FILENAME": 20616,
        "NCT_THIRD_PLUGIN_INTER_ERROR": 20617,
        "NCT_MFA_CONFIG_ERROR": 20618,
        "NCT_INVALID_SECTION": 20701,
        "NCT_INVALID_OPTION": 20702,
        "NCT_INVALID_VALUE": 20703,
        "NCT_OPTION_NOT_EXISTS": 20704,
        "NCT_SECTION_NOT_EXISTS": 20705,
        "NCT_SMTP_SEND_FAILED": 20801,
        "NCT_SHARER_IS_EMPTY": 20802,
        "NCT_SHARE_SCOPE_IS_EMPTY": 20803,
        "NCT_SHARE_STRATEGY_NOT_EXISTS": 20804,
        "NCT_USER_NOT_IN_PERM_SOCPE": 20805,
        "NCT_SMTP_PARAMETER_PARSE_FAILED": 20806,
        "NCT_SMTP_SERVER_NOT_SET": 20807,
        "NCT_SMTP_SERVER_NOT_AVAILABLE": 20808,
        "NCT_SMTP_RECIPIENT_MAIL_ILLEGAL": 20809,
        "NCT_SMTP_LOGIN_FAILED": 20810,
        "NCT_SMTP_AUTHENTICATION_METHOD_NOT_FOUND": 20811,
        "NCT_INVALID_SERVER": 20812,
        "NCT_INVALID_PORT": 20813,
        "NCT_INVALID_SAFEMODE": 20814,
        "NCT_SMTP_PASSWORD_NOT_SET": 20815,
        "NCT_INVALID_CSF_LEVEL": 20901,
        "NCT_SYS_CSF_LEVEL_CANT_DOWNGRADE": 20902,
        "NCT_USER_CSF_LEVEL_CANT_BE_HIGHER_THAN_SYS": 20903,
        "NCT_DOC_CSF_LEVEL_CANT_BE_HIGHER_THAN_SYA": 20904,
        "NCT_CSF_LEVEL_ENUM_HAS_BEEN_INITIALIZED": 20905,
        "NCT_CSF_LEVEL_ENUM_HAS_NOT_BEEN_INITIALIZED": 20906,
        "NCT_INVALID_ACCESSOR_TYPE": 21001,
        "NCT_ACCESSOR_ID_NOT_EXISTS": 21002,
        "NCT_INVALID_PERM_VALUE": 21003,
        "NCT_STRATEGY_ID_NOT_EXISTS": 21004,
        "NCT_ACCESSOR_ID_ALREADY_EXISTS": 21005,
        "NCT_PACKAGE_NAME_ERROR": 21100,
        "NCT_PACKAGE_NOT_EXIST": 21101,
        "NCT_PACKAGE_OS_ERROR": 21102,
        "NCT_PACKAGE_MODE_ERROR": 21103,
        "NCT_UPLOAD_EOSS_FAILED": 21104,
        "NCT_INVALID_OS_PARAMETER": 21105,
        "NCT_DEL_PKG_INFO_FAILED": 21106,
        "NCT_GET_URL_FAILED": 21107,
        "APPID_NOT_EXIST": 21108,
        "APPID_DISABLED": 21109,
        "SIGN_AUTH_FAILED": 21110,
        "APPID_HAS_EXIST": 21111,
        "APPID_LENGTH_MORE_THAN_50": 21112,
        "APPKEY_LENGTH_MORE_THAN_50_OR_EMPTY": 21113,
        "NCT_AUDITOR_ALREADY_SET": 21201,
        "NCT_INVALID_AUDIT_OBJECT": 21202,
        "NCT_AUDITOR_NOT_EXIST": 21203,
        "NCT_AUDITOR_CSF_LEVEL_CHECK_FAILED": 21204,
        "NCT_AUDIT_OBJECT_TYPE_NOT_SUPPORT": 21205,
        "NCT_INVALID_DEPARTMENT_LIST": 21206,
        "NCT_CANT_SET_NONE_DIRECT_DEPART_STATUS": 21207,
        "NCT_CANT_OPERATE_AUDITOR_BECAUSEOF_SCOPE": 21208,
        "NCT_TOOL_ID_NOT_SUPPORT": 21301,
        "NCT_TOOL_ID_IS_EMPTY": 21302,
        "NCT_URL_EMPTY": 21303,
        "NCT_TOOL_NAME_NOT_SUPPORT": 21304,
        "NCT_INVALID_NET_ACCESSORS_PARAM": 21401,
        "NCT_INVALID_NET_IP_PARAM": 21402,
        "NCT_INVALID_NET_MASK_PARAM": 21403,
        "NCT_INVALID_ACCESSOR_TYPE_PARAM": 21404,
        "NCT_NET_ACCESSOR_ID_NOT_EXIST": 21405,
        "NCT_NET_ACCESSOR_EXIST": 21406,
        "NCT_NET_ACCESSOR_DATA_ERROR": 21407,
        "NCT_INVALID_CREATORID": 21501,
        "NCT_INVALID_DOC_AUDIT_INFO_PARAM": 21502,
        "NCT_INVALID_DOC_AUDIT_TYPE": 21503,
        "NCT_INVALID_AUDITORS": 21504,
        "NCT_INVALID_AUDITORS_OR_TYPE": 21505,
        "NCT_DOC_AUDIT_NAME_EXIST": 21506,
        "NCT_DOC_AUDIT_PROCESS_ID_NOT_EXIST": 21507,
        "NCT_INVALID_EDITORID": 21508,
        "NCT_INVALID_SEARCH_DOC_AUDIT_TYPE": 21509,
        "NCT_INVALID_AUDIT_PROCESS_NAME": 21510,
        "NCT_INVALID_DEST_DOC_ID": 21511,
        "NCT_EDITORID_NOT_EXIST": 21512,
        "NCT_EDITORID_DISABLED": 21513,
        "NCT_INVALID_MANAGER_ID": 21514,
        "NCT_DOC_AUDIT_PROCESS_IS_EMPTY": 21515,
        "NCT_INVALID_ACCESSOR_INFOS": 21516,
        "NCT_DEST_DOC_ID_TOO_DEEP": 21517,
        "NCT_INVALID_EXT_APP_PARAMS": 21601,
        "NCT_INVALID_EXT_APP_TYPE": 21602,
        "NCT_INVALID_EXT_APP_CONFIG": 21603,
        "NCT_EXT_APP_DISABLED": 21604,
        "NCT_ENTER_EXT_APP_FAILED": 21605,
        "NCT_CONNECT_EXT_APP_FAILED": 21606,
        "NCT_INVALID_RECEIVE_KEY": 21701,
        "NCT_OBJ_NOT_EXIST": 21702,
        "NCT_PARAMTER_IS_EMPTY": 21703,
        "NCT_OBJ_EXIST": 21704,
        "NCT_INVALID_GNS_PATH": 21801,
        "NCT_DUPLICATE_MOUNT_POINT": 21802,
        "NCT_NOT_INACTIVATED": 21803,
        "NCT_INVALID_PARAMTER": 21804,
        "NCT_GET_NODE_LIST_FAILED": 21805,
        "NCT_NODE_NOT_ONLINE": 21806,
        "NCT_LIMIT_RATE_OBJECT_NOT_SET": 21901,
        "NCT_LIMIT_RATE_NOT_EXIST": 21902,
        "NCT_INVALID_LIMIT_RATE_VALUES": 21903,
        "NCT_INVALID_LIMIT_RATE_TYPE": 21904,
        "NCT_ONLY_ONE_LIMIT_RATE_OBJECT": 21905,
        "NCT_LIMIT_USER_EXIST": 21906,
        "NCT_LIMIT_DEPART_EXIST": 21907,
        "NCT_AT_LEAST_SET_ONE_SPEED": 21908,
        "NCT_INVALID_DOC_WATERMARK_CONFIG": 22001,
        "NCT_DOC_WATERMARK_DISABLED": 22002,
        "NCT_INVALID_WATERMARK_TYPE": 22003,
        "NCT_INVALID_LINK_TEMPLATE_TYPE": 22101,
        "NCT_INVALID_SHAERER_TYPE": 22102,
        "NCT_TEMPLATE_NOT_EXIST": 22103,
        "NCT_CANNOT_DELETE_DEFAULT_LINK_TEMPLATE": 22104,
        "NCT_CANNOT_EDIT_DEFAULT_LINK_TEMPLATE_SHARER": 22105,
        "NCT_CANNOT_SET_OWNER": 22106,
        "NCT_EXCEED_MAX_INTERNAL_LINK_EXPIRE_DAY": 22107,
        "NCT_EXCEED_MAX_LINK_PERM": 22108,
        "NCT_EXCEED_MAX_EXTERNAL_LINK_EXPIRE_DAY": 22109,
        "NCT_NEED_SET_ACCESS_PASSWORD": 22110,
        "NCT_EXCEED_MAX_EXTERNAL_LINK_EXPIRE_TIME": 22111,
        "NCT_NET_DOCS_LIMIT_ID_NOT_EXIST": 22201,
        "NCT_NET_DOCS_LIMIT_EXIST": 22202,
        "NCT_DOC_ID_NOT_SET": 22203,
        "NCT_DOC_DOWNLOAD_LIMIT_OBJECT_NOT_SET": 22204,
        "NCT_DOC_DOWNLOAD_LIMIT_NOT_EXIST": 22205,
        "NCT_INVALID_DOC_DOWNLOAD_LIMIT_VALUE": 22206,
        "NCT_INVALID_DOC_TYPE": 22207,
        "NCT_INVALID_CPU_USAGE_THRESHOLD": 22208,
        "NCT_INVALID_MEMORY_USAGE_THRESHOLD": 22209,
        "NCT_INVALID_PRIORITY": 22210,
        "NCT_INSUFFICIENT_SYSTEM_RESOURCES": 22211,
        "NCT_SITE_NOT_EXIST": 22305,
        "NCT_EMAILADDR_NOT_SET": 22306,
        "NCT_SECURIT_EMAILADDR_NOT_SET": 22307,
        "NCT_SITE_HAS_BEEN_MOVED": 22308,
        "NCT_INVALID_SEARCH_SCOPE": 22401,
        "NCT_INVALID_SEARCH_CONFIG_PARAM": 22402,
        "NCT_INVALID_FILE_NAME": 22501,
        "NCT_INVALID_COMPRESS_PASSWORD": 22502,
        "NCT_INVALID_ACTIVE_PARAM": 22503,
        "NCT_INVALID_HISTORY_PARAM": 22504,
        "NCT_COMPRESS_TASK_FAILED": 22505,
        "NCT_COMPRESS_TASK_IN_PROGRESS": 22506,
        "NCT_COMPRESS_TASK_NOT_EXIST": 22507,
        "NCT_DOWNLOAD_HISTORY_LOG_FAILED": 22508,
        "NCT_INVALID_SMS_CONFIG": 22601,
        "NCT_USER_NOT_ACTIVATE": 22602,
        "NCT_INVALID_TEL_NUMBER": 22603,
        "NCT_TEL_NUMBER_EXISTS": 22604,
        "NCT_NOT_SUPPORT_SMS_SERVER": 22605,
        "NCT_USER_IS_ACTIVATE": 22606,
        "NCT_SMS_VERIFY_CODE_ERROR": 22607,
        "NCT_SMS_VERIFY_CODE_TIMEOUT": 22608,
        "NCT_SMS_ACTIVATE_DISABLED": 22609,
        "NCT_CONNECT_SMS_SERVER_ERROR": 22610,
        "NCT_SEND_VERIFY_CODE_FAIL": 22611,
        "NCT_DOWNLOAD_ACTIVE_REPORT_FAILED": 22701,
        "NCT_DOWNLOAD_ACTIVE_REPORT_IN_PROGRESS": 22702,
        "NCT_DOWNLOAD_ACTIVE_REPORT_NOT_EXIST": 22703,
        "NCT_INVALID_RECV_AREA_NAME": 22801,
        "NCT_RECV_AREA_EXIST": 22802,
        "NCT_RECV_AREA_NOT_EXIST": 22803,
        "NCT_CREATE_SEND_DIR_ERROR": 22804,
        "NCT_RECV_AREA_NAME_IS_EMPTY": 22805,
        "NCT_ROLE_NAME_EXIST": 22901,
        "NCT_INVALID_ROLE_NAME": 22902,
        "NCT_INVALID_CREATOR": 22903,
        "NCT_ROLE_NOT_EXIST": 22904,
        "NCT_INVALID_OPERATOR": 22905,
        "NCT_INVALID_MEMBER": 22906,
        "NCT_SYS_ROLE_CANNOT_SET_OR_DELETE": 22908,
        "NCT_ROLE_MEMBER_NOT_EXIST": 22909,
        "NCT_FILE_CRAWL_STRATEGY_EXIST": 23001,
        "NCT_CUSTOM_DOC_NOT_EXIST": 23002,
        "NCT_AUTO_ARCHIVE_CONFIG_EXIST": 23101,
        "NCT_AUTO_ARCHIVE_CONFIG_NOT_EXIST": 23102,
        "NCT_AUTO_ARCHIVE_DEST_NOT_ARCHIVE_DOC": 23103,
        "NCT_INVALID_AUTO_ARCHIVE_CONFIG": 23104,
        "NCT_CAN_NOT_DELETE_DEFAULT_AUTO_CLEAN_CONFIG": 23105,
        "NCT_AUTO_CLEAN_CONFIG_NOT_EXIST": 23106,
        "NCT_AUTO_CLEAN_CONFIG_EXIST": 23107,
        "NCT_UPDATE_ANTIVIRUS_TASK_STATUS_ERROR": 23201,
        "NCT_INVALID_TASK": 23202,
        "NCT_ANTIVIRUS_SERVER_DISABLED": 23203,
        "NCT_ANTIVIRUS_OPTION_LICENSE_EXPIRE": 23204,
        "NCT_CANT_DELETE_ACTIVATED_ANTIVIRUS_LICENSE": 23205,
        "NCT_ANTIVIRUS_FTP_NOT_AVAILABLE": 23206,
        "NCT_ANTIVIRUS_FTP_LOGIN_FAILED": 23207,
        "NCT_ANTIVIRUS_FTP_NETWORK_ERROR": 23208,
        "NCT_LOCAL_SYNC_CONFIG_EXIST": 23301,
        "NCT_LOCAL_SYNC_CONFIG_NOT_EXIST": 23302,
        "NCT_CAN_NOT_DELETE_DEFAULT_LOCAL_SYNC_CONFIG": 23303,
        "NCT_INVALID_LOCAL_SYNC_CONFIG": 23304,
        "NCT_EXPORT_SPACE_REPORT_FAILED": 23401,
        "NCT_EXPORT_SPACE_REPORT_IN_PROGRESS": 23402,
        "NCT_EXPORT_SPACE_REPORT_NOT_EXIST": 23403,
        "NCT_HAVE_OTHER_SAME_TYPE_SPACE_REPORT_TASK_IN_PROGRESS": 23404,
        "NCT_DOC_TYPE_NOT_SUPPORT_EXPORT": 23405,
        "NCT_OSS_NOT_EXIST": 24404,
        "NCT_OSS_HAS_BEEN_DISABLED": 24405,
        "NCT_NO_AVAILABLE_OSS": 24406,
    }


class ncTUsrmSiteInfo(object):
    """
    Attributes:
     - id
     - name

    """


    def __init__(self, id=None, name=None,):
        self.id = id
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmSiteInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmOSSInfo(object):
    """
    Attributes:
     - ossId
     - ossName
     - siteName
     - enabled
     - type

    """


    def __init__(self, ossId=None, ossName=None, siteName=None, enabled=None, type=None,):
        self.ossId = ossId
        self.ossName = ossName
        self.siteName = siteName
        self.enabled = enabled
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ossId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ossName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.siteName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmOSSInfo')
        if self.ossId is not None:
            oprot.writeFieldBegin('ossId', TType.STRING, 1)
            oprot.writeString(self.ossId.encode('utf-8') if sys.version_info[0] == 2 else self.ossId)
            oprot.writeFieldEnd()
        if self.ossName is not None:
            oprot.writeFieldBegin('ossName', TType.STRING, 2)
            oprot.writeString(self.ossName.encode('utf-8') if sys.version_info[0] == 2 else self.ossName)
            oprot.writeFieldEnd()
        if self.siteName is not None:
            oprot.writeFieldBegin('siteName', TType.STRING, 3)
            oprot.writeString(self.siteName.encode('utf-8') if sys.version_info[0] == 2 else self.siteName)
            oprot.writeFieldEnd()
        if self.enabled is not None:
            oprot.writeFieldBegin('enabled', TType.BOOL, 4)
            oprot.writeBool(self.enabled)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 5)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTLimitSpaceInfo(object):
    """
    Attributes:
     - limitUserSpace
     - allocatedLimitUserSpace
     - limitDocSpace
     - allocatedLimitDocSpace

    """


    def __init__(self, limitUserSpace=None, allocatedLimitUserSpace=None, limitDocSpace=None, allocatedLimitDocSpace=None,):
        self.limitUserSpace = limitUserSpace
        self.allocatedLimitUserSpace = allocatedLimitUserSpace
        self.limitDocSpace = limitDocSpace
        self.allocatedLimitDocSpace = allocatedLimitDocSpace

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.limitUserSpace = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.allocatedLimitUserSpace = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.limitDocSpace = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.allocatedLimitDocSpace = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLimitSpaceInfo')
        if self.limitUserSpace is not None:
            oprot.writeFieldBegin('limitUserSpace', TType.I64, 1)
            oprot.writeI64(self.limitUserSpace)
            oprot.writeFieldEnd()
        if self.allocatedLimitUserSpace is not None:
            oprot.writeFieldBegin('allocatedLimitUserSpace', TType.I64, 2)
            oprot.writeI64(self.allocatedLimitUserSpace)
            oprot.writeFieldEnd()
        if self.limitDocSpace is not None:
            oprot.writeFieldBegin('limitDocSpace', TType.I64, 3)
            oprot.writeI64(self.limitDocSpace)
            oprot.writeFieldEnd()
        if self.allocatedLimitDocSpace is not None:
            oprot.writeFieldBegin('allocatedLimitDocSpace', TType.I64, 4)
            oprot.writeI64(self.allocatedLimitDocSpace)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTRoleInfo(object):
    """
    Attributes:
     - name
     - description
     - creatorId
     - id
     - displayName

    """


    def __init__(self, name=None, description=None, creatorId=None, id=None, displayName=None,):
        self.name = name
        self.description = description
        self.creatorId = creatorId
        self.id = id
        self.displayName = displayName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.creatorId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTRoleInfo')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 2)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.creatorId is not None:
            oprot.writeFieldBegin('creatorId', TType.STRING, 3)
            oprot.writeString(self.creatorId.encode('utf-8') if sys.version_info[0] == 2 else self.creatorId)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 4)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 5)
            oprot.writeString(self.displayName.encode('utf-8') if sys.version_info[0] == 2 else self.displayName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTManageDeptInfo(object):
    """
    Attributes:
     - departmentIds
     - departmentNames
     - limitUserSpaceSize
     - limitDocSpaceSize

    """


    def __init__(self, departmentIds=None, departmentNames=None, limitUserSpaceSize=None, limitDocSpaceSize=None,):
        self.departmentIds = departmentIds
        self.departmentNames = departmentNames
        self.limitUserSpaceSize = limitUserSpaceSize
        self.limitDocSpaceSize = limitDocSpaceSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.departmentIds = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.departmentIds.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.departmentNames = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.departmentNames.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.limitUserSpaceSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.limitDocSpaceSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTManageDeptInfo')
        if self.departmentIds is not None:
            oprot.writeFieldBegin('departmentIds', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.departmentIds))
            for iter12 in self.departmentIds:
                oprot.writeString(iter12.encode('utf-8') if sys.version_info[0] == 2 else iter12)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.departmentNames is not None:
            oprot.writeFieldBegin('departmentNames', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.departmentNames))
            for iter13 in self.departmentNames:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.limitUserSpaceSize is not None:
            oprot.writeFieldBegin('limitUserSpaceSize', TType.I64, 3)
            oprot.writeI64(self.limitUserSpaceSize)
            oprot.writeFieldEnd()
        if self.limitDocSpaceSize is not None:
            oprot.writeFieldBegin('limitDocSpaceSize', TType.I64, 4)
            oprot.writeI64(self.limitDocSpaceSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAuditObject(object):
    """
    Attributes:
     - objType
     - objId
     - objName

    """


    def __init__(self, objType=None, objId=None, objName=None,):
        self.objType = objType
        self.objId = objId
        self.objName = objName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.objType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.objId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.objName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAuditObject')
        if self.objType is not None:
            oprot.writeFieldBegin('objType', TType.I32, 1)
            oprot.writeI32(self.objType)
            oprot.writeFieldEnd()
        if self.objId is not None:
            oprot.writeFieldBegin('objId', TType.STRING, 2)
            oprot.writeString(self.objId.encode('utf-8') if sys.version_info[0] == 2 else self.objId)
            oprot.writeFieldEnd()
        if self.objName is not None:
            oprot.writeFieldBegin('objName', TType.STRING, 3)
            oprot.writeString(self.objName.encode('utf-8') if sys.version_info[0] == 2 else self.objName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTRoleMemberInfo(object):
    """
    Attributes:
     - userId
     - displayName
     - departmentIds
     - departmentNames
     - manageDeptInfo
     - auditObj

    """


    def __init__(self, userId=None, displayName=None, departmentIds=None, departmentNames=None, manageDeptInfo=None, auditObj=None,):
        self.userId = userId
        self.displayName = displayName
        self.departmentIds = departmentIds
        self.departmentNames = departmentNames
        self.manageDeptInfo = manageDeptInfo
        self.auditObj = auditObj

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.departmentIds = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.departmentIds.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.departmentNames = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.departmentNames.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.manageDeptInfo = ncTManageDeptInfo()
                    self.manageDeptInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.auditObj = []
                    (_etype29, _size26) = iprot.readListBegin()
                    for _i30 in range(_size26):
                        _elem31 = ncTAuditObject()
                        _elem31.read(iprot)
                        self.auditObj.append(_elem31)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTRoleMemberInfo')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 2)
            oprot.writeString(self.displayName.encode('utf-8') if sys.version_info[0] == 2 else self.displayName)
            oprot.writeFieldEnd()
        if self.departmentIds is not None:
            oprot.writeFieldBegin('departmentIds', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.departmentIds))
            for iter32 in self.departmentIds:
                oprot.writeString(iter32.encode('utf-8') if sys.version_info[0] == 2 else iter32)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.departmentNames is not None:
            oprot.writeFieldBegin('departmentNames', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.departmentNames))
            for iter33 in self.departmentNames:
                oprot.writeString(iter33.encode('utf-8') if sys.version_info[0] == 2 else iter33)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.manageDeptInfo is not None:
            oprot.writeFieldBegin('manageDeptInfo', TType.STRUCT, 5)
            self.manageDeptInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.auditObj is not None:
            oprot.writeFieldBegin('auditObj', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.auditObj))
            for iter34 in self.auditObj:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmUserInfo(object):
    """
    Attributes:
     - loginName
     - displayName
     - email
     - space
     - userType
     - departmentIds
     - departmentNames
     - status
     - usedSize
     - priority
     - csfLevel
     - pwdControl
     - ossInfo
     - limitSpaceInfo
     - createTime
     - freezeStatus
     - telNumber
     - roles
     - expireTime
     - remark
     - idcardNumber

    """


    def __init__(self, loginName=None, displayName=None, email=None, space=None, userType=None, departmentIds=None, departmentNames=None, status=None, usedSize=None, priority=None, csfLevel=None, pwdControl=None, ossInfo=None, limitSpaceInfo=None, createTime=None, freezeStatus=None, telNumber=None, roles=None, expireTime=None, remark=None, idcardNumber=None,):
        self.loginName = loginName
        self.displayName = displayName
        self.email = email
        self.space = space
        self.userType = userType
        self.departmentIds = departmentIds
        self.departmentNames = departmentNames
        self.status = status
        self.usedSize = usedSize
        self.priority = priority
        self.csfLevel = csfLevel
        self.pwdControl = pwdControl
        self.ossInfo = ossInfo
        self.limitSpaceInfo = limitSpaceInfo
        self.createTime = createTime
        self.freezeStatus = freezeStatus
        self.telNumber = telNumber
        self.roles = roles
        self.expireTime = expireTime
        self.remark = remark
        self.idcardNumber = idcardNumber

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.loginName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.space = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.userType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.departmentIds = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.departmentIds.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.departmentNames = []
                    (_etype44, _size41) = iprot.readListBegin()
                    for _i45 in range(_size41):
                        _elem46 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.departmentNames.append(_elem46)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.usedSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.csfLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.pwdControl = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.ossInfo = ncTUsrmOSSInfo()
                    self.ossInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRUCT:
                    self.limitSpaceInfo = ncTLimitSpaceInfo()
                    self.limitSpaceInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I64:
                    self.createTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.freezeStatus = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.telNumber = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.LIST:
                    self.roles = []
                    (_etype50, _size47) = iprot.readListBegin()
                    for _i51 in range(_size47):
                        _elem52 = ncTRoleInfo()
                        _elem52.read(iprot)
                        self.roles.append(_elem52)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I32:
                    self.expireTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.remark = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.idcardNumber = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmUserInfo')
        if self.loginName is not None:
            oprot.writeFieldBegin('loginName', TType.STRING, 1)
            oprot.writeString(self.loginName.encode('utf-8') if sys.version_info[0] == 2 else self.loginName)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 2)
            oprot.writeString(self.displayName.encode('utf-8') if sys.version_info[0] == 2 else self.displayName)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 3)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.space is not None:
            oprot.writeFieldBegin('space', TType.I64, 4)
            oprot.writeI64(self.space)
            oprot.writeFieldEnd()
        if self.userType is not None:
            oprot.writeFieldBegin('userType', TType.I32, 5)
            oprot.writeI32(self.userType)
            oprot.writeFieldEnd()
        if self.departmentIds is not None:
            oprot.writeFieldBegin('departmentIds', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.departmentIds))
            for iter53 in self.departmentIds:
                oprot.writeString(iter53.encode('utf-8') if sys.version_info[0] == 2 else iter53)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.departmentNames is not None:
            oprot.writeFieldBegin('departmentNames', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.departmentNames))
            for iter54 in self.departmentNames:
                oprot.writeString(iter54.encode('utf-8') if sys.version_info[0] == 2 else iter54)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 8)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.usedSize is not None:
            oprot.writeFieldBegin('usedSize', TType.I64, 9)
            oprot.writeI64(self.usedSize)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 10)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        if self.csfLevel is not None:
            oprot.writeFieldBegin('csfLevel', TType.I32, 11)
            oprot.writeI32(self.csfLevel)
            oprot.writeFieldEnd()
        if self.pwdControl is not None:
            oprot.writeFieldBegin('pwdControl', TType.BOOL, 12)
            oprot.writeBool(self.pwdControl)
            oprot.writeFieldEnd()
        if self.ossInfo is not None:
            oprot.writeFieldBegin('ossInfo', TType.STRUCT, 13)
            self.ossInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.limitSpaceInfo is not None:
            oprot.writeFieldBegin('limitSpaceInfo', TType.STRUCT, 14)
            self.limitSpaceInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.I64, 15)
            oprot.writeI64(self.createTime)
            oprot.writeFieldEnd()
        if self.freezeStatus is not None:
            oprot.writeFieldBegin('freezeStatus', TType.BOOL, 16)
            oprot.writeBool(self.freezeStatus)
            oprot.writeFieldEnd()
        if self.telNumber is not None:
            oprot.writeFieldBegin('telNumber', TType.STRING, 17)
            oprot.writeString(self.telNumber.encode('utf-8') if sys.version_info[0] == 2 else self.telNumber)
            oprot.writeFieldEnd()
        if self.roles is not None:
            oprot.writeFieldBegin('roles', TType.LIST, 18)
            oprot.writeListBegin(TType.STRUCT, len(self.roles))
            for iter55 in self.roles:
                iter55.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.expireTime is not None:
            oprot.writeFieldBegin('expireTime', TType.I32, 19)
            oprot.writeI32(self.expireTime)
            oprot.writeFieldEnd()
        if self.remark is not None:
            oprot.writeFieldBegin('remark', TType.STRING, 20)
            oprot.writeString(self.remark.encode('utf-8') if sys.version_info[0] == 2 else self.remark)
            oprot.writeFieldEnd()
        if self.idcardNumber is not None:
            oprot.writeFieldBegin('idcardNumber', TType.STRING, 21)
            oprot.writeString(self.idcardNumber.encode('utf-8') if sys.version_info[0] == 2 else self.idcardNumber)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.loginName is None:
            raise TProtocolException(message='Required field loginName is unset!')
        if self.departmentIds is None:
            raise TProtocolException(message='Required field departmentIds is unset!')
        if self.pwdControl is None:
            raise TProtocolException(message='Required field pwdControl is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTSimpleUserInfo(object):
    """
    Attributes:
     - id
     - displayName
     - loginName
     - status

    """


    def __init__(self, id=None, displayName=None, loginName=None, status=None,):
        self.id = id
        self.displayName = displayName
        self.loginName = loginName
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.loginName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTSimpleUserInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 2)
            oprot.writeString(self.displayName.encode('utf-8') if sys.version_info[0] == 2 else self.displayName)
            oprot.writeFieldEnd()
        if self.loginName is not None:
            oprot.writeFieldBegin('loginName', TType.STRING, 3)
            oprot.writeString(self.loginName.encode('utf-8') if sys.version_info[0] == 2 else self.loginName)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 4)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmDirectDeptInfo(object):
    """
    Attributes:
     - departmentId
     - departmentName
     - responsiblePersons

    """


    def __init__(self, departmentId=None, departmentName=None, responsiblePersons=None,):
        self.departmentId = departmentId
        self.departmentName = departmentName
        self.responsiblePersons = responsiblePersons

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.departmentId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.departmentName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.responsiblePersons = []
                    (_etype59, _size56) = iprot.readListBegin()
                    for _i60 in range(_size56):
                        _elem61 = ncTSimpleUserInfo()
                        _elem61.read(iprot)
                        self.responsiblePersons.append(_elem61)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmDirectDeptInfo')
        if self.departmentId is not None:
            oprot.writeFieldBegin('departmentId', TType.STRING, 1)
            oprot.writeString(self.departmentId.encode('utf-8') if sys.version_info[0] == 2 else self.departmentId)
            oprot.writeFieldEnd()
        if self.departmentName is not None:
            oprot.writeFieldBegin('departmentName', TType.STRING, 2)
            oprot.writeString(self.departmentName.encode('utf-8') if sys.version_info[0] == 2 else self.departmentName)
            oprot.writeFieldEnd()
        if self.responsiblePersons is not None:
            oprot.writeFieldBegin('responsiblePersons', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.responsiblePersons))
            for iter62 in self.responsiblePersons:
                iter62.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmGetUserInfo(object):
    """
    Attributes:
     - id
     - user
     - originalPwd
     - password
     - directDeptInfo

    """


    def __init__(self, id=None, user=None, originalPwd=None, password=None, directDeptInfo=None,):
        self.id = id
        self.user = user
        self.originalPwd = originalPwd
        self.password = password
        self.directDeptInfo = directDeptInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.user = ncTUsrmUserInfo()
                    self.user.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.originalPwd = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.directDeptInfo = ncTUsrmDirectDeptInfo()
                    self.directDeptInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmGetUserInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.STRUCT, 2)
            self.user.write(oprot)
            oprot.writeFieldEnd()
        if self.originalPwd is not None:
            oprot.writeFieldBegin('originalPwd', TType.BOOL, 3)
            oprot.writeBool(self.originalPwd)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 4)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.directDeptInfo is not None:
            oprot.writeFieldBegin('directDeptInfo', TType.STRUCT, 5)
            self.directDeptInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmPasswordConfig(object):
    """
    Attributes:
     - strongStatus
     - expireTime
     - lockStatus
     - passwdErrCnt
     - passwdLockTime
     - strongPwdLength

    """


    def __init__(self, strongStatus=None, expireTime=None, lockStatus=None, passwdErrCnt=None, passwdLockTime=None, strongPwdLength=None,):
        self.strongStatus = strongStatus
        self.expireTime = expireTime
        self.lockStatus = lockStatus
        self.passwdErrCnt = passwdErrCnt
        self.passwdLockTime = passwdLockTime
        self.strongPwdLength = strongPwdLength

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.strongStatus = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.expireTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.lockStatus = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.passwdErrCnt = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.passwdLockTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.strongPwdLength = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmPasswordConfig')
        if self.strongStatus is not None:
            oprot.writeFieldBegin('strongStatus', TType.BOOL, 1)
            oprot.writeBool(self.strongStatus)
            oprot.writeFieldEnd()
        if self.expireTime is not None:
            oprot.writeFieldBegin('expireTime', TType.I32, 2)
            oprot.writeI32(self.expireTime)
            oprot.writeFieldEnd()
        if self.lockStatus is not None:
            oprot.writeFieldBegin('lockStatus', TType.BOOL, 3)
            oprot.writeBool(self.lockStatus)
            oprot.writeFieldEnd()
        if self.passwdErrCnt is not None:
            oprot.writeFieldBegin('passwdErrCnt', TType.I32, 4)
            oprot.writeI32(self.passwdErrCnt)
            oprot.writeFieldEnd()
        if self.passwdLockTime is not None:
            oprot.writeFieldBegin('passwdLockTime', TType.I32, 5)
            oprot.writeI32(self.passwdLockTime)
            oprot.writeFieldEnd()
        if self.strongPwdLength is not None:
            oprot.writeFieldBegin('strongPwdLength', TType.I32, 6)
            oprot.writeI32(self.strongPwdLength)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.strongStatus is None:
            raise TProtocolException(message='Required field strongStatus is unset!')
        if self.expireTime is None:
            raise TProtocolException(message='Required field expireTime is unset!')
        if self.lockStatus is None:
            raise TProtocolException(message='Required field lockStatus is unset!')
        if self.passwdErrCnt is None:
            raise TProtocolException(message='Required field passwdErrCnt is unset!')
        if self.strongPwdLength is None:
            raise TProtocolException(message='Required field strongPwdLength is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmAddUserInfo(object):
    """
    Attributes:
     - user
     - password

    """


    def __init__(self, user=None, password=None,):
        self.user = user
        self.password = password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.user = ncTUsrmUserInfo()
                    self.user.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmAddUserInfo')
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.STRUCT, 1)
            self.user.write(oprot)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.password is None:
            raise TProtocolException(message='Required field password is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEditUserParam(object):
    """
    Attributes:
     - id
     - displayName
     - email
     - space
     - priority
     - csfLevel
     - pwdControl
     - pwd
     - ossId
     - telNumber
     - expireTime
     - remark
     - idcardNumber

    """


    def __init__(self, id=None, displayName=None, email=None, space=None, priority=None, csfLevel=None, pwdControl=None, pwd=None, ossId=None, telNumber=None, expireTime=None, remark=None, idcardNumber=None,):
        self.id = id
        self.displayName = displayName
        self.email = email
        self.space = space
        self.priority = priority
        self.csfLevel = csfLevel
        self.pwdControl = pwdControl
        self.pwd = pwd
        self.ossId = ossId
        self.telNumber = telNumber
        self.expireTime = expireTime
        self.remark = remark
        self.idcardNumber = idcardNumber

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.space = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.csfLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.pwdControl = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.pwd = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.ossId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.telNumber = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.expireTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.remark = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.idcardNumber = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEditUserParam')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 2)
            oprot.writeString(self.displayName.encode('utf-8') if sys.version_info[0] == 2 else self.displayName)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 3)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.space is not None:
            oprot.writeFieldBegin('space', TType.I64, 4)
            oprot.writeI64(self.space)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 5)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        if self.csfLevel is not None:
            oprot.writeFieldBegin('csfLevel', TType.I32, 6)
            oprot.writeI32(self.csfLevel)
            oprot.writeFieldEnd()
        if self.pwdControl is not None:
            oprot.writeFieldBegin('pwdControl', TType.BOOL, 7)
            oprot.writeBool(self.pwdControl)
            oprot.writeFieldEnd()
        if self.pwd is not None:
            oprot.writeFieldBegin('pwd', TType.STRING, 8)
            oprot.writeString(self.pwd.encode('utf-8') if sys.version_info[0] == 2 else self.pwd)
            oprot.writeFieldEnd()
        if self.ossId is not None:
            oprot.writeFieldBegin('ossId', TType.STRING, 9)
            oprot.writeString(self.ossId.encode('utf-8') if sys.version_info[0] == 2 else self.ossId)
            oprot.writeFieldEnd()
        if self.telNumber is not None:
            oprot.writeFieldBegin('telNumber', TType.STRING, 10)
            oprot.writeString(self.telNumber.encode('utf-8') if sys.version_info[0] == 2 else self.telNumber)
            oprot.writeFieldEnd()
        if self.expireTime is not None:
            oprot.writeFieldBegin('expireTime', TType.I32, 11)
            oprot.writeI32(self.expireTime)
            oprot.writeFieldEnd()
        if self.remark is not None:
            oprot.writeFieldBegin('remark', TType.STRING, 12)
            oprot.writeString(self.remark.encode('utf-8') if sys.version_info[0] == 2 else self.remark)
            oprot.writeFieldEnd()
        if self.idcardNumber is not None:
            oprot.writeFieldBegin('idcardNumber', TType.STRING, 13)
            oprot.writeString(self.idcardNumber.encode('utf-8') if sys.version_info[0] == 2 else self.idcardNumber)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAddOrgParam(object):
    """
    Attributes:
     - orgName
     - ossId
     - priority
     - email

    """


    def __init__(self, orgName=None, ossId=None, priority=None, email=None,):
        self.orgName = orgName
        self.ossId = ossId
        self.priority = priority
        self.email = email

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.orgName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ossId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAddOrgParam')
        if self.orgName is not None:
            oprot.writeFieldBegin('orgName', TType.STRING, 1)
            oprot.writeString(self.orgName.encode('utf-8') if sys.version_info[0] == 2 else self.orgName)
            oprot.writeFieldEnd()
        if self.ossId is not None:
            oprot.writeFieldBegin('ossId', TType.STRING, 2)
            oprot.writeString(self.ossId.encode('utf-8') if sys.version_info[0] == 2 else self.ossId)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 3)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 4)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.orgName is None:
            raise TProtocolException(message='Required field orgName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAddDepartParam(object):
    """
    Attributes:
     - departName
     - parentId
     - ossId
     - priority
     - email

    """


    def __init__(self, departName=None, parentId=None, ossId=None, priority=None, email=None,):
        self.departName = departName
        self.parentId = parentId
        self.ossId = ossId
        self.priority = priority
        self.email = email

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.departName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ossId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAddDepartParam')
        if self.departName is not None:
            oprot.writeFieldBegin('departName', TType.STRING, 1)
            oprot.writeString(self.departName.encode('utf-8') if sys.version_info[0] == 2 else self.departName)
            oprot.writeFieldEnd()
        if self.parentId is not None:
            oprot.writeFieldBegin('parentId', TType.STRING, 2)
            oprot.writeString(self.parentId.encode('utf-8') if sys.version_info[0] == 2 else self.parentId)
            oprot.writeFieldEnd()
        if self.ossId is not None:
            oprot.writeFieldBegin('ossId', TType.STRING, 3)
            oprot.writeString(self.ossId.encode('utf-8') if sys.version_info[0] == 2 else self.ossId)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 4)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 5)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.departName is None:
            raise TProtocolException(message='Required field departName is unset!')
        if self.parentId is None:
            raise TProtocolException(message='Required field parentId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEditDepartParam(object):
    """
    Attributes:
     - departId
     - departName
     - ossId
     - priority
     - email

    """


    def __init__(self, departId=None, departName=None, ossId=None, priority=None, email=None,):
        self.departId = departId
        self.departName = departName
        self.ossId = ossId
        self.priority = priority
        self.email = email

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.departId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.departName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ossId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEditDepartParam')
        if self.departId is not None:
            oprot.writeFieldBegin('departId', TType.STRING, 1)
            oprot.writeString(self.departId.encode('utf-8') if sys.version_info[0] == 2 else self.departId)
            oprot.writeFieldEnd()
        if self.departName is not None:
            oprot.writeFieldBegin('departName', TType.STRING, 2)
            oprot.writeString(self.departName.encode('utf-8') if sys.version_info[0] == 2 else self.departName)
            oprot.writeFieldEnd()
        if self.ossId is not None:
            oprot.writeFieldBegin('ossId', TType.STRING, 3)
            oprot.writeString(self.ossId.encode('utf-8') if sys.version_info[0] == 2 else self.ossId)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 4)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 5)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.departId is None:
            raise TProtocolException(message='Required field departId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmDepartmentInfo(object):
    """
    Attributes:
     - departmentId
     - departmentName
     - parentDepartId
     - parentDepartName
     - responsiblePersons
     - ossInfo
     - subDepartIds
     - email
     - parentPath

    """


    def __init__(self, departmentId=None, departmentName=None, parentDepartId=None, parentDepartName=None, responsiblePersons=None, ossInfo=None, subDepartIds=None, email=None, parentPath=None,):
        self.departmentId = departmentId
        self.departmentName = departmentName
        self.parentDepartId = parentDepartId
        self.parentDepartName = parentDepartName
        self.responsiblePersons = responsiblePersons
        self.ossInfo = ossInfo
        self.subDepartIds = subDepartIds
        self.email = email
        self.parentPath = parentPath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.departmentId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.departmentName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.parentDepartId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.parentDepartName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.responsiblePersons = []
                    (_etype66, _size63) = iprot.readListBegin()
                    for _i67 in range(_size63):
                        _elem68 = ncTUsrmGetUserInfo()
                        _elem68.read(iprot)
                        self.responsiblePersons.append(_elem68)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.ossInfo = ncTUsrmOSSInfo()
                    self.ossInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.subDepartIds = []
                    (_etype72, _size69) = iprot.readListBegin()
                    for _i73 in range(_size69):
                        _elem74 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.subDepartIds.append(_elem74)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.parentPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmDepartmentInfo')
        if self.departmentId is not None:
            oprot.writeFieldBegin('departmentId', TType.STRING, 1)
            oprot.writeString(self.departmentId.encode('utf-8') if sys.version_info[0] == 2 else self.departmentId)
            oprot.writeFieldEnd()
        if self.departmentName is not None:
            oprot.writeFieldBegin('departmentName', TType.STRING, 2)
            oprot.writeString(self.departmentName.encode('utf-8') if sys.version_info[0] == 2 else self.departmentName)
            oprot.writeFieldEnd()
        if self.parentDepartId is not None:
            oprot.writeFieldBegin('parentDepartId', TType.STRING, 3)
            oprot.writeString(self.parentDepartId.encode('utf-8') if sys.version_info[0] == 2 else self.parentDepartId)
            oprot.writeFieldEnd()
        if self.parentDepartName is not None:
            oprot.writeFieldBegin('parentDepartName', TType.STRING, 4)
            oprot.writeString(self.parentDepartName.encode('utf-8') if sys.version_info[0] == 2 else self.parentDepartName)
            oprot.writeFieldEnd()
        if self.responsiblePersons is not None:
            oprot.writeFieldBegin('responsiblePersons', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.responsiblePersons))
            for iter75 in self.responsiblePersons:
                iter75.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ossInfo is not None:
            oprot.writeFieldBegin('ossInfo', TType.STRUCT, 6)
            self.ossInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.subDepartIds is not None:
            oprot.writeFieldBegin('subDepartIds', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.subDepartIds))
            for iter76 in self.subDepartIds:
                oprot.writeString(iter76.encode('utf-8') if sys.version_info[0] == 2 else iter76)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 8)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.parentPath is not None:
            oprot.writeFieldBegin('parentPath', TType.STRING, 9)
            oprot.writeString(self.parentPath.encode('utf-8') if sys.version_info[0] == 2 else self.parentPath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTDepartmentInfo(object):
    """
    Attributes:
     - id
     - name
     - responsiblePersons
     - subDepartmentCount
     - subUserCount
     - ossInfo
     - email

    """


    def __init__(self, id=None, name=None, responsiblePersons=None, subDepartmentCount=None, subUserCount=None, ossInfo=None, email=None,):
        self.id = id
        self.name = name
        self.responsiblePersons = responsiblePersons
        self.subDepartmentCount = subDepartmentCount
        self.subUserCount = subUserCount
        self.ossInfo = ossInfo
        self.email = email

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.responsiblePersons = []
                    (_etype80, _size77) = iprot.readListBegin()
                    for _i81 in range(_size77):
                        _elem82 = ncTUsrmGetUserInfo()
                        _elem82.read(iprot)
                        self.responsiblePersons.append(_elem82)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.subDepartmentCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.subUserCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.ossInfo = ncTUsrmOSSInfo()
                    self.ossInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTDepartmentInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.responsiblePersons is not None:
            oprot.writeFieldBegin('responsiblePersons', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.responsiblePersons))
            for iter83 in self.responsiblePersons:
                iter83.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.subDepartmentCount is not None:
            oprot.writeFieldBegin('subDepartmentCount', TType.I32, 4)
            oprot.writeI32(self.subDepartmentCount)
            oprot.writeFieldEnd()
        if self.subUserCount is not None:
            oprot.writeFieldBegin('subUserCount', TType.I32, 5)
            oprot.writeI32(self.subUserCount)
            oprot.writeFieldEnd()
        if self.ossInfo is not None:
            oprot.writeFieldBegin('ossInfo', TType.STRUCT, 6)
            self.ossInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 7)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmOrganizationInfo(object):
    """
    Attributes:
     - organizationId
     - organizationName
     - departments
     - responsiblePersons
     - ossInfo
     - email

    """


    def __init__(self, organizationId=None, organizationName=None, departments=None, responsiblePersons=None, ossInfo=None, email=None,):
        self.organizationId = organizationId
        self.organizationName = organizationName
        self.departments = departments
        self.responsiblePersons = responsiblePersons
        self.ossInfo = ossInfo
        self.email = email

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.organizationId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.organizationName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.departments = []
                    (_etype87, _size84) = iprot.readListBegin()
                    for _i88 in range(_size84):
                        _elem89 = ncTUsrmDepartmentInfo()
                        _elem89.read(iprot)
                        self.departments.append(_elem89)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.responsiblePersons = []
                    (_etype93, _size90) = iprot.readListBegin()
                    for _i94 in range(_size90):
                        _elem95 = ncTUsrmGetUserInfo()
                        _elem95.read(iprot)
                        self.responsiblePersons.append(_elem95)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ossInfo = ncTUsrmOSSInfo()
                    self.ossInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmOrganizationInfo')
        if self.organizationId is not None:
            oprot.writeFieldBegin('organizationId', TType.STRING, 1)
            oprot.writeString(self.organizationId.encode('utf-8') if sys.version_info[0] == 2 else self.organizationId)
            oprot.writeFieldEnd()
        if self.organizationName is not None:
            oprot.writeFieldBegin('organizationName', TType.STRING, 2)
            oprot.writeString(self.organizationName.encode('utf-8') if sys.version_info[0] == 2 else self.organizationName)
            oprot.writeFieldEnd()
        if self.departments is not None:
            oprot.writeFieldBegin('departments', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.departments))
            for iter96 in self.departments:
                iter96.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.responsiblePersons is not None:
            oprot.writeFieldBegin('responsiblePersons', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.responsiblePersons))
            for iter97 in self.responsiblePersons:
                iter97.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ossInfo is not None:
            oprot.writeFieldBegin('ossInfo', TType.STRUCT, 5)
            self.ossInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 6)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTRootOrgInfo(object):
    """
    Attributes:
     - isOrganization
     - id
     - name
     - responsiblePersons
     - subDepartmentCount
     - subUserCount
     - ossInfo
     - email

    """


    def __init__(self, isOrganization=None, id=None, name=None, responsiblePersons=None, subDepartmentCount=None, subUserCount=None, ossInfo=None, email=None,):
        self.isOrganization = isOrganization
        self.id = id
        self.name = name
        self.responsiblePersons = responsiblePersons
        self.subDepartmentCount = subDepartmentCount
        self.subUserCount = subUserCount
        self.ossInfo = ossInfo
        self.email = email

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isOrganization = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.responsiblePersons = []
                    (_etype101, _size98) = iprot.readListBegin()
                    for _i102 in range(_size98):
                        _elem103 = ncTUsrmGetUserInfo()
                        _elem103.read(iprot)
                        self.responsiblePersons.append(_elem103)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.subDepartmentCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.subUserCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.ossInfo = ncTUsrmOSSInfo()
                    self.ossInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTRootOrgInfo')
        if self.isOrganization is not None:
            oprot.writeFieldBegin('isOrganization', TType.BOOL, 1)
            oprot.writeBool(self.isOrganization)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.responsiblePersons is not None:
            oprot.writeFieldBegin('responsiblePersons', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.responsiblePersons))
            for iter104 in self.responsiblePersons:
                iter104.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.subDepartmentCount is not None:
            oprot.writeFieldBegin('subDepartmentCount', TType.I32, 5)
            oprot.writeI32(self.subDepartmentCount)
            oprot.writeFieldEnd()
        if self.subUserCount is not None:
            oprot.writeFieldBegin('subUserCount', TType.I32, 6)
            oprot.writeI32(self.subUserCount)
            oprot.writeFieldEnd()
        if self.ossInfo is not None:
            oprot.writeFieldBegin('ossInfo', TType.STRUCT, 7)
            self.ossInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 8)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTSearchUserInfo(object):
    """
    Attributes:
     - id
     - loginName
     - displayName
     - csfLevel
     - departmentIds
     - departmentNames
     - departmentPaths

    """


    def __init__(self, id=None, loginName=None, displayName=None, csfLevel=None, departmentIds=None, departmentNames=None, departmentPaths=None,):
        self.id = id
        self.loginName = loginName
        self.displayName = displayName
        self.csfLevel = csfLevel
        self.departmentIds = departmentIds
        self.departmentNames = departmentNames
        self.departmentPaths = departmentPaths

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.loginName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.csfLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.departmentIds = []
                    (_etype108, _size105) = iprot.readListBegin()
                    for _i109 in range(_size105):
                        _elem110 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.departmentIds.append(_elem110)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.departmentNames = []
                    (_etype114, _size111) = iprot.readListBegin()
                    for _i115 in range(_size111):
                        _elem116 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.departmentNames.append(_elem116)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.departmentPaths = []
                    (_etype120, _size117) = iprot.readListBegin()
                    for _i121 in range(_size117):
                        _elem122 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.departmentPaths.append(_elem122)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTSearchUserInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.loginName is not None:
            oprot.writeFieldBegin('loginName', TType.STRING, 2)
            oprot.writeString(self.loginName.encode('utf-8') if sys.version_info[0] == 2 else self.loginName)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 3)
            oprot.writeString(self.displayName.encode('utf-8') if sys.version_info[0] == 2 else self.displayName)
            oprot.writeFieldEnd()
        if self.csfLevel is not None:
            oprot.writeFieldBegin('csfLevel', TType.I32, 4)
            oprot.writeI32(self.csfLevel)
            oprot.writeFieldEnd()
        if self.departmentIds is not None:
            oprot.writeFieldBegin('departmentIds', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.departmentIds))
            for iter123 in self.departmentIds:
                oprot.writeString(iter123.encode('utf-8') if sys.version_info[0] == 2 else iter123)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.departmentNames is not None:
            oprot.writeFieldBegin('departmentNames', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.departmentNames))
            for iter124 in self.departmentNames:
                oprot.writeString(iter124.encode('utf-8') if sys.version_info[0] == 2 else iter124)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.departmentPaths is not None:
            oprot.writeFieldBegin('departmentPaths', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.departmentPaths))
            for iter125 in self.departmentPaths:
                oprot.writeString(iter125.encode('utf-8') if sys.version_info[0] == 2 else iter125)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTLocateInfo(object):
    """
    Attributes:
     - departId
     - departName

    """


    def __init__(self, departId=None, departName=None,):
        self.departId = departId
        self.departName = departName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.departId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.departName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLocateInfo')
        if self.departId is not None:
            oprot.writeFieldBegin('departId', TType.STRING, 1)
            oprot.writeString(self.departId.encode('utf-8') if sys.version_info[0] == 2 else self.departId)
            oprot.writeFieldEnd()
        if self.departName is not None:
            oprot.writeFieldBegin('departName', TType.STRING, 2)
            oprot.writeString(self.departName.encode('utf-8') if sys.version_info[0] == 2 else self.departName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmDomainConfig(object):
    """
    Attributes:
     - destDepartId
     - desetDepartName
     - ouPath
     - syncInterval
     - spaceSize
     - syncMode
     - userEnableStatus
     - forcedSync
     - validPeriod

    """


    def __init__(self, destDepartId=None, desetDepartName=None, ouPath=None, syncInterval=None, spaceSize=None, syncMode=None, userEnableStatus=None, forcedSync=None, validPeriod=None,):
        self.destDepartId = destDepartId
        self.desetDepartName = desetDepartName
        self.ouPath = ouPath
        self.syncInterval = syncInterval
        self.spaceSize = spaceSize
        self.syncMode = syncMode
        self.userEnableStatus = userEnableStatus
        self.forcedSync = forcedSync
        self.validPeriod = validPeriod

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.destDepartId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.desetDepartName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.ouPath = []
                    (_etype129, _size126) = iprot.readListBegin()
                    for _i130 in range(_size126):
                        _elem131 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ouPath.append(_elem131)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.syncInterval = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.spaceSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.syncMode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.userEnableStatus = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.forcedSync = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.validPeriod = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmDomainConfig')
        if self.destDepartId is not None:
            oprot.writeFieldBegin('destDepartId', TType.STRING, 1)
            oprot.writeString(self.destDepartId.encode('utf-8') if sys.version_info[0] == 2 else self.destDepartId)
            oprot.writeFieldEnd()
        if self.desetDepartName is not None:
            oprot.writeFieldBegin('desetDepartName', TType.STRING, 2)
            oprot.writeString(self.desetDepartName.encode('utf-8') if sys.version_info[0] == 2 else self.desetDepartName)
            oprot.writeFieldEnd()
        if self.ouPath is not None:
            oprot.writeFieldBegin('ouPath', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.ouPath))
            for iter132 in self.ouPath:
                oprot.writeString(iter132.encode('utf-8') if sys.version_info[0] == 2 else iter132)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.syncInterval is not None:
            oprot.writeFieldBegin('syncInterval', TType.I64, 4)
            oprot.writeI64(self.syncInterval)
            oprot.writeFieldEnd()
        if self.spaceSize is not None:
            oprot.writeFieldBegin('spaceSize', TType.I64, 5)
            oprot.writeI64(self.spaceSize)
            oprot.writeFieldEnd()
        if self.syncMode is not None:
            oprot.writeFieldBegin('syncMode', TType.I32, 6)
            oprot.writeI32(self.syncMode)
            oprot.writeFieldEnd()
        if self.userEnableStatus is not None:
            oprot.writeFieldBegin('userEnableStatus', TType.BOOL, 7)
            oprot.writeBool(self.userEnableStatus)
            oprot.writeFieldEnd()
        if self.forcedSync is not None:
            oprot.writeFieldBegin('forcedSync', TType.BOOL, 8)
            oprot.writeBool(self.forcedSync)
            oprot.writeFieldEnd()
        if self.validPeriod is not None:
            oprot.writeFieldBegin('validPeriod', TType.I32, 9)
            oprot.writeI32(self.validPeriod)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmDomainKeyConfig(object):
    """
    Attributes:
     - departNameKeys
     - departThirdIdKeys
     - loginNameKeys
     - displayNameKeys
     - emailKeys
     - userThirdIdKeys
     - groupKeys
     - subOuFilter
     - subUserFilter
     - baseFilter
     - statusKeys
     - idcardNumberKeys

    """


    def __init__(self, departNameKeys=None, departThirdIdKeys=None, loginNameKeys=None, displayNameKeys=None, emailKeys=None, userThirdIdKeys=None, groupKeys=None, subOuFilter=None, subUserFilter=None, baseFilter=None, statusKeys=None, idcardNumberKeys=None,):
        self.departNameKeys = departNameKeys
        self.departThirdIdKeys = departThirdIdKeys
        self.loginNameKeys = loginNameKeys
        self.displayNameKeys = displayNameKeys
        self.emailKeys = emailKeys
        self.userThirdIdKeys = userThirdIdKeys
        self.groupKeys = groupKeys
        self.subOuFilter = subOuFilter
        self.subUserFilter = subUserFilter
        self.baseFilter = baseFilter
        self.statusKeys = statusKeys
        self.idcardNumberKeys = idcardNumberKeys

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.departNameKeys = []
                    (_etype136, _size133) = iprot.readListBegin()
                    for _i137 in range(_size133):
                        _elem138 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.departNameKeys.append(_elem138)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.departThirdIdKeys = []
                    (_etype142, _size139) = iprot.readListBegin()
                    for _i143 in range(_size139):
                        _elem144 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.departThirdIdKeys.append(_elem144)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.loginNameKeys = []
                    (_etype148, _size145) = iprot.readListBegin()
                    for _i149 in range(_size145):
                        _elem150 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.loginNameKeys.append(_elem150)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.displayNameKeys = []
                    (_etype154, _size151) = iprot.readListBegin()
                    for _i155 in range(_size151):
                        _elem156 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.displayNameKeys.append(_elem156)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.emailKeys = []
                    (_etype160, _size157) = iprot.readListBegin()
                    for _i161 in range(_size157):
                        _elem162 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.emailKeys.append(_elem162)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.userThirdIdKeys = []
                    (_etype166, _size163) = iprot.readListBegin()
                    for _i167 in range(_size163):
                        _elem168 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.userThirdIdKeys.append(_elem168)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.groupKeys = []
                    (_etype172, _size169) = iprot.readListBegin()
                    for _i173 in range(_size169):
                        _elem174 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.groupKeys.append(_elem174)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.subOuFilter = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.subUserFilter = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.baseFilter = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.statusKeys = []
                    (_etype178, _size175) = iprot.readListBegin()
                    for _i179 in range(_size175):
                        _elem180 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.statusKeys.append(_elem180)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.idcardNumberKeys = []
                    (_etype184, _size181) = iprot.readListBegin()
                    for _i185 in range(_size181):
                        _elem186 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.idcardNumberKeys.append(_elem186)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmDomainKeyConfig')
        if self.departNameKeys is not None:
            oprot.writeFieldBegin('departNameKeys', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.departNameKeys))
            for iter187 in self.departNameKeys:
                oprot.writeString(iter187.encode('utf-8') if sys.version_info[0] == 2 else iter187)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.departThirdIdKeys is not None:
            oprot.writeFieldBegin('departThirdIdKeys', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.departThirdIdKeys))
            for iter188 in self.departThirdIdKeys:
                oprot.writeString(iter188.encode('utf-8') if sys.version_info[0] == 2 else iter188)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.loginNameKeys is not None:
            oprot.writeFieldBegin('loginNameKeys', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.loginNameKeys))
            for iter189 in self.loginNameKeys:
                oprot.writeString(iter189.encode('utf-8') if sys.version_info[0] == 2 else iter189)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.displayNameKeys is not None:
            oprot.writeFieldBegin('displayNameKeys', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.displayNameKeys))
            for iter190 in self.displayNameKeys:
                oprot.writeString(iter190.encode('utf-8') if sys.version_info[0] == 2 else iter190)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.emailKeys is not None:
            oprot.writeFieldBegin('emailKeys', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.emailKeys))
            for iter191 in self.emailKeys:
                oprot.writeString(iter191.encode('utf-8') if sys.version_info[0] == 2 else iter191)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.userThirdIdKeys is not None:
            oprot.writeFieldBegin('userThirdIdKeys', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.userThirdIdKeys))
            for iter192 in self.userThirdIdKeys:
                oprot.writeString(iter192.encode('utf-8') if sys.version_info[0] == 2 else iter192)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.groupKeys is not None:
            oprot.writeFieldBegin('groupKeys', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.groupKeys))
            for iter193 in self.groupKeys:
                oprot.writeString(iter193.encode('utf-8') if sys.version_info[0] == 2 else iter193)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.subOuFilter is not None:
            oprot.writeFieldBegin('subOuFilter', TType.STRING, 8)
            oprot.writeString(self.subOuFilter.encode('utf-8') if sys.version_info[0] == 2 else self.subOuFilter)
            oprot.writeFieldEnd()
        if self.subUserFilter is not None:
            oprot.writeFieldBegin('subUserFilter', TType.STRING, 9)
            oprot.writeString(self.subUserFilter.encode('utf-8') if sys.version_info[0] == 2 else self.subUserFilter)
            oprot.writeFieldEnd()
        if self.baseFilter is not None:
            oprot.writeFieldBegin('baseFilter', TType.STRING, 10)
            oprot.writeString(self.baseFilter.encode('utf-8') if sys.version_info[0] == 2 else self.baseFilter)
            oprot.writeFieldEnd()
        if self.statusKeys is not None:
            oprot.writeFieldBegin('statusKeys', TType.LIST, 11)
            oprot.writeListBegin(TType.STRING, len(self.statusKeys))
            for iter194 in self.statusKeys:
                oprot.writeString(iter194.encode('utf-8') if sys.version_info[0] == 2 else iter194)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.idcardNumberKeys is not None:
            oprot.writeFieldBegin('idcardNumberKeys', TType.LIST, 12)
            oprot.writeListBegin(TType.STRING, len(self.idcardNumberKeys))
            for iter195 in self.idcardNumberKeys:
                oprot.writeString(iter195.encode('utf-8') if sys.version_info[0] == 2 else iter195)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmFailoverDomainInfo(object):
    """
    Attributes:
     - id
     - parentId
     - address
     - port
     - adminName
     - password
     - useSSL

    """


    def __init__(self, id=None, parentId=None, address=None, port=None, adminName=None, password=None, useSSL=None,):
        self.id = id
        self.parentId = parentId
        self.address = address
        self.port = port
        self.adminName = adminName
        self.password = password
        self.useSSL = useSSL

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.parentId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.port = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.adminName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.useSSL = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmFailoverDomainInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.parentId is not None:
            oprot.writeFieldBegin('parentId', TType.I64, 2)
            oprot.writeI64(self.parentId)
            oprot.writeFieldEnd()
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 3)
            oprot.writeString(self.address.encode('utf-8') if sys.version_info[0] == 2 else self.address)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I64, 4)
            oprot.writeI64(self.port)
            oprot.writeFieldEnd()
        if self.adminName is not None:
            oprot.writeFieldBegin('adminName', TType.STRING, 5)
            oprot.writeString(self.adminName.encode('utf-8') if sys.version_info[0] == 2 else self.adminName)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 6)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.useSSL is not None:
            oprot.writeFieldBegin('useSSL', TType.BOOL, 7)
            oprot.writeBool(self.useSSL)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        if self.parentId is None:
            raise TProtocolException(message='Required field parentId is unset!')
        if self.address is None:
            raise TProtocolException(message='Required field address is unset!')
        if self.port is None:
            raise TProtocolException(message='Required field port is unset!')
        if self.adminName is None:
            raise TProtocolException(message='Required field adminName is unset!')
        if self.password is None:
            raise TProtocolException(message='Required field password is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmDomainInfo(object):
    """
    Attributes:
     - id
     - type
     - parentId
     - name
     - ipAddress
     - port
     - adminName
     - password
     - status
     - syncStatus
     - config
     - useSSL

    """


    def __init__(self, id=None, type=None, parentId=None, name=None, ipAddress=None, port=None, adminName=None, password=None, status=None, syncStatus=None, config=None, useSSL=None,):
        self.id = id
        self.type = type
        self.parentId = parentId
        self.name = name
        self.ipAddress = ipAddress
        self.port = port
        self.adminName = adminName
        self.password = password
        self.status = status
        self.syncStatus = syncStatus
        self.config = config
        self.useSSL = useSSL

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.parentId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.ipAddress = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.port = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.adminName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.status = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.syncStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.config = ncTUsrmDomainConfig()
                    self.config.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.useSSL = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmDomainInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.parentId is not None:
            oprot.writeFieldBegin('parentId', TType.I64, 3)
            oprot.writeI64(self.parentId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 4)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.ipAddress is not None:
            oprot.writeFieldBegin('ipAddress', TType.STRING, 5)
            oprot.writeString(self.ipAddress.encode('utf-8') if sys.version_info[0] == 2 else self.ipAddress)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I64, 6)
            oprot.writeI64(self.port)
            oprot.writeFieldEnd()
        if self.adminName is not None:
            oprot.writeFieldBegin('adminName', TType.STRING, 7)
            oprot.writeString(self.adminName.encode('utf-8') if sys.version_info[0] == 2 else self.adminName)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 8)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BOOL, 9)
            oprot.writeBool(self.status)
            oprot.writeFieldEnd()
        if self.syncStatus is not None:
            oprot.writeFieldBegin('syncStatus', TType.I32, 10)
            oprot.writeI32(self.syncStatus)
            oprot.writeFieldEnd()
        if self.config is not None:
            oprot.writeFieldBegin('config', TType.STRUCT, 11)
            self.config.write(oprot)
            oprot.writeFieldEnd()
        if self.useSSL is not None:
            oprot.writeFieldBegin('useSSL', TType.BOOL, 12)
            oprot.writeBool(self.useSSL)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.parentId is None:
            raise TProtocolException(message='Required field parentId is unset!')
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.ipAddress is None:
            raise TProtocolException(message='Required field ipAddress is unset!')
        if self.port is None:
            raise TProtocolException(message='Required field port is unset!')
        if self.adminName is None:
            raise TProtocolException(message='Required field adminName is unset!')
        if self.password is None:
            raise TProtocolException(message='Required field password is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmDomainUser(object):
    """
    Attributes:
     - loginName
     - displayName
     - email
     - ouPath
     - objectGUID
     - dnPath
     - idcardNumber

    """


    def __init__(self, loginName=None, displayName=None, email=None, ouPath=None, objectGUID=None, dnPath=None, idcardNumber=None,):
        self.loginName = loginName
        self.displayName = displayName
        self.email = email
        self.ouPath = ouPath
        self.objectGUID = objectGUID
        self.dnPath = dnPath
        self.idcardNumber = idcardNumber

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.loginName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.ouPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.objectGUID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.dnPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.idcardNumber = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmDomainUser')
        if self.loginName is not None:
            oprot.writeFieldBegin('loginName', TType.STRING, 1)
            oprot.writeString(self.loginName.encode('utf-8') if sys.version_info[0] == 2 else self.loginName)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 2)
            oprot.writeString(self.displayName.encode('utf-8') if sys.version_info[0] == 2 else self.displayName)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 3)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.ouPath is not None:
            oprot.writeFieldBegin('ouPath', TType.STRING, 4)
            oprot.writeString(self.ouPath.encode('utf-8') if sys.version_info[0] == 2 else self.ouPath)
            oprot.writeFieldEnd()
        if self.objectGUID is not None:
            oprot.writeFieldBegin('objectGUID', TType.STRING, 5)
            oprot.writeString(self.objectGUID.encode('utf-8') if sys.version_info[0] == 2 else self.objectGUID)
            oprot.writeFieldEnd()
        if self.dnPath is not None:
            oprot.writeFieldBegin('dnPath', TType.STRING, 6)
            oprot.writeString(self.dnPath.encode('utf-8') if sys.version_info[0] == 2 else self.dnPath)
            oprot.writeFieldEnd()
        if self.idcardNumber is not None:
            oprot.writeFieldBegin('idcardNumber', TType.STRING, 7)
            oprot.writeString(self.idcardNumber.encode('utf-8') if sys.version_info[0] == 2 else self.idcardNumber)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmDomainOU(object):
    """
    Attributes:
     - name
     - rulerName
     - pathName
     - parentOUPath
     - objectGUID
     - importAll

    """


    def __init__(self, name=None, rulerName=None, pathName=None, parentOUPath=None, objectGUID=None, importAll=None,):
        self.name = name
        self.rulerName = rulerName
        self.pathName = pathName
        self.parentOUPath = parentOUPath
        self.objectGUID = objectGUID
        self.importAll = importAll

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.rulerName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.pathName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.parentOUPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.objectGUID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.importAll = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmDomainOU')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.rulerName is not None:
            oprot.writeFieldBegin('rulerName', TType.STRING, 2)
            oprot.writeString(self.rulerName.encode('utf-8') if sys.version_info[0] == 2 else self.rulerName)
            oprot.writeFieldEnd()
        if self.pathName is not None:
            oprot.writeFieldBegin('pathName', TType.STRING, 3)
            oprot.writeString(self.pathName.encode('utf-8') if sys.version_info[0] == 2 else self.pathName)
            oprot.writeFieldEnd()
        if self.parentOUPath is not None:
            oprot.writeFieldBegin('parentOUPath', TType.STRING, 4)
            oprot.writeString(self.parentOUPath.encode('utf-8') if sys.version_info[0] == 2 else self.parentOUPath)
            oprot.writeFieldEnd()
        if self.objectGUID is not None:
            oprot.writeFieldBegin('objectGUID', TType.STRING, 5)
            oprot.writeString(self.objectGUID.encode('utf-8') if sys.version_info[0] == 2 else self.objectGUID)
            oprot.writeFieldEnd()
        if self.importAll is not None:
            oprot.writeFieldBegin('importAll', TType.BOOL, 6)
            oprot.writeBool(self.importAll)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmDomainNode(object):
    """
    Attributes:
     - ous
     - users

    """


    def __init__(self, ous=None, users=None,):
        self.ous = ous
        self.users = users

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.ous = []
                    (_etype199, _size196) = iprot.readListBegin()
                    for _i200 in range(_size196):
                        _elem201 = ncTUsrmDomainOU()
                        _elem201.read(iprot)
                        self.ous.append(_elem201)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.users = []
                    (_etype205, _size202) = iprot.readListBegin()
                    for _i206 in range(_size202):
                        _elem207 = ncTUsrmDomainUser()
                        _elem207.read(iprot)
                        self.users.append(_elem207)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmDomainNode')
        if self.ous is not None:
            oprot.writeFieldBegin('ous', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.ous))
            for iter208 in self.ous:
                iter208.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.users is not None:
            oprot.writeFieldBegin('users', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.users))
            for iter209 in self.users:
                iter209.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmImportOption(object):
    """
    Attributes:
     - userEmail
     - userDisplayName
     - userCover
     - userIdcardNumber
     - departmentId
     - spaceSize
     - userStatus
     - expireTime

    """


    def __init__(self, userEmail=None, userDisplayName=None, userCover=None, userIdcardNumber=None, departmentId=None, spaceSize=None, userStatus=None, expireTime=None,):
        self.userEmail = userEmail
        self.userDisplayName = userDisplayName
        self.userCover = userCover
        self.userIdcardNumber = userIdcardNumber
        self.departmentId = departmentId
        self.spaceSize = spaceSize
        self.userStatus = userStatus
        self.expireTime = expireTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.userEmail = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.userDisplayName = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.userCover = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.userIdcardNumber = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.departmentId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.spaceSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.userStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.expireTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmImportOption')
        if self.userEmail is not None:
            oprot.writeFieldBegin('userEmail', TType.BOOL, 1)
            oprot.writeBool(self.userEmail)
            oprot.writeFieldEnd()
        if self.userDisplayName is not None:
            oprot.writeFieldBegin('userDisplayName', TType.BOOL, 2)
            oprot.writeBool(self.userDisplayName)
            oprot.writeFieldEnd()
        if self.userCover is not None:
            oprot.writeFieldBegin('userCover', TType.BOOL, 3)
            oprot.writeBool(self.userCover)
            oprot.writeFieldEnd()
        if self.userIdcardNumber is not None:
            oprot.writeFieldBegin('userIdcardNumber', TType.BOOL, 4)
            oprot.writeBool(self.userIdcardNumber)
            oprot.writeFieldEnd()
        if self.departmentId is not None:
            oprot.writeFieldBegin('departmentId', TType.STRING, 5)
            oprot.writeString(self.departmentId.encode('utf-8') if sys.version_info[0] == 2 else self.departmentId)
            oprot.writeFieldEnd()
        if self.spaceSize is not None:
            oprot.writeFieldBegin('spaceSize', TType.I64, 6)
            oprot.writeI64(self.spaceSize)
            oprot.writeFieldEnd()
        if self.userStatus is not None:
            oprot.writeFieldBegin('userStatus', TType.I32, 7)
            oprot.writeI32(self.userStatus)
            oprot.writeFieldEnd()
        if self.expireTime is not None:
            oprot.writeFieldBegin('expireTime', TType.I32, 8)
            oprot.writeI32(self.expireTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.userEmail is None:
            raise TProtocolException(message='Required field userEmail is unset!')
        if self.userDisplayName is None:
            raise TProtocolException(message='Required field userDisplayName is unset!')
        if self.userCover is None:
            raise TProtocolException(message='Required field userCover is unset!')
        if self.userIdcardNumber is None:
            raise TProtocolException(message='Required field userIdcardNumber is unset!')
        if self.departmentId is None:
            raise TProtocolException(message='Required field departmentId is unset!')
        if self.userStatus is None:
            raise TProtocolException(message='Required field userStatus is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmImportContent(object):
    """
    Attributes:
     - domain
     - domainName
     - users
     - ous

    """


    def __init__(self, domain=None, domainName=None, users=None, ous=None,):
        self.domain = domain
        self.domainName = domainName
        self.users = users
        self.ous = ous

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.domain = ncTUsrmDomainInfo()
                    self.domain.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.domainName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.users = []
                    (_etype213, _size210) = iprot.readListBegin()
                    for _i214 in range(_size210):
                        _elem215 = ncTUsrmDomainUser()
                        _elem215.read(iprot)
                        self.users.append(_elem215)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.ous = []
                    (_etype219, _size216) = iprot.readListBegin()
                    for _i220 in range(_size216):
                        _elem221 = ncTUsrmDomainOU()
                        _elem221.read(iprot)
                        self.ous.append(_elem221)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmImportContent')
        if self.domain is not None:
            oprot.writeFieldBegin('domain', TType.STRUCT, 1)
            self.domain.write(oprot)
            oprot.writeFieldEnd()
        if self.domainName is not None:
            oprot.writeFieldBegin('domainName', TType.STRING, 2)
            oprot.writeString(self.domainName.encode('utf-8') if sys.version_info[0] == 2 else self.domainName)
            oprot.writeFieldEnd()
        if self.users is not None:
            oprot.writeFieldBegin('users', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.users))
            for iter222 in self.users:
                iter222.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ous is not None:
            oprot.writeFieldBegin('ous', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.ous))
            for iter223 in self.ous:
                iter223.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmImportResult(object):
    """
    Attributes:
     - totalNum
     - successNum
     - failNum
     - failInfos
     - disableNum

    """


    def __init__(self, totalNum=None, successNum=None, failNum=None, failInfos=None, disableNum=None,):
        self.totalNum = totalNum
        self.successNum = successNum
        self.failNum = failNum
        self.failInfos = failInfos
        self.disableNum = disableNum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.totalNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.successNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.failNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.failInfos = []
                    (_etype227, _size224) = iprot.readListBegin()
                    for _i228 in range(_size224):
                        _elem229 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.failInfos.append(_elem229)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.disableNum = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmImportResult')
        if self.totalNum is not None:
            oprot.writeFieldBegin('totalNum', TType.I64, 1)
            oprot.writeI64(self.totalNum)
            oprot.writeFieldEnd()
        if self.successNum is not None:
            oprot.writeFieldBegin('successNum', TType.I64, 2)
            oprot.writeI64(self.successNum)
            oprot.writeFieldEnd()
        if self.failNum is not None:
            oprot.writeFieldBegin('failNum', TType.I64, 3)
            oprot.writeI64(self.failNum)
            oprot.writeFieldEnd()
        if self.failInfos is not None:
            oprot.writeFieldBegin('failInfos', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.failInfos))
            for iter230 in self.failInfos:
                oprot.writeString(iter230.encode('utf-8') if sys.version_info[0] == 2 else iter230)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.disableNum is not None:
            oprot.writeFieldBegin('disableNum', TType.I64, 5)
            oprot.writeI64(self.disableNum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTBatchUsersFile(object):
    """
    Attributes:
     - fileName
     - data

    """


    def __init__(self, fileName=None, data=None,):
        self.fileName = fileName
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTBatchUsersFile')
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 1)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRING, 2)
            oprot.writeBinary(self.data)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTImportFailInfo(object):
    """
    Attributes:
     - index
     - userInfo
     - errorMessage
     - errorID

    """


    def __init__(self, index=None, userInfo=None, errorMessage=None, errorID=None,):
        self.index = index
        self.userInfo = userInfo
        self.errorMessage = errorMessage
        self.errorID = errorID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.index = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.userInfo = ncTUsrmUserInfo()
                    self.userInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorMessage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.errorID = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTImportFailInfo')
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.I64, 1)
            oprot.writeI64(self.index)
            oprot.writeFieldEnd()
        if self.userInfo is not None:
            oprot.writeFieldBegin('userInfo', TType.STRUCT, 2)
            self.userInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.errorMessage is not None:
            oprot.writeFieldBegin('errorMessage', TType.STRING, 3)
            oprot.writeString(self.errorMessage.encode('utf-8') if sys.version_info[0] == 2 else self.errorMessage)
            oprot.writeFieldEnd()
        if self.errorID is not None:
            oprot.writeFieldBegin('errorID', TType.I64, 4)
            oprot.writeI64(self.errorID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTOpermOnlineUserInfo(object):
    """
    Attributes:
     - time
     - count

    """


    def __init__(self, time=None, count=None,):
        self.time = time
        self.count = count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.count = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTOpermOnlineUserInfo')
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.STRING, 1)
            oprot.writeString(self.time.encode('utf-8') if sys.version_info[0] == 2 else self.time)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I64, 2)
            oprot.writeI64(self.count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTPersonGroup(object):
    """
    Attributes:
     - groupId
     - groupName
     - personCount

    """


    def __init__(self, groupId=None, groupName=None, personCount=None,):
        self.groupId = groupId
        self.groupName = groupName
        self.personCount = personCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.groupId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.groupName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.personCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTPersonGroup')
        if self.groupId is not None:
            oprot.writeFieldBegin('groupId', TType.STRING, 1)
            oprot.writeString(self.groupId.encode('utf-8') if sys.version_info[0] == 2 else self.groupId)
            oprot.writeFieldEnd()
        if self.groupName is not None:
            oprot.writeFieldBegin('groupName', TType.STRING, 2)
            oprot.writeString(self.groupName.encode('utf-8') if sys.version_info[0] == 2 else self.groupName)
            oprot.writeFieldEnd()
        if self.personCount is not None:
            oprot.writeFieldBegin('personCount', TType.I64, 3)
            oprot.writeI64(self.personCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTSearchPersonGroup(object):
    """
    Attributes:
     - userId
     - loginName
     - displayName
     - groupId
     - groupName

    """


    def __init__(self, userId=None, loginName=None, displayName=None, groupId=None, groupName=None,):
        self.userId = userId
        self.loginName = loginName
        self.displayName = displayName
        self.groupId = groupId
        self.groupName = groupName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.loginName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.groupId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.groupName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTSearchPersonGroup')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.loginName is not None:
            oprot.writeFieldBegin('loginName', TType.STRING, 2)
            oprot.writeString(self.loginName.encode('utf-8') if sys.version_info[0] == 2 else self.loginName)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 3)
            oprot.writeString(self.displayName.encode('utf-8') if sys.version_info[0] == 2 else self.displayName)
            oprot.writeFieldEnd()
        if self.groupId is not None:
            oprot.writeFieldBegin('groupId', TType.STRING, 4)
            oprot.writeString(self.groupId.encode('utf-8') if sys.version_info[0] == 2 else self.groupId)
            oprot.writeFieldEnd()
        if self.groupName is not None:
            oprot.writeFieldBegin('groupName', TType.STRING, 5)
            oprot.writeString(self.groupName.encode('utf-8') if sys.version_info[0] == 2 else self.groupName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTOEMInfo(object):
    """
    Attributes:
     - section
     - option
     - value

    """


    def __init__(self, section=None, option=None, value=None,):
        self.section = section
        self.option = option
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.section = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.option = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.value = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTOEMInfo')
        if self.section is not None:
            oprot.writeFieldBegin('section', TType.STRING, 1)
            oprot.writeString(self.section.encode('utf-8') if sys.version_info[0] == 2 else self.section)
            oprot.writeFieldEnd()
        if self.option is not None:
            oprot.writeFieldBegin('option', TType.STRING, 2)
            oprot.writeString(self.option.encode('utf-8') if sys.version_info[0] == 2 else self.option)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 3)
            oprot.writeBinary(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTSmtpSrvConf(object):
    """
    Attributes:
     - server
     - safeMode
     - port
     - email
     - password
     - openRelay

    """


    def __init__(self, server=None, safeMode=None, port=None, email=None, password=None, openRelay=None,):
        self.server = server
        self.safeMode = safeMode
        self.port = port
        self.email = email
        self.password = password
        self.openRelay = openRelay

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.server = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.safeMode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.openRelay = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTSmtpSrvConf')
        if self.server is not None:
            oprot.writeFieldBegin('server', TType.STRING, 1)
            oprot.writeString(self.server.encode('utf-8') if sys.version_info[0] == 2 else self.server)
            oprot.writeFieldEnd()
        if self.safeMode is not None:
            oprot.writeFieldBegin('safeMode', TType.BYTE, 2)
            oprot.writeByte(self.safeMode)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 3)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 4)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 5)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.openRelay is not None:
            oprot.writeFieldBegin('openRelay', TType.BOOL, 6)
            oprot.writeBool(self.openRelay)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAlarmConfig(object):
    """
    Attributes:
     - infoConfig
     - warnConfig
     - emailToList

    """


    def __init__(self, infoConfig=None, warnConfig=None, emailToList=None,):
        self.infoConfig = infoConfig
        self.warnConfig = warnConfig
        self.emailToList = emailToList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.infoConfig = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.warnConfig = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.emailToList = []
                    (_etype234, _size231) = iprot.readListBegin()
                    for _i235 in range(_size231):
                        _elem236 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.emailToList.append(_elem236)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAlarmConfig')
        if self.infoConfig is not None:
            oprot.writeFieldBegin('infoConfig', TType.I32, 1)
            oprot.writeI32(self.infoConfig)
            oprot.writeFieldEnd()
        if self.warnConfig is not None:
            oprot.writeFieldBegin('warnConfig', TType.I32, 2)
            oprot.writeI32(self.warnConfig)
            oprot.writeFieldEnd()
        if self.emailToList is not None:
            oprot.writeFieldBegin('emailToList', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.emailToList))
            for iter237 in self.emailToList:
                oprot.writeString(iter237.encode('utf-8') if sys.version_info[0] == 2 else iter237)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTSetPortResult(object):
    """
    Attributes:
     - nodename
     - suc
     - msg

    """


    def __init__(self, nodename=None, suc=None, msg=None,):
        self.nodename = nodename
        self.suc = suc
        self.msg = msg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.nodename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.suc = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.msg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTSetPortResult')
        if self.nodename is not None:
            oprot.writeFieldBegin('nodename', TType.STRING, 1)
            oprot.writeString(self.nodename.encode('utf-8') if sys.version_info[0] == 2 else self.nodename)
            oprot.writeFieldEnd()
        if self.suc is not None:
            oprot.writeFieldBegin('suc', TType.BOOL, 2)
            oprot.writeBool(self.suc)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 3)
            oprot.writeString(self.msg.encode('utf-8') if sys.version_info[0] == 2 else self.msg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTFindShareInfo(object):
    """
    Attributes:
     - sharerType
     - sharerId
     - sharerName

    """


    def __init__(self, sharerType=None, sharerId=None, sharerName=None,):
        self.sharerType = sharerType
        self.sharerId = sharerId
        self.sharerName = sharerName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sharerType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sharerId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sharerName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTFindShareInfo')
        if self.sharerType is not None:
            oprot.writeFieldBegin('sharerType', TType.I32, 1)
            oprot.writeI32(self.sharerType)
            oprot.writeFieldEnd()
        if self.sharerId is not None:
            oprot.writeFieldBegin('sharerId', TType.STRING, 2)
            oprot.writeString(self.sharerId.encode('utf-8') if sys.version_info[0] == 2 else self.sharerId)
            oprot.writeFieldEnd()
        if self.sharerName is not None:
            oprot.writeFieldBegin('sharerName', TType.STRING, 3)
            oprot.writeString(self.sharerName.encode('utf-8') if sys.version_info[0] == 2 else self.sharerName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTLinkShareInfo(object):
    """
    Attributes:
     - sharerType
     - sharerId
     - sharerName

    """


    def __init__(self, sharerType=None, sharerId=None, sharerName=None,):
        self.sharerType = sharerType
        self.sharerId = sharerId
        self.sharerName = sharerName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sharerType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sharerId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sharerName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLinkShareInfo')
        if self.sharerType is not None:
            oprot.writeFieldBegin('sharerType', TType.I32, 1)
            oprot.writeI32(self.sharerType)
            oprot.writeFieldEnd()
        if self.sharerId is not None:
            oprot.writeFieldBegin('sharerId', TType.STRING, 2)
            oprot.writeString(self.sharerId.encode('utf-8') if sys.version_info[0] == 2 else self.sharerId)
            oprot.writeFieldEnd()
        if self.sharerName is not None:
            oprot.writeFieldBegin('sharerName', TType.STRING, 3)
            oprot.writeString(self.sharerName.encode('utf-8') if sys.version_info[0] == 2 else self.sharerName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTShareObjInfo(object):
    """
    Attributes:
     - id
     - name
     - parentId
     - parentName

    """


    def __init__(self, id=None, name=None, parentId=None, parentName=None,):
        self.id = id
        self.name = name
        self.parentId = parentId
        self.parentName = parentName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.parentId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.parentName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTShareObjInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.parentId is not None:
            oprot.writeFieldBegin('parentId', TType.STRING, 3)
            oprot.writeString(self.parentId.encode('utf-8') if sys.version_info[0] == 2 else self.parentId)
            oprot.writeFieldEnd()
        if self.parentName is not None:
            oprot.writeFieldBegin('parentName', TType.STRING, 4)
            oprot.writeString(self.parentName.encode('utf-8') if sys.version_info[0] == 2 else self.parentName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTPermShareInfo(object):
    """
    Attributes:
     - strategyId
     - sharerUsers
     - sharerDepts
     - scopeUsers
     - scopeDepts
     - status

    """


    def __init__(self, strategyId=None, sharerUsers=None, sharerDepts=None, scopeUsers=None, scopeDepts=None, status=None,):
        self.strategyId = strategyId
        self.sharerUsers = sharerUsers
        self.sharerDepts = sharerDepts
        self.scopeUsers = scopeUsers
        self.scopeDepts = scopeDepts
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.strategyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.sharerUsers = []
                    (_etype241, _size238) = iprot.readListBegin()
                    for _i242 in range(_size238):
                        _elem243 = ncTShareObjInfo()
                        _elem243.read(iprot)
                        self.sharerUsers.append(_elem243)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.sharerDepts = []
                    (_etype247, _size244) = iprot.readListBegin()
                    for _i248 in range(_size244):
                        _elem249 = ncTShareObjInfo()
                        _elem249.read(iprot)
                        self.sharerDepts.append(_elem249)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.scopeUsers = []
                    (_etype253, _size250) = iprot.readListBegin()
                    for _i254 in range(_size250):
                        _elem255 = ncTShareObjInfo()
                        _elem255.read(iprot)
                        self.scopeUsers.append(_elem255)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.scopeDepts = []
                    (_etype259, _size256) = iprot.readListBegin()
                    for _i260 in range(_size256):
                        _elem261 = ncTShareObjInfo()
                        _elem261.read(iprot)
                        self.scopeDepts.append(_elem261)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.status = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTPermShareInfo')
        if self.strategyId is not None:
            oprot.writeFieldBegin('strategyId', TType.STRING, 1)
            oprot.writeString(self.strategyId.encode('utf-8') if sys.version_info[0] == 2 else self.strategyId)
            oprot.writeFieldEnd()
        if self.sharerUsers is not None:
            oprot.writeFieldBegin('sharerUsers', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.sharerUsers))
            for iter262 in self.sharerUsers:
                iter262.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sharerDepts is not None:
            oprot.writeFieldBegin('sharerDepts', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.sharerDepts))
            for iter263 in self.sharerDepts:
                iter263.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.scopeUsers is not None:
            oprot.writeFieldBegin('scopeUsers', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.scopeUsers))
            for iter264 in self.scopeUsers:
                iter264.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.scopeDepts is not None:
            oprot.writeFieldBegin('scopeDepts', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.scopeDepts))
            for iter265 in self.scopeDepts:
                iter265.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BOOL, 6)
            oprot.writeBool(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAddLeakProofStrategyParam(object):
    """
    Attributes:
     - accessorId
     - accessorType
     - permValue

    """


    def __init__(self, accessorId=None, accessorType=None, permValue=None,):
        self.accessorId = accessorId
        self.accessorType = accessorType
        self.permValue = permValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.accessorId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.accessorType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.permValue = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAddLeakProofStrategyParam')
        if self.accessorId is not None:
            oprot.writeFieldBegin('accessorId', TType.STRING, 1)
            oprot.writeString(self.accessorId.encode('utf-8') if sys.version_info[0] == 2 else self.accessorId)
            oprot.writeFieldEnd()
        if self.accessorType is not None:
            oprot.writeFieldBegin('accessorType', TType.I32, 2)
            oprot.writeI32(self.accessorType)
            oprot.writeFieldEnd()
        if self.permValue is not None:
            oprot.writeFieldBegin('permValue', TType.I32, 3)
            oprot.writeI32(self.permValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEditLeakProofStrategyParam(object):
    """
    Attributes:
     - strategyId
     - permValue

    """


    def __init__(self, strategyId=None, permValue=None,):
        self.strategyId = strategyId
        self.permValue = permValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.strategyId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.permValue = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEditLeakProofStrategyParam')
        if self.strategyId is not None:
            oprot.writeFieldBegin('strategyId', TType.I64, 1)
            oprot.writeI64(self.strategyId)
            oprot.writeFieldEnd()
        if self.permValue is not None:
            oprot.writeFieldBegin('permValue', TType.I32, 2)
            oprot.writeI32(self.permValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTLeakProofStrategyInfo(object):
    """
    Attributes:
     - strategyId
     - accessorId
     - accessorType
     - permValue
     - accessorName

    """


    def __init__(self, strategyId=None, accessorId=None, accessorType=None, permValue=None, accessorName=None,):
        self.strategyId = strategyId
        self.accessorId = accessorId
        self.accessorType = accessorType
        self.permValue = permValue
        self.accessorName = accessorName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.strategyId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.accessorId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.accessorType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.permValue = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.accessorName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLeakProofStrategyInfo')
        if self.strategyId is not None:
            oprot.writeFieldBegin('strategyId', TType.I64, 1)
            oprot.writeI64(self.strategyId)
            oprot.writeFieldEnd()
        if self.accessorId is not None:
            oprot.writeFieldBegin('accessorId', TType.STRING, 2)
            oprot.writeString(self.accessorId.encode('utf-8') if sys.version_info[0] == 2 else self.accessorId)
            oprot.writeFieldEnd()
        if self.accessorType is not None:
            oprot.writeFieldBegin('accessorType', TType.I32, 3)
            oprot.writeI32(self.accessorType)
            oprot.writeFieldEnd()
        if self.permValue is not None:
            oprot.writeFieldBegin('permValue', TType.I32, 4)
            oprot.writeI32(self.permValue)
            oprot.writeFieldEnd()
        if self.accessorName is not None:
            oprot.writeFieldBegin('accessorName', TType.STRING, 5)
            oprot.writeString(self.accessorName.encode('utf-8') if sys.version_info[0] == 2 else self.accessorName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTEOSSPortInfo(object):
    """
    Attributes:
     - httpPort
     - httpsPort

    """


    def __init__(self, httpPort=None, httpsPort=None,):
        self.httpPort = httpPort
        self.httpsPort = httpsPort

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.httpPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.httpsPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTEOSSPortInfo')
        if self.httpPort is not None:
            oprot.writeFieldBegin('httpPort', TType.I32, 1)
            oprot.writeI32(self.httpPort)
            oprot.writeFieldEnd()
        if self.httpsPort is not None:
            oprot.writeFieldBegin('httpsPort', TType.I32, 2)
            oprot.writeI32(self.httpsPort)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTClientPackageInfo(object):
    """
    Attributes:
     - ostype
     - name
     - size
     - version
     - time
     - mode
     - url

    """


    def __init__(self, ostype=None, name=None, size=None, version=None, time=None, mode=None, url=None,):
        self.ostype = ostype
        self.name = name
        self.size = size
        self.version = version
        self.time = time
        self.mode = mode
        self.url = url

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.ostype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.mode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTClientPackageInfo')
        if self.ostype is not None:
            oprot.writeFieldBegin('ostype', TType.I32, 1)
            oprot.writeI32(self.ostype)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 3)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 4)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.STRING, 5)
            oprot.writeString(self.time.encode('utf-8') if sys.version_info[0] == 2 else self.time)
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.BOOL, 6)
            oprot.writeBool(self.mode)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 7)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ostype is None:
            raise TProtocolException(message='Required field ostype is unset!')
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.size is None:
            raise TProtocolException(message='Required field size is unset!')
        if self.version is None:
            raise TProtocolException(message='Required field version is unset!')
        if self.time is None:
            raise TProtocolException(message='Required field time is unset!')
        if self.mode is None:
            raise TProtocolException(message='Required field mode is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTCertInfo(object):
    """
    Attributes:
     - issuer
     - accepter
     - startDate
     - expireDate
     - hasExpired

    """


    def __init__(self, issuer=None, accepter=None, startDate=None, expireDate=None, hasExpired=None,):
        self.issuer = issuer
        self.accepter = accepter
        self.startDate = startDate
        self.expireDate = expireDate
        self.hasExpired = hasExpired

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.issuer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.accepter = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.startDate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.expireDate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.hasExpired = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTCertInfo')
        if self.issuer is not None:
            oprot.writeFieldBegin('issuer', TType.STRING, 1)
            oprot.writeString(self.issuer.encode('utf-8') if sys.version_info[0] == 2 else self.issuer)
            oprot.writeFieldEnd()
        if self.accepter is not None:
            oprot.writeFieldBegin('accepter', TType.STRING, 2)
            oprot.writeString(self.accepter.encode('utf-8') if sys.version_info[0] == 2 else self.accepter)
            oprot.writeFieldEnd()
        if self.startDate is not None:
            oprot.writeFieldBegin('startDate', TType.STRING, 3)
            oprot.writeString(self.startDate.encode('utf-8') if sys.version_info[0] == 2 else self.startDate)
            oprot.writeFieldEnd()
        if self.expireDate is not None:
            oprot.writeFieldBegin('expireDate', TType.STRING, 4)
            oprot.writeString(self.expireDate.encode('utf-8') if sys.version_info[0] == 2 else self.expireDate)
            oprot.writeFieldEnd()
        if self.hasExpired is not None:
            oprot.writeFieldBegin('hasExpired', TType.BOOL, 5)
            oprot.writeBool(self.hasExpired)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTThirdDBInfo(object):
    """
    Attributes:
     - id
     - name
     - ip
     - port
     - admin
     - password
     - database
     - charset
     - dbType
     - status

    """


    def __init__(self, id=None, name=None, ip=None, port=None, admin=None, password=None, database=None, charset=None, dbType=None, status=None,):
        self.id = id
        self.name = name
        self.ip = ip
        self.port = port
        self.admin = admin
        self.password = password
        self.database = database
        self.charset = charset
        self.dbType = dbType
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.port = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.admin = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.database = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.charset = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.dbType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.status = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTThirdDBInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 3)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.STRING, 4)
            oprot.writeString(self.port.encode('utf-8') if sys.version_info[0] == 2 else self.port)
            oprot.writeFieldEnd()
        if self.admin is not None:
            oprot.writeFieldBegin('admin', TType.STRING, 5)
            oprot.writeString(self.admin.encode('utf-8') if sys.version_info[0] == 2 else self.admin)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 6)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.database is not None:
            oprot.writeFieldBegin('database', TType.STRING, 7)
            oprot.writeString(self.database.encode('utf-8') if sys.version_info[0] == 2 else self.database)
            oprot.writeFieldEnd()
        if self.charset is not None:
            oprot.writeFieldBegin('charset', TType.STRING, 8)
            oprot.writeString(self.charset.encode('utf-8') if sys.version_info[0] == 2 else self.charset)
            oprot.writeFieldEnd()
        if self.dbType is not None:
            oprot.writeFieldBegin('dbType', TType.I32, 9)
            oprot.writeI32(self.dbType)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BOOL, 10)
            oprot.writeBool(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTThirdDepartTableInfo(object):
    """
    Attributes:
     - thirdDbId
     - tableId
     - tableName
     - departmentIdField
     - departmentNameField
     - departmentPriorityField
     - filter
     - customSubGroupNames

    """


    def __init__(self, thirdDbId=None, tableId=None, tableName=None, departmentIdField=None, departmentNameField=None, departmentPriorityField=None, filter=None, customSubGroupNames=None,):
        self.thirdDbId = thirdDbId
        self.tableId = tableId
        self.tableName = tableName
        self.departmentIdField = departmentIdField
        self.departmentNameField = departmentNameField
        self.departmentPriorityField = departmentPriorityField
        self.filter = filter
        self.customSubGroupNames = customSubGroupNames

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.thirdDbId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.tableId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.tableName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.departmentIdField = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.departmentNameField = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.departmentPriorityField = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.filter = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.customSubGroupNames = []
                    (_etype269, _size266) = iprot.readListBegin()
                    for _i270 in range(_size266):
                        _elem271 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.customSubGroupNames.append(_elem271)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTThirdDepartTableInfo')
        if self.thirdDbId is not None:
            oprot.writeFieldBegin('thirdDbId', TType.STRING, 1)
            oprot.writeString(self.thirdDbId.encode('utf-8') if sys.version_info[0] == 2 else self.thirdDbId)
            oprot.writeFieldEnd()
        if self.tableId is not None:
            oprot.writeFieldBegin('tableId', TType.STRING, 2)
            oprot.writeString(self.tableId.encode('utf-8') if sys.version_info[0] == 2 else self.tableId)
            oprot.writeFieldEnd()
        if self.tableName is not None:
            oprot.writeFieldBegin('tableName', TType.STRING, 3)
            oprot.writeString(self.tableName.encode('utf-8') if sys.version_info[0] == 2 else self.tableName)
            oprot.writeFieldEnd()
        if self.departmentIdField is not None:
            oprot.writeFieldBegin('departmentIdField', TType.STRING, 4)
            oprot.writeString(self.departmentIdField.encode('utf-8') if sys.version_info[0] == 2 else self.departmentIdField)
            oprot.writeFieldEnd()
        if self.departmentNameField is not None:
            oprot.writeFieldBegin('departmentNameField', TType.STRING, 5)
            oprot.writeString(self.departmentNameField.encode('utf-8') if sys.version_info[0] == 2 else self.departmentNameField)
            oprot.writeFieldEnd()
        if self.departmentPriorityField is not None:
            oprot.writeFieldBegin('departmentPriorityField', TType.STRING, 6)
            oprot.writeString(self.departmentPriorityField.encode('utf-8') if sys.version_info[0] == 2 else self.departmentPriorityField)
            oprot.writeFieldEnd()
        if self.filter is not None:
            oprot.writeFieldBegin('filter', TType.STRING, 7)
            oprot.writeString(self.filter.encode('utf-8') if sys.version_info[0] == 2 else self.filter)
            oprot.writeFieldEnd()
        if self.customSubGroupNames is not None:
            oprot.writeFieldBegin('customSubGroupNames', TType.LIST, 8)
            oprot.writeListBegin(TType.STRING, len(self.customSubGroupNames))
            for iter272 in self.customSubGroupNames:
                oprot.writeString(iter272.encode('utf-8') if sys.version_info[0] == 2 else iter272)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTThirdDepartRelationTableInfo(object):
    """
    Attributes:
     - thirdDbId
     - tableId
     - tableName
     - departmentIdField
     - parentDepartmentIdField
     - parentCustomGroupTableId
     - parentCustomGroupName
     - filter

    """


    def __init__(self, thirdDbId=None, tableId=None, tableName=None, departmentIdField=None, parentDepartmentIdField=None, parentCustomGroupTableId=None, parentCustomGroupName=None, filter=None,):
        self.thirdDbId = thirdDbId
        self.tableId = tableId
        self.tableName = tableName
        self.departmentIdField = departmentIdField
        self.parentDepartmentIdField = parentDepartmentIdField
        self.parentCustomGroupTableId = parentCustomGroupTableId
        self.parentCustomGroupName = parentCustomGroupName
        self.filter = filter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.thirdDbId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.tableId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.tableName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.departmentIdField = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.parentDepartmentIdField = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.parentCustomGroupTableId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.parentCustomGroupName = []
                    (_etype276, _size273) = iprot.readListBegin()
                    for _i277 in range(_size273):
                        _elem278 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.parentCustomGroupName.append(_elem278)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.filter = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTThirdDepartRelationTableInfo')
        if self.thirdDbId is not None:
            oprot.writeFieldBegin('thirdDbId', TType.STRING, 1)
            oprot.writeString(self.thirdDbId.encode('utf-8') if sys.version_info[0] == 2 else self.thirdDbId)
            oprot.writeFieldEnd()
        if self.tableId is not None:
            oprot.writeFieldBegin('tableId', TType.STRING, 2)
            oprot.writeString(self.tableId.encode('utf-8') if sys.version_info[0] == 2 else self.tableId)
            oprot.writeFieldEnd()
        if self.tableName is not None:
            oprot.writeFieldBegin('tableName', TType.STRING, 3)
            oprot.writeString(self.tableName.encode('utf-8') if sys.version_info[0] == 2 else self.tableName)
            oprot.writeFieldEnd()
        if self.departmentIdField is not None:
            oprot.writeFieldBegin('departmentIdField', TType.STRING, 4)
            oprot.writeString(self.departmentIdField.encode('utf-8') if sys.version_info[0] == 2 else self.departmentIdField)
            oprot.writeFieldEnd()
        if self.parentDepartmentIdField is not None:
            oprot.writeFieldBegin('parentDepartmentIdField', TType.STRING, 5)
            oprot.writeString(self.parentDepartmentIdField.encode('utf-8') if sys.version_info[0] == 2 else self.parentDepartmentIdField)
            oprot.writeFieldEnd()
        if self.parentCustomGroupTableId is not None:
            oprot.writeFieldBegin('parentCustomGroupTableId', TType.STRING, 6)
            oprot.writeString(self.parentCustomGroupTableId.encode('utf-8') if sys.version_info[0] == 2 else self.parentCustomGroupTableId)
            oprot.writeFieldEnd()
        if self.parentCustomGroupName is not None:
            oprot.writeFieldBegin('parentCustomGroupName', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.parentCustomGroupName))
            for iter279 in self.parentCustomGroupName:
                oprot.writeString(iter279.encode('utf-8') if sys.version_info[0] == 2 else iter279)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.filter is not None:
            oprot.writeFieldBegin('filter', TType.STRING, 8)
            oprot.writeString(self.filter.encode('utf-8') if sys.version_info[0] == 2 else self.filter)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTThirdUserTableInfo(object):
    """
    Attributes:
     - thirdDbId
     - tableId
     - tableName
     - userIdField
     - userLoginNameField
     - userDisplayNameField
     - userEmailField
     - userPasswordField
     - userStatusField
     - userPriorityField
     - filter

    """


    def __init__(self, thirdDbId=None, tableId=None, tableName=None, userIdField=None, userLoginNameField=None, userDisplayNameField=None, userEmailField=None, userPasswordField=None, userStatusField=None, userPriorityField=None, filter=None,):
        self.thirdDbId = thirdDbId
        self.tableId = tableId
        self.tableName = tableName
        self.userIdField = userIdField
        self.userLoginNameField = userLoginNameField
        self.userDisplayNameField = userDisplayNameField
        self.userEmailField = userEmailField
        self.userPasswordField = userPasswordField
        self.userStatusField = userStatusField
        self.userPriorityField = userPriorityField
        self.filter = filter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.thirdDbId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.tableId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.tableName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.userIdField = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.userLoginNameField = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.userDisplayNameField = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.userEmailField = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.userPasswordField = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.userStatusField = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.userPriorityField = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.filter = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTThirdUserTableInfo')
        if self.thirdDbId is not None:
            oprot.writeFieldBegin('thirdDbId', TType.STRING, 1)
            oprot.writeString(self.thirdDbId.encode('utf-8') if sys.version_info[0] == 2 else self.thirdDbId)
            oprot.writeFieldEnd()
        if self.tableId is not None:
            oprot.writeFieldBegin('tableId', TType.STRING, 2)
            oprot.writeString(self.tableId.encode('utf-8') if sys.version_info[0] == 2 else self.tableId)
            oprot.writeFieldEnd()
        if self.tableName is not None:
            oprot.writeFieldBegin('tableName', TType.STRING, 3)
            oprot.writeString(self.tableName.encode('utf-8') if sys.version_info[0] == 2 else self.tableName)
            oprot.writeFieldEnd()
        if self.userIdField is not None:
            oprot.writeFieldBegin('userIdField', TType.STRING, 4)
            oprot.writeString(self.userIdField.encode('utf-8') if sys.version_info[0] == 2 else self.userIdField)
            oprot.writeFieldEnd()
        if self.userLoginNameField is not None:
            oprot.writeFieldBegin('userLoginNameField', TType.STRING, 5)
            oprot.writeString(self.userLoginNameField.encode('utf-8') if sys.version_info[0] == 2 else self.userLoginNameField)
            oprot.writeFieldEnd()
        if self.userDisplayNameField is not None:
            oprot.writeFieldBegin('userDisplayNameField', TType.STRING, 6)
            oprot.writeString(self.userDisplayNameField.encode('utf-8') if sys.version_info[0] == 2 else self.userDisplayNameField)
            oprot.writeFieldEnd()
        if self.userEmailField is not None:
            oprot.writeFieldBegin('userEmailField', TType.STRING, 7)
            oprot.writeString(self.userEmailField.encode('utf-8') if sys.version_info[0] == 2 else self.userEmailField)
            oprot.writeFieldEnd()
        if self.userPasswordField is not None:
            oprot.writeFieldBegin('userPasswordField', TType.STRING, 8)
            oprot.writeString(self.userPasswordField.encode('utf-8') if sys.version_info[0] == 2 else self.userPasswordField)
            oprot.writeFieldEnd()
        if self.userStatusField is not None:
            oprot.writeFieldBegin('userStatusField', TType.STRING, 9)
            oprot.writeString(self.userStatusField.encode('utf-8') if sys.version_info[0] == 2 else self.userStatusField)
            oprot.writeFieldEnd()
        if self.userPriorityField is not None:
            oprot.writeFieldBegin('userPriorityField', TType.STRING, 10)
            oprot.writeString(self.userPriorityField.encode('utf-8') if sys.version_info[0] == 2 else self.userPriorityField)
            oprot.writeFieldEnd()
        if self.filter is not None:
            oprot.writeFieldBegin('filter', TType.STRING, 11)
            oprot.writeString(self.filter.encode('utf-8') if sys.version_info[0] == 2 else self.filter)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTThirdUserDepartRelationTableInfo(object):
    """
    Attributes:
     - thirdDbId
     - tableId
     - tableName
     - userIdField
     - parentDepartmentIdField
     - parentCustomGroupTableId
     - parentCustomGroupName
     - filter

    """


    def __init__(self, thirdDbId=None, tableId=None, tableName=None, userIdField=None, parentDepartmentIdField=None, parentCustomGroupTableId=None, parentCustomGroupName=None, filter=None,):
        self.thirdDbId = thirdDbId
        self.tableId = tableId
        self.tableName = tableName
        self.userIdField = userIdField
        self.parentDepartmentIdField = parentDepartmentIdField
        self.parentCustomGroupTableId = parentCustomGroupTableId
        self.parentCustomGroupName = parentCustomGroupName
        self.filter = filter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.thirdDbId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.tableId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.tableName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.userIdField = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.parentDepartmentIdField = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.parentCustomGroupTableId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.parentCustomGroupName = []
                    (_etype283, _size280) = iprot.readListBegin()
                    for _i284 in range(_size280):
                        _elem285 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.parentCustomGroupName.append(_elem285)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.filter = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTThirdUserDepartRelationTableInfo')
        if self.thirdDbId is not None:
            oprot.writeFieldBegin('thirdDbId', TType.STRING, 1)
            oprot.writeString(self.thirdDbId.encode('utf-8') if sys.version_info[0] == 2 else self.thirdDbId)
            oprot.writeFieldEnd()
        if self.tableId is not None:
            oprot.writeFieldBegin('tableId', TType.STRING, 2)
            oprot.writeString(self.tableId.encode('utf-8') if sys.version_info[0] == 2 else self.tableId)
            oprot.writeFieldEnd()
        if self.tableName is not None:
            oprot.writeFieldBegin('tableName', TType.STRING, 3)
            oprot.writeString(self.tableName.encode('utf-8') if sys.version_info[0] == 2 else self.tableName)
            oprot.writeFieldEnd()
        if self.userIdField is not None:
            oprot.writeFieldBegin('userIdField', TType.STRING, 4)
            oprot.writeString(self.userIdField.encode('utf-8') if sys.version_info[0] == 2 else self.userIdField)
            oprot.writeFieldEnd()
        if self.parentDepartmentIdField is not None:
            oprot.writeFieldBegin('parentDepartmentIdField', TType.STRING, 5)
            oprot.writeString(self.parentDepartmentIdField.encode('utf-8') if sys.version_info[0] == 2 else self.parentDepartmentIdField)
            oprot.writeFieldEnd()
        if self.parentCustomGroupTableId is not None:
            oprot.writeFieldBegin('parentCustomGroupTableId', TType.STRING, 6)
            oprot.writeString(self.parentCustomGroupTableId.encode('utf-8') if sys.version_info[0] == 2 else self.parentCustomGroupTableId)
            oprot.writeFieldEnd()
        if self.parentCustomGroupName is not None:
            oprot.writeFieldBegin('parentCustomGroupName', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.parentCustomGroupName))
            for iter286 in self.parentCustomGroupName:
                oprot.writeString(iter286.encode('utf-8') if sys.version_info[0] == 2 else iter286)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.filter is not None:
            oprot.writeFieldBegin('filter', TType.STRING, 8)
            oprot.writeString(self.filter.encode('utf-8') if sys.version_info[0] == 2 else self.filter)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTThirdTableInfo(object):
    """
    Attributes:
     - thirdDepartTableInfos
     - thirdDepartRelationTableInfos
     - thirdUserTableInfos
     - thirdUserRelationTableInfos

    """


    def __init__(self, thirdDepartTableInfos=None, thirdDepartRelationTableInfos=None, thirdUserTableInfos=None, thirdUserRelationTableInfos=None,):
        self.thirdDepartTableInfos = thirdDepartTableInfos
        self.thirdDepartRelationTableInfos = thirdDepartRelationTableInfos
        self.thirdUserTableInfos = thirdUserTableInfos
        self.thirdUserRelationTableInfos = thirdUserRelationTableInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.thirdDepartTableInfos = []
                    (_etype290, _size287) = iprot.readListBegin()
                    for _i291 in range(_size287):
                        _elem292 = ncTThirdDepartTableInfo()
                        _elem292.read(iprot)
                        self.thirdDepartTableInfos.append(_elem292)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.thirdDepartRelationTableInfos = []
                    (_etype296, _size293) = iprot.readListBegin()
                    for _i297 in range(_size293):
                        _elem298 = ncTThirdDepartRelationTableInfo()
                        _elem298.read(iprot)
                        self.thirdDepartRelationTableInfos.append(_elem298)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.thirdUserTableInfos = []
                    (_etype302, _size299) = iprot.readListBegin()
                    for _i303 in range(_size299):
                        _elem304 = ncTThirdUserTableInfo()
                        _elem304.read(iprot)
                        self.thirdUserTableInfos.append(_elem304)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.thirdUserRelationTableInfos = []
                    (_etype308, _size305) = iprot.readListBegin()
                    for _i309 in range(_size305):
                        _elem310 = ncTThirdUserDepartRelationTableInfo()
                        _elem310.read(iprot)
                        self.thirdUserRelationTableInfos.append(_elem310)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTThirdTableInfo')
        if self.thirdDepartTableInfos is not None:
            oprot.writeFieldBegin('thirdDepartTableInfos', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.thirdDepartTableInfos))
            for iter311 in self.thirdDepartTableInfos:
                iter311.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.thirdDepartRelationTableInfos is not None:
            oprot.writeFieldBegin('thirdDepartRelationTableInfos', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.thirdDepartRelationTableInfos))
            for iter312 in self.thirdDepartRelationTableInfos:
                iter312.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.thirdUserTableInfos is not None:
            oprot.writeFieldBegin('thirdUserTableInfos', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.thirdUserTableInfos))
            for iter313 in self.thirdUserTableInfos:
                iter313.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.thirdUserRelationTableInfos is not None:
            oprot.writeFieldBegin('thirdUserRelationTableInfos', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.thirdUserRelationTableInfos))
            for iter314 in self.thirdUserRelationTableInfos:
                iter314.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTThirdDbSyncConfig(object):
    """
    Attributes:
     - parentDepartId
     - thirdRootName
     - thirdRootId
     - syncInterval
     - spaceSize
     - userType

    """


    def __init__(self, parentDepartId=None, thirdRootName=None, thirdRootId=None, syncInterval=None, spaceSize=None, userType=None,):
        self.parentDepartId = parentDepartId
        self.thirdRootName = thirdRootName
        self.thirdRootId = thirdRootId
        self.syncInterval = syncInterval
        self.spaceSize = spaceSize
        self.userType = userType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.parentDepartId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.thirdRootName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.thirdRootId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.syncInterval = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.spaceSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.userType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTThirdDbSyncConfig')
        if self.parentDepartId is not None:
            oprot.writeFieldBegin('parentDepartId', TType.STRING, 1)
            oprot.writeString(self.parentDepartId.encode('utf-8') if sys.version_info[0] == 2 else self.parentDepartId)
            oprot.writeFieldEnd()
        if self.thirdRootName is not None:
            oprot.writeFieldBegin('thirdRootName', TType.STRING, 2)
            oprot.writeString(self.thirdRootName.encode('utf-8') if sys.version_info[0] == 2 else self.thirdRootName)
            oprot.writeFieldEnd()
        if self.thirdRootId is not None:
            oprot.writeFieldBegin('thirdRootId', TType.STRING, 3)
            oprot.writeString(self.thirdRootId.encode('utf-8') if sys.version_info[0] == 2 else self.thirdRootId)
            oprot.writeFieldEnd()
        if self.syncInterval is not None:
            oprot.writeFieldBegin('syncInterval', TType.I64, 4)
            oprot.writeI64(self.syncInterval)
            oprot.writeFieldEnd()
        if self.spaceSize is not None:
            oprot.writeFieldBegin('spaceSize', TType.I64, 5)
            oprot.writeI64(self.spaceSize)
            oprot.writeFieldEnd()
        if self.userType is not None:
            oprot.writeFieldBegin('userType', TType.I32, 6)
            oprot.writeI32(self.userType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAuditStrategyInfo(object):
    """
    Attributes:
     - auditorId
     - auditorName
     - checkCSFLevel
     - obj

    """


    def __init__(self, auditorId=None, auditorName=None, checkCSFLevel=None, obj=None,):
        self.auditorId = auditorId
        self.auditorName = auditorName
        self.checkCSFLevel = checkCSFLevel
        self.obj = obj

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auditorId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.auditorName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.checkCSFLevel = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.obj = []
                    (_etype318, _size315) = iprot.readListBegin()
                    for _i319 in range(_size315):
                        _elem320 = ncTAuditObject()
                        _elem320.read(iprot)
                        self.obj.append(_elem320)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAuditStrategyInfo')
        if self.auditorId is not None:
            oprot.writeFieldBegin('auditorId', TType.STRING, 1)
            oprot.writeString(self.auditorId.encode('utf-8') if sys.version_info[0] == 2 else self.auditorId)
            oprot.writeFieldEnd()
        if self.auditorName is not None:
            oprot.writeFieldBegin('auditorName', TType.STRING, 2)
            oprot.writeString(self.auditorName.encode('utf-8') if sys.version_info[0] == 2 else self.auditorName)
            oprot.writeFieldEnd()
        if self.checkCSFLevel is not None:
            oprot.writeFieldBegin('checkCSFLevel', TType.BOOL, 3)
            oprot.writeBool(self.checkCSFLevel)
            oprot.writeFieldEnd()
        if self.obj is not None:
            oprot.writeFieldBegin('obj', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.obj))
            for iter321 in self.obj:
                iter321.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAuditWhiteListItem(object):
    """
    Attributes:
     - departmentId
     - departName
     - isEnable

    """


    def __init__(self, departmentId=None, departName=None, isEnable=None,):
        self.departmentId = departmentId
        self.departName = departName
        self.isEnable = isEnable

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.departmentId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.departName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.isEnable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAuditWhiteListItem')
        if self.departmentId is not None:
            oprot.writeFieldBegin('departmentId', TType.STRING, 1)
            oprot.writeString(self.departmentId.encode('utf-8') if sys.version_info[0] == 2 else self.departmentId)
            oprot.writeFieldEnd()
        if self.departName is not None:
            oprot.writeFieldBegin('departName', TType.STRING, 2)
            oprot.writeString(self.departName.encode('utf-8') if sys.version_info[0] == 2 else self.departName)
            oprot.writeFieldEnd()
        if self.isEnable is not None:
            oprot.writeFieldBegin('isEnable', TType.BOOL, 3)
            oprot.writeBool(self.isEnable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTDocExchangeInfo(object):
    """
    Attributes:
     - objId
     - objType
     - objName
     - limitType

    """


    def __init__(self, objId=None, objType=None, objName=None, limitType=None,):
        self.objId = objId
        self.objType = objType
        self.objName = objName
        self.limitType = limitType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.objId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.objType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.objName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.limitType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTDocExchangeInfo')
        if self.objId is not None:
            oprot.writeFieldBegin('objId', TType.STRING, 1)
            oprot.writeString(self.objId.encode('utf-8') if sys.version_info[0] == 2 else self.objId)
            oprot.writeFieldEnd()
        if self.objType is not None:
            oprot.writeFieldBegin('objType', TType.I32, 2)
            oprot.writeI32(self.objType)
            oprot.writeFieldEnd()
        if self.objName is not None:
            oprot.writeFieldBegin('objName', TType.STRING, 3)
            oprot.writeString(self.objName.encode('utf-8') if sys.version_info[0] == 2 else self.objName)
            oprot.writeFieldEnd()
        if self.limitType is not None:
            oprot.writeFieldBegin('limitType', TType.I32, 4)
            oprot.writeI32(self.limitType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTDocExchangeRecvArea(object):
    """
    Attributes:
     - recvAreaId
     - recvAreaName
     - recvAreaKey
     - docNameImportInfo
     - autoSend

    """


    def __init__(self, recvAreaId=None, recvAreaName=None, recvAreaKey=None, docNameImportInfo=None, autoSend=None,):
        self.recvAreaId = recvAreaId
        self.recvAreaName = recvAreaName
        self.recvAreaKey = recvAreaKey
        self.docNameImportInfo = docNameImportInfo
        self.autoSend = autoSend

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.recvAreaId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.recvAreaName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.recvAreaKey = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.docNameImportInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.autoSend = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTDocExchangeRecvArea')
        if self.recvAreaId is not None:
            oprot.writeFieldBegin('recvAreaId', TType.STRING, 1)
            oprot.writeString(self.recvAreaId.encode('utf-8') if sys.version_info[0] == 2 else self.recvAreaId)
            oprot.writeFieldEnd()
        if self.recvAreaName is not None:
            oprot.writeFieldBegin('recvAreaName', TType.STRING, 2)
            oprot.writeString(self.recvAreaName.encode('utf-8') if sys.version_info[0] == 2 else self.recvAreaName)
            oprot.writeFieldEnd()
        if self.recvAreaKey is not None:
            oprot.writeFieldBegin('recvAreaKey', TType.STRING, 3)
            oprot.writeString(self.recvAreaKey.encode('utf-8') if sys.version_info[0] == 2 else self.recvAreaKey)
            oprot.writeFieldEnd()
        if self.docNameImportInfo is not None:
            oprot.writeFieldBegin('docNameImportInfo', TType.STRING, 4)
            oprot.writeString(self.docNameImportInfo.encode('utf-8') if sys.version_info[0] == 2 else self.docNameImportInfo)
            oprot.writeFieldEnd()
        if self.autoSend is not None:
            oprot.writeFieldBegin('autoSend', TType.BOOL, 5)
            oprot.writeBool(self.autoSend)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.recvAreaName is None:
            raise TProtocolException(message='Required field recvAreaName is unset!')
        if self.recvAreaKey is None:
            raise TProtocolException(message='Required field recvAreaKey is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTWatermarkDocInfo(object):
    """
    Attributes:
     - objId
     - objName
     - objType
     - watermarkType

    """


    def __init__(self, objId=None, objName=None, objType=None, watermarkType=None,):
        self.objId = objId
        self.objName = objName
        self.objType = objType
        self.watermarkType = watermarkType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.objId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.objName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.objType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.watermarkType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTWatermarkDocInfo')
        if self.objId is not None:
            oprot.writeFieldBegin('objId', TType.STRING, 1)
            oprot.writeString(self.objId.encode('utf-8') if sys.version_info[0] == 2 else self.objId)
            oprot.writeFieldEnd()
        if self.objName is not None:
            oprot.writeFieldBegin('objName', TType.STRING, 2)
            oprot.writeString(self.objName.encode('utf-8') if sys.version_info[0] == 2 else self.objName)
            oprot.writeFieldEnd()
        if self.objType is not None:
            oprot.writeFieldBegin('objType', TType.I32, 3)
            oprot.writeI32(self.objType)
            oprot.writeFieldEnd()
        if self.watermarkType is not None:
            oprot.writeFieldBegin('watermarkType', TType.I32, 4)
            oprot.writeI32(self.watermarkType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTOSTypeForbidLoginInfo(object):
    """
    Attributes:
     - osType
     - status

    """


    def __init__(self, osType=None, status=None,):
        self.osType = osType
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.osType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.status = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTOSTypeForbidLoginInfo')
        if self.osType is not None:
            oprot.writeFieldBegin('osType', TType.I32, 1)
            oprot.writeI32(self.osType)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BOOL, 2)
            oprot.writeBool(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTThirdPartyAuthConf(object):
    """
    Attributes:
     - thirdPartyId
     - thirdPartyName
     - enabled
     - config

    """


    def __init__(self, thirdPartyId=None, thirdPartyName=None, enabled=None, config=None,):
        self.thirdPartyId = thirdPartyId
        self.thirdPartyName = thirdPartyName
        self.enabled = enabled
        self.config = config

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.thirdPartyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.thirdPartyName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.config = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTThirdPartyAuthConf')
        if self.thirdPartyId is not None:
            oprot.writeFieldBegin('thirdPartyId', TType.STRING, 1)
            oprot.writeString(self.thirdPartyId.encode('utf-8') if sys.version_info[0] == 2 else self.thirdPartyId)
            oprot.writeFieldEnd()
        if self.thirdPartyName is not None:
            oprot.writeFieldBegin('thirdPartyName', TType.STRING, 2)
            oprot.writeString(self.thirdPartyName.encode('utf-8') if sys.version_info[0] == 2 else self.thirdPartyName)
            oprot.writeFieldEnd()
        if self.enabled is not None:
            oprot.writeFieldBegin('enabled', TType.BOOL, 3)
            oprot.writeBool(self.enabled)
            oprot.writeFieldEnd()
        if self.config is not None:
            oprot.writeFieldBegin('config', TType.STRING, 4)
            oprot.writeString(self.config.encode('utf-8') if sys.version_info[0] == 2 else self.config)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTThirdPartyPluginInfo(object):
    """
    Attributes:
     - indexId
     - thirdPartyId
     - filename
     - data
     - type
     - objectId

    """


    def __init__(self, indexId=None, thirdPartyId=None, filename=None, data=None, type=None, objectId=None,):
        self.indexId = indexId
        self.thirdPartyId = thirdPartyId
        self.filename = filename
        self.data = data
        self.type = type
        self.objectId = objectId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.indexId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.thirdPartyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.filename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.data = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.objectId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTThirdPartyPluginInfo')
        if self.indexId is not None:
            oprot.writeFieldBegin('indexId', TType.I64, 1)
            oprot.writeI64(self.indexId)
            oprot.writeFieldEnd()
        if self.thirdPartyId is not None:
            oprot.writeFieldBegin('thirdPartyId', TType.STRING, 2)
            oprot.writeString(self.thirdPartyId.encode('utf-8') if sys.version_info[0] == 2 else self.thirdPartyId)
            oprot.writeFieldEnd()
        if self.filename is not None:
            oprot.writeFieldBegin('filename', TType.STRING, 3)
            oprot.writeString(self.filename.encode('utf-8') if sys.version_info[0] == 2 else self.filename)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRING, 4)
            oprot.writeString(self.data.encode('utf-8') if sys.version_info[0] == 2 else self.data)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 5)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.objectId is not None:
            oprot.writeFieldBegin('objectId', TType.STRING, 6)
            oprot.writeString(self.objectId.encode('utf-8') if sys.version_info[0] == 2 else self.objectId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTThirdPartyConfig(object):
    """
    Attributes:
     - indexId
     - thirdPartyId
     - thirdPartyName
     - enabled
     - config
     - internalConfig
     - plugin

    """


    def __init__(self, indexId=None, thirdPartyId=None, thirdPartyName=None, enabled=None, config=None, internalConfig=None, plugin=None,):
        self.indexId = indexId
        self.thirdPartyId = thirdPartyId
        self.thirdPartyName = thirdPartyName
        self.enabled = enabled
        self.config = config
        self.internalConfig = internalConfig
        self.plugin = plugin

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.indexId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.thirdPartyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.thirdPartyName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.config = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.internalConfig = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.plugin = ncTThirdPartyPluginInfo()
                    self.plugin.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTThirdPartyConfig')
        if self.indexId is not None:
            oprot.writeFieldBegin('indexId', TType.I64, 1)
            oprot.writeI64(self.indexId)
            oprot.writeFieldEnd()
        if self.thirdPartyId is not None:
            oprot.writeFieldBegin('thirdPartyId', TType.STRING, 2)
            oprot.writeString(self.thirdPartyId.encode('utf-8') if sys.version_info[0] == 2 else self.thirdPartyId)
            oprot.writeFieldEnd()
        if self.thirdPartyName is not None:
            oprot.writeFieldBegin('thirdPartyName', TType.STRING, 3)
            oprot.writeString(self.thirdPartyName.encode('utf-8') if sys.version_info[0] == 2 else self.thirdPartyName)
            oprot.writeFieldEnd()
        if self.enabled is not None:
            oprot.writeFieldBegin('enabled', TType.BOOL, 4)
            oprot.writeBool(self.enabled)
            oprot.writeFieldEnd()
        if self.config is not None:
            oprot.writeFieldBegin('config', TType.STRING, 5)
            oprot.writeString(self.config.encode('utf-8') if sys.version_info[0] == 2 else self.config)
            oprot.writeFieldEnd()
        if self.internalConfig is not None:
            oprot.writeFieldBegin('internalConfig', TType.STRING, 6)
            oprot.writeString(self.internalConfig.encode('utf-8') if sys.version_info[0] == 2 else self.internalConfig)
            oprot.writeFieldEnd()
        if self.plugin is not None:
            oprot.writeFieldBegin('plugin', TType.STRUCT, 7)
            self.plugin.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTThirdToolAuthInfo(object):
    """
    Attributes:
     - appid
     - appkey

    """


    def __init__(self, appid=None, appkey=None,):
        self.appid = appid
        self.appkey = appkey

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.appid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.appkey = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTThirdToolAuthInfo')
        if self.appid is not None:
            oprot.writeFieldBegin('appid', TType.STRING, 1)
            oprot.writeString(self.appid.encode('utf-8') if sys.version_info[0] == 2 else self.appid)
            oprot.writeFieldEnd()
        if self.appkey is not None:
            oprot.writeFieldBegin('appkey', TType.STRING, 2)
            oprot.writeString(self.appkey.encode('utf-8') if sys.version_info[0] == 2 else self.appkey)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTThirdPartyToolConfig(object):
    """
    Attributes:
     - thirdPartyToolId
     - enabled
     - url
     - thirdPartyToolName
     - authInfo

    """


    def __init__(self, thirdPartyToolId=None, enabled=None, url=None, thirdPartyToolName=None, authInfo=None,):
        self.thirdPartyToolId = thirdPartyToolId
        self.enabled = enabled
        self.url = url
        self.thirdPartyToolName = thirdPartyToolName
        self.authInfo = authInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.thirdPartyToolId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.thirdPartyToolName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.authInfo = ncTThirdToolAuthInfo()
                    self.authInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTThirdPartyToolConfig')
        if self.thirdPartyToolId is not None:
            oprot.writeFieldBegin('thirdPartyToolId', TType.STRING, 1)
            oprot.writeString(self.thirdPartyToolId.encode('utf-8') if sys.version_info[0] == 2 else self.thirdPartyToolId)
            oprot.writeFieldEnd()
        if self.enabled is not None:
            oprot.writeFieldBegin('enabled', TType.BOOL, 2)
            oprot.writeBool(self.enabled)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 3)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.thirdPartyToolName is not None:
            oprot.writeFieldBegin('thirdPartyToolName', TType.STRING, 4)
            oprot.writeString(self.thirdPartyToolName.encode('utf-8') if sys.version_info[0] == 2 else self.thirdPartyToolName)
            oprot.writeFieldEnd()
        if self.authInfo is not None:
            oprot.writeFieldBegin('authInfo', TType.STRUCT, 5)
            self.authInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAccessorInfo(object):
    """
    Attributes:
     - id
     - type
     - name

    """


    def __init__(self, id=None, type=None, name=None,):
        self.id = id
        self.type = type
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAccessorInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTNetInfo(object):
    """
    Attributes:
     - ip
     - subNetMask
     - id

    """


    def __init__(self, ip=None, subNetMask=None, id=None,):
        self.ip = ip
        self.subNetMask = subNetMask
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.subNetMask = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTNetInfo')
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 1)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.subNetMask is not None:
            oprot.writeFieldBegin('subNetMask', TType.STRING, 2)
            oprot.writeString(self.subNetMask.encode('utf-8') if sys.version_info[0] == 2 else self.subNetMask)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 3)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTNetAccessorsInfo(object):
    """
    Attributes:
     - id
     - net
     - accessors

    """


    def __init__(self, id=None, net=None, accessors=None,):
        self.id = id
        self.net = net
        self.accessors = accessors

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.net = ncTNetInfo()
                    self.net.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.accessors = []
                    (_etype325, _size322) = iprot.readListBegin()
                    for _i326 in range(_size322):
                        _elem327 = ncTAccessorInfo()
                        _elem327.read(iprot)
                        self.accessors.append(_elem327)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTNetAccessorsInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.net is not None:
            oprot.writeFieldBegin('net', TType.STRUCT, 2)
            self.net.write(oprot)
            oprot.writeFieldEnd()
        if self.accessors is not None:
            oprot.writeFieldBegin('accessors', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.accessors))
            for iter328 in self.accessors:
                iter328.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTDocInfo(object):
    """
    Attributes:
     - id
     - name

    """


    def __init__(self, id=None, name=None,):
        self.id = id
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTDocInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTLoginAccessDeviceInfo(object):
    """
    Attributes:
     - udid
     - osType
     - disableFlag
     - bindFlag

    """


    def __init__(self, udid=None, osType=None, disableFlag=None, bindFlag=None,):
        self.udid = udid
        self.osType = osType
        self.disableFlag = disableFlag
        self.bindFlag = bindFlag

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.udid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.osType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.disableFlag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.bindFlag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLoginAccessDeviceInfo')
        if self.udid is not None:
            oprot.writeFieldBegin('udid', TType.STRING, 1)
            oprot.writeString(self.udid.encode('utf-8') if sys.version_info[0] == 2 else self.udid)
            oprot.writeFieldEnd()
        if self.osType is not None:
            oprot.writeFieldBegin('osType', TType.I32, 2)
            oprot.writeI32(self.osType)
            oprot.writeFieldEnd()
        if self.disableFlag is not None:
            oprot.writeFieldBegin('disableFlag', TType.I32, 3)
            oprot.writeI32(self.disableFlag)
            oprot.writeFieldEnd()
        if self.bindFlag is not None:
            oprot.writeFieldBegin('bindFlag', TType.I32, 4)
            oprot.writeI32(self.bindFlag)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUserLoginAccessControl(object):
    """
    Attributes:
     - net
     - device

    """


    def __init__(self, net=None, device=None,):
        self.net = net
        self.device = device

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.net = []
                    (_etype332, _size329) = iprot.readListBegin()
                    for _i333 in range(_size329):
                        _elem334 = ncTNetInfo()
                        _elem334.read(iprot)
                        self.net.append(_elem334)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.device = []
                    (_etype338, _size335) = iprot.readListBegin()
                    for _i339 in range(_size335):
                        _elem340 = ncTLoginAccessDeviceInfo()
                        _elem340.read(iprot)
                        self.device.append(_elem340)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUserLoginAccessControl')
        if self.net is not None:
            oprot.writeFieldBegin('net', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.net))
            for iter341 in self.net:
                iter341.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.device is not None:
            oprot.writeFieldBegin('device', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.device))
            for iter342 in self.device:
                iter342.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTReturnInfo(object):
    """
    Attributes:
     - telNumber
     - sendInterval
     - isDuplicateSended

    """


    def __init__(self, telNumber=None, sendInterval=None, isDuplicateSended=None,):
        self.telNumber = telNumber
        self.sendInterval = sendInterval
        self.isDuplicateSended = isDuplicateSended

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.telNumber = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.sendInterval = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.isDuplicateSended = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTReturnInfo')
        if self.telNumber is not None:
            oprot.writeFieldBegin('telNumber', TType.STRING, 1)
            oprot.writeString(self.telNumber.encode('utf-8') if sys.version_info[0] == 2 else self.telNumber)
            oprot.writeFieldEnd()
        if self.sendInterval is not None:
            oprot.writeFieldBegin('sendInterval', TType.I32, 2)
            oprot.writeI32(self.sendInterval)
            oprot.writeFieldEnd()
        if self.isDuplicateSended is not None:
            oprot.writeFieldBegin('isDuplicateSended', TType.BOOL, 3)
            oprot.writeBool(self.isDuplicateSended)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.telNumber is None:
            raise TProtocolException(message='Required field telNumber is unset!')
        if self.sendInterval is None:
            raise TProtocolException(message='Required field sendInterval is unset!')
        if self.isDuplicateSended is None:
            raise TProtocolException(message='Required field isDuplicateSended is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUserLoginOption(object):
    """
    Attributes:
     - loginIp
     - uuid
     - vcode
     - isModify
     - isPlainPwd
     - vcodeType
     - OTP

    """


    def __init__(self, loginIp=None, uuid=None, vcode=None, isModify=None, isPlainPwd=None, vcodeType=None, OTP=None,):
        self.loginIp = loginIp
        self.uuid = uuid
        self.vcode = vcode
        self.isModify = isModify
        self.isPlainPwd = isPlainPwd
        self.vcodeType = vcodeType
        self.OTP = OTP

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.loginIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.vcode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.isModify = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.isPlainPwd = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.vcodeType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.OTP = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUserLoginOption')
        if self.loginIp is not None:
            oprot.writeFieldBegin('loginIp', TType.STRING, 1)
            oprot.writeString(self.loginIp.encode('utf-8') if sys.version_info[0] == 2 else self.loginIp)
            oprot.writeFieldEnd()
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 2)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.vcode is not None:
            oprot.writeFieldBegin('vcode', TType.STRING, 3)
            oprot.writeString(self.vcode.encode('utf-8') if sys.version_info[0] == 2 else self.vcode)
            oprot.writeFieldEnd()
        if self.isModify is not None:
            oprot.writeFieldBegin('isModify', TType.BOOL, 4)
            oprot.writeBool(self.isModify)
            oprot.writeFieldEnd()
        if self.isPlainPwd is not None:
            oprot.writeFieldBegin('isPlainPwd', TType.BOOL, 5)
            oprot.writeBool(self.isPlainPwd)
            oprot.writeFieldEnd()
        if self.vcodeType is not None:
            oprot.writeFieldBegin('vcodeType', TType.I32, 6)
            oprot.writeI32(self.vcodeType)
            oprot.writeFieldEnd()
        if self.OTP is not None:
            oprot.writeFieldBegin('OTP', TType.STRING, 7)
            oprot.writeString(self.OTP.encode('utf-8') if sys.version_info[0] == 2 else self.OTP)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUserModifyPwdOption(object):
    """
    Attributes:
     - uuid
     - vcode
     - isForgetPwd

    """


    def __init__(self, uuid=None, vcode=None, isForgetPwd=None,):
        self.uuid = uuid
        self.vcode = vcode
        self.isForgetPwd = isForgetPwd

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vcode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.isForgetPwd = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUserModifyPwdOption')
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 1)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.vcode is not None:
            oprot.writeFieldBegin('vcode', TType.STRING, 2)
            oprot.writeString(self.vcode.encode('utf-8') if sys.version_info[0] == 2 else self.vcode)
            oprot.writeFieldEnd()
        if self.isForgetPwd is not None:
            oprot.writeFieldBegin('isForgetPwd', TType.BOOL, 3)
            oprot.writeBool(self.isForgetPwd)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTDocAuditInfo(object):
    """
    Attributes:
     - processId
     - name
     - auditType
     - auditorIds
     - destDocId
     - creatorId
     - status
     - auditorNames
     - creatorName
     - destDocName
     - accessorInfos

    """


    def __init__(self, processId=None, name=None, auditType=None, auditorIds=None, destDocId=None, creatorId=None, status=None, auditorNames=None, creatorName=None, destDocName=None, accessorInfos=None,):
        self.processId = processId
        self.name = name
        self.auditType = auditType
        self.auditorIds = auditorIds
        self.destDocId = destDocId
        self.creatorId = creatorId
        self.status = status
        self.auditorNames = auditorNames
        self.creatorName = creatorName
        self.destDocName = destDocName
        self.accessorInfos = accessorInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.processId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.auditType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.auditorIds = []
                    (_etype346, _size343) = iprot.readListBegin()
                    for _i347 in range(_size343):
                        _elem348 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.auditorIds.append(_elem348)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.destDocId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.creatorId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.status = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.auditorNames = []
                    (_etype352, _size349) = iprot.readListBegin()
                    for _i353 in range(_size349):
                        _elem354 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.auditorNames.append(_elem354)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.creatorName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.destDocName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.accessorInfos = []
                    (_etype358, _size355) = iprot.readListBegin()
                    for _i359 in range(_size355):
                        _elem360 = ncTAccessorInfo()
                        _elem360.read(iprot)
                        self.accessorInfos.append(_elem360)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTDocAuditInfo')
        if self.processId is not None:
            oprot.writeFieldBegin('processId', TType.STRING, 1)
            oprot.writeString(self.processId.encode('utf-8') if sys.version_info[0] == 2 else self.processId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.auditType is not None:
            oprot.writeFieldBegin('auditType', TType.I32, 3)
            oprot.writeI32(self.auditType)
            oprot.writeFieldEnd()
        if self.auditorIds is not None:
            oprot.writeFieldBegin('auditorIds', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.auditorIds))
            for iter361 in self.auditorIds:
                oprot.writeString(iter361.encode('utf-8') if sys.version_info[0] == 2 else iter361)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.destDocId is not None:
            oprot.writeFieldBegin('destDocId', TType.STRING, 5)
            oprot.writeString(self.destDocId.encode('utf-8') if sys.version_info[0] == 2 else self.destDocId)
            oprot.writeFieldEnd()
        if self.creatorId is not None:
            oprot.writeFieldBegin('creatorId', TType.STRING, 6)
            oprot.writeString(self.creatorId.encode('utf-8') if sys.version_info[0] == 2 else self.creatorId)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BOOL, 7)
            oprot.writeBool(self.status)
            oprot.writeFieldEnd()
        if self.auditorNames is not None:
            oprot.writeFieldBegin('auditorNames', TType.LIST, 8)
            oprot.writeListBegin(TType.STRING, len(self.auditorNames))
            for iter362 in self.auditorNames:
                oprot.writeString(iter362.encode('utf-8') if sys.version_info[0] == 2 else iter362)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.creatorName is not None:
            oprot.writeFieldBegin('creatorName', TType.STRING, 9)
            oprot.writeString(self.creatorName.encode('utf-8') if sys.version_info[0] == 2 else self.creatorName)
            oprot.writeFieldEnd()
        if self.destDocName is not None:
            oprot.writeFieldBegin('destDocName', TType.STRING, 10)
            oprot.writeString(self.destDocName.encode('utf-8') if sys.version_info[0] == 2 else self.destDocName)
            oprot.writeFieldEnd()
        if self.accessorInfos is not None:
            oprot.writeFieldBegin('accessorInfos', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.accessorInfos))
            for iter363 in self.accessorInfos:
                iter363.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.auditType is None:
            raise TProtocolException(message='Required field auditType is unset!')
        if self.auditorIds is None:
            raise TProtocolException(message='Required field auditorIds is unset!')
        if self.destDocId is None:
            raise TProtocolException(message='Required field destDocId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmPwdControlConfig(object):
    """
    Attributes:
     - pwdControl
     - password
     - lockStatus

    """


    def __init__(self, pwdControl=None, password=None, lockStatus=None,):
        self.pwdControl = pwdControl
        self.password = password
        self.lockStatus = lockStatus

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.pwdControl = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.lockStatus = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmPwdControlConfig')
        if self.pwdControl is not None:
            oprot.writeFieldBegin('pwdControl', TType.BOOL, 1)
            oprot.writeBool(self.pwdControl)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.lockStatus is not None:
            oprot.writeFieldBegin('lockStatus', TType.BOOL, 3)
            oprot.writeBool(self.lockStatus)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.pwdControl is None:
            raise TProtocolException(message='Required field pwdControl is unset!')
        if self.password is None:
            raise TProtocolException(message='Required field password is unset!')
        if self.lockStatus is None:
            raise TProtocolException(message='Required field lockStatus is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTNTLMResponse(object):
    """
    Attributes:
     - userId
     - sessKey

    """


    def __init__(self, userId=None, sessKey=None,):
        self.userId = userId
        self.sessKey = sessKey

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sessKey = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTNTLMResponse')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.sessKey is not None:
            oprot.writeFieldBegin('sessKey', TType.STRING, 2)
            oprot.writeString(self.sessKey.encode('utf-8') if sys.version_info[0] == 2 else self.sessKey)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.userId is None:
            raise TProtocolException(message='Required field userId is unset!')
        if self.sessKey is None:
            raise TProtocolException(message='Required field sessKey is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTNASMountInfo(object):
    """
    Attributes:
     - mountName
     - gns
     - gnsName

    """


    def __init__(self, mountName=None, gns=None, gnsName=None,):
        self.mountName = mountName
        self.gns = gns
        self.gnsName = gnsName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mountName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.gns = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.gnsName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTNASMountInfo')
        if self.mountName is not None:
            oprot.writeFieldBegin('mountName', TType.STRING, 1)
            oprot.writeString(self.mountName.encode('utf-8') if sys.version_info[0] == 2 else self.mountName)
            oprot.writeFieldEnd()
        if self.gns is not None:
            oprot.writeFieldBegin('gns', TType.STRING, 2)
            oprot.writeString(self.gns.encode('utf-8') if sys.version_info[0] == 2 else self.gns)
            oprot.writeFieldEnd()
        if self.gnsName is not None:
            oprot.writeFieldBegin('gnsName', TType.STRING, 3)
            oprot.writeString(self.gnsName.encode('utf-8') if sys.version_info[0] == 2 else self.gnsName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTLimitRateObject(object):
    """
    Attributes:
     - objectId
     - objectName

    """


    def __init__(self, objectId=None, objectName=None,):
        self.objectId = objectId
        self.objectName = objectName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.objectId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.objectName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLimitRateObject')
        if self.objectId is not None:
            oprot.writeFieldBegin('objectId', TType.STRING, 1)
            oprot.writeString(self.objectId.encode('utf-8') if sys.version_info[0] == 2 else self.objectId)
            oprot.writeFieldEnd()
        if self.objectName is not None:
            oprot.writeFieldBegin('objectName', TType.STRING, 2)
            oprot.writeString(self.objectName.encode('utf-8') if sys.version_info[0] == 2 else self.objectName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTLimitRateConfig(object):
    """
    Attributes:
     - isEnabled
     - limitType

    """


    def __init__(self, isEnabled=None, limitType=None,):
        self.isEnabled = isEnabled
        self.limitType = limitType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isEnabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.limitType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLimitRateConfig')
        if self.isEnabled is not None:
            oprot.writeFieldBegin('isEnabled', TType.BOOL, 1)
            oprot.writeBool(self.isEnabled)
            oprot.writeFieldEnd()
        if self.limitType is not None:
            oprot.writeFieldBegin('limitType', TType.I32, 2)
            oprot.writeI32(self.limitType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTLimitRateInfo(object):
    """
    Attributes:
     - id
     - uploadRate
     - downloadRate
     - userInfos
     - depInfos
     - limitType

    """


    def __init__(self, id=None, uploadRate=None, downloadRate=None, userInfos=None, depInfos=None, limitType=None,):
        self.id = id
        self.uploadRate = uploadRate
        self.downloadRate = downloadRate
        self.userInfos = userInfos
        self.depInfos = depInfos
        self.limitType = limitType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.uploadRate = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.downloadRate = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.userInfos = []
                    (_etype367, _size364) = iprot.readListBegin()
                    for _i368 in range(_size364):
                        _elem369 = ncTLimitRateObject()
                        _elem369.read(iprot)
                        self.userInfos.append(_elem369)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.depInfos = []
                    (_etype373, _size370) = iprot.readListBegin()
                    for _i374 in range(_size370):
                        _elem375 = ncTLimitRateObject()
                        _elem375.read(iprot)
                        self.depInfos.append(_elem375)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.limitType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLimitRateInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.uploadRate is not None:
            oprot.writeFieldBegin('uploadRate', TType.I32, 2)
            oprot.writeI32(self.uploadRate)
            oprot.writeFieldEnd()
        if self.downloadRate is not None:
            oprot.writeFieldBegin('downloadRate', TType.I32, 3)
            oprot.writeI32(self.downloadRate)
            oprot.writeFieldEnd()
        if self.userInfos is not None:
            oprot.writeFieldBegin('userInfos', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.userInfos))
            for iter376 in self.userInfos:
                iter376.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.depInfos is not None:
            oprot.writeFieldBegin('depInfos', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.depInfos))
            for iter377 in self.depInfos:
                iter377.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.limitType is not None:
            oprot.writeFieldBegin('limitType', TType.I32, 6)
            oprot.writeI32(self.limitType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTLimitRateObjInfo(object):
    """
    Attributes:
     - userInfos
     - depInfos

    """


    def __init__(self, userInfos=None, depInfos=None,):
        self.userInfos = userInfos
        self.depInfos = depInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.userInfos = []
                    (_etype381, _size378) = iprot.readListBegin()
                    for _i382 in range(_size378):
                        _elem383 = ncTLimitRateObject()
                        _elem383.read(iprot)
                        self.userInfos.append(_elem383)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.depInfos = []
                    (_etype387, _size384) = iprot.readListBegin()
                    for _i388 in range(_size384):
                        _elem389 = ncTLimitRateObject()
                        _elem389.read(iprot)
                        self.depInfos.append(_elem389)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLimitRateObjInfo')
        if self.userInfos is not None:
            oprot.writeFieldBegin('userInfos', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.userInfos))
            for iter390 in self.userInfos:
                iter390.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.depInfos is not None:
            oprot.writeFieldBegin('depInfos', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.depInfos))
            for iter391 in self.depInfos:
                iter391.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTThirdCSFSysConfig(object):
    """
    Attributes:
     - isEnabled
     - id
     - only_upload_classified
     - only_share_classified
     - auto_match_doc_classfication

    """


    def __init__(self, isEnabled=None, id=None, only_upload_classified=None, only_share_classified=None, auto_match_doc_classfication=None,):
        self.isEnabled = isEnabled
        self.id = id
        self.only_upload_classified = only_upload_classified
        self.only_share_classified = only_share_classified
        self.auto_match_doc_classfication = auto_match_doc_classfication

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isEnabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.only_upload_classified = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.only_share_classified = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.auto_match_doc_classfication = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTThirdCSFSysConfig')
        if self.isEnabled is not None:
            oprot.writeFieldBegin('isEnabled', TType.BOOL, 1)
            oprot.writeBool(self.isEnabled)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.only_upload_classified is not None:
            oprot.writeFieldBegin('only_upload_classified', TType.BOOL, 3)
            oprot.writeBool(self.only_upload_classified)
            oprot.writeFieldEnd()
        if self.only_share_classified is not None:
            oprot.writeFieldBegin('only_share_classified', TType.BOOL, 4)
            oprot.writeBool(self.only_share_classified)
            oprot.writeFieldEnd()
        if self.auto_match_doc_classfication is not None:
            oprot.writeFieldBegin('auto_match_doc_classfication', TType.BOOL, 5)
            oprot.writeBool(self.auto_match_doc_classfication)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTLinkTemplateInfo(object):
    """
    Attributes:
     - templateId
     - templateType
     - sharerInfos
     - config
     - createTime

    """


    def __init__(self, templateId=None, templateType=None, sharerInfos=None, config=None, createTime=None,):
        self.templateId = templateId
        self.templateType = templateType
        self.sharerInfos = sharerInfos
        self.config = config
        self.createTime = createTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.templateId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.templateType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.sharerInfos = []
                    (_etype395, _size392) = iprot.readListBegin()
                    for _i396 in range(_size392):
                        _elem397 = ncTLinkShareInfo()
                        _elem397.read(iprot)
                        self.sharerInfos.append(_elem397)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.config = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.createTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLinkTemplateInfo')
        if self.templateId is not None:
            oprot.writeFieldBegin('templateId', TType.STRING, 1)
            oprot.writeString(self.templateId.encode('utf-8') if sys.version_info[0] == 2 else self.templateId)
            oprot.writeFieldEnd()
        if self.templateType is not None:
            oprot.writeFieldBegin('templateType', TType.I32, 2)
            oprot.writeI32(self.templateType)
            oprot.writeFieldEnd()
        if self.sharerInfos is not None:
            oprot.writeFieldBegin('sharerInfos', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.sharerInfos))
            for iter398 in self.sharerInfos:
                iter398.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.config is not None:
            oprot.writeFieldBegin('config', TType.STRING, 4)
            oprot.writeString(self.config.encode('utf-8') if sys.version_info[0] == 2 else self.config)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.I64, 5)
            oprot.writeI64(self.createTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.createTime is None:
            raise TProtocolException(message='Required field createTime is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTExternalLinkInfo(object):
    """
    Attributes:
     - userId
     - permValue
     - password
     - allowExpireDays
     - accessLimit

    """


    def __init__(self, userId=None, permValue=None, password=None, allowExpireDays=None, accessLimit=None,):
        self.userId = userId
        self.permValue = permValue
        self.password = password
        self.allowExpireDays = allowExpireDays
        self.accessLimit = accessLimit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.permValue = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.allowExpireDays = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.accessLimit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTExternalLinkInfo')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.permValue is not None:
            oprot.writeFieldBegin('permValue', TType.I32, 2)
            oprot.writeI32(self.permValue)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 3)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.allowExpireDays is not None:
            oprot.writeFieldBegin('allowExpireDays', TType.I32, 4)
            oprot.writeI32(self.allowExpireDays)
            oprot.writeFieldEnd()
        if self.accessLimit is not None:
            oprot.writeFieldBegin('accessLimit', TType.I32, 5)
            oprot.writeI32(self.accessLimit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTDocDownloadLimitObject(object):
    """
    Attributes:
     - objectId
     - objectName

    """


    def __init__(self, objectId=None, objectName=None,):
        self.objectId = objectId
        self.objectName = objectName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.objectId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.objectName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTDocDownloadLimitObject')
        if self.objectId is not None:
            oprot.writeFieldBegin('objectId', TType.STRING, 1)
            oprot.writeString(self.objectId.encode('utf-8') if sys.version_info[0] == 2 else self.objectId)
            oprot.writeFieldEnd()
        if self.objectName is not None:
            oprot.writeFieldBegin('objectName', TType.STRING, 2)
            oprot.writeString(self.objectName.encode('utf-8') if sys.version_info[0] == 2 else self.objectName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTDocDownloadLimitInfo(object):
    """
    Attributes:
     - id
     - limitValue
     - userInfos
     - depInfos

    """


    def __init__(self, id=None, limitValue=None, userInfos=None, depInfos=None,):
        self.id = id
        self.limitValue = limitValue
        self.userInfos = userInfos
        self.depInfos = depInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.limitValue = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.userInfos = []
                    (_etype402, _size399) = iprot.readListBegin()
                    for _i403 in range(_size399):
                        _elem404 = ncTDocDownloadLimitObject()
                        _elem404.read(iprot)
                        self.userInfos.append(_elem404)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.depInfos = []
                    (_etype408, _size405) = iprot.readListBegin()
                    for _i409 in range(_size405):
                        _elem410 = ncTDocDownloadLimitObject()
                        _elem410.read(iprot)
                        self.depInfos.append(_elem410)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTDocDownloadLimitInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.limitValue is not None:
            oprot.writeFieldBegin('limitValue', TType.I64, 2)
            oprot.writeI64(self.limitValue)
            oprot.writeFieldEnd()
        if self.userInfos is not None:
            oprot.writeFieldBegin('userInfos', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.userInfos))
            for iter411 in self.userInfos:
                iter411.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.depInfos is not None:
            oprot.writeFieldBegin('depInfos', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.depInfos))
            for iter412 in self.depInfos:
                iter412.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUserAutoDisableConfig(object):
    """
    Attributes:
     - isEnabled
     - days

    """


    def __init__(self, isEnabled=None, days=None,):
        self.isEnabled = isEnabled
        self.days = days

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isEnabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.days = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUserAutoDisableConfig')
        if self.isEnabled is not None:
            oprot.writeFieldBegin('isEnabled', TType.BOOL, 1)
            oprot.writeBool(self.isEnabled)
            oprot.writeFieldEnd()
        if self.days is not None:
            oprot.writeFieldBegin('days', TType.I32, 2)
            oprot.writeI32(self.days)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTRetainOutLinkVCode(object):
    """
    Attributes:
     - vCode
     - securitVCode

    """


    def __init__(self, vCode=None, securitVCode=None,):
        self.vCode = vCode
        self.securitVCode = securitVCode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.vCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.securitVCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTRetainOutLinkVCode')
        if self.vCode is not None:
            oprot.writeFieldBegin('vCode', TType.STRING, 1)
            oprot.writeString(self.vCode.encode('utf-8') if sys.version_info[0] == 2 else self.vCode)
            oprot.writeFieldEnd()
        if self.securitVCode is not None:
            oprot.writeFieldBegin('securitVCode', TType.STRING, 2)
            oprot.writeString(self.securitVCode.encode('utf-8') if sys.version_info[0] == 2 else self.securitVCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTDeviceBindUserInfo(object):
    """
    Attributes:
     - id
     - displayName
     - loginName
     - bindStatus

    """


    def __init__(self, id=None, displayName=None, loginName=None, bindStatus=None,):
        self.id = id
        self.displayName = displayName
        self.loginName = loginName
        self.bindStatus = bindStatus

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.loginName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.bindStatus = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTDeviceBindUserInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 2)
            oprot.writeString(self.displayName.encode('utf-8') if sys.version_info[0] == 2 else self.displayName)
            oprot.writeFieldEnd()
        if self.loginName is not None:
            oprot.writeFieldBegin('loginName', TType.STRING, 3)
            oprot.writeString(self.loginName.encode('utf-8') if sys.version_info[0] == 2 else self.loginName)
            oprot.writeFieldEnd()
        if self.bindStatus is not None:
            oprot.writeFieldBegin('bindStatus', TType.BOOL, 4)
            oprot.writeBool(self.bindStatus)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTVcodeConfig(object):
    """
    Attributes:
     - isEnable
     - passwdErrCnt

    """


    def __init__(self, isEnable=None, passwdErrCnt=None,):
        self.isEnable = isEnable
        self.passwdErrCnt = passwdErrCnt

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isEnable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.passwdErrCnt = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTVcodeConfig')
        if self.isEnable is not None:
            oprot.writeFieldBegin('isEnable', TType.BOOL, 1)
            oprot.writeBool(self.isEnable)
            oprot.writeFieldEnd()
        if self.passwdErrCnt is not None:
            oprot.writeFieldBegin('passwdErrCnt', TType.I32, 2)
            oprot.writeI32(self.passwdErrCnt)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.isEnable is None:
            raise TProtocolException(message='Required field isEnable is unset!')
        if self.passwdErrCnt is None:
            raise TProtocolException(message='Required field passwdErrCnt is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTVcodeCreateInfo(object):
    """
    Attributes:
     - vcode
     - uuid
     - isDuplicateSended

    """


    def __init__(self, vcode=None, uuid=None, isDuplicateSended=None,):
        self.vcode = vcode
        self.uuid = uuid
        self.isDuplicateSended = isDuplicateSended

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.vcode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.isDuplicateSended = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTVcodeCreateInfo')
        if self.vcode is not None:
            oprot.writeFieldBegin('vcode', TType.STRING, 1)
            oprot.writeString(self.vcode.encode('utf-8') if sys.version_info[0] == 2 else self.vcode)
            oprot.writeFieldEnd()
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 2)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.isDuplicateSended is not None:
            oprot.writeFieldBegin('isDuplicateSended', TType.BOOL, 3)
            oprot.writeBool(self.isDuplicateSended)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.vcode is None:
            raise TProtocolException(message='Required field vcode is unset!')
        if self.uuid is None:
            raise TProtocolException(message='Required field uuid is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTRecycleInfo(object):
    """
    Attributes:
     - gns
     - setter
     - retentionDays

    """


    def __init__(self, gns=None, setter=None, retentionDays=None,):
        self.gns = gns
        self.setter = setter
        self.retentionDays = retentionDays

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.gns = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.setter = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.retentionDays = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTRecycleInfo')
        if self.gns is not None:
            oprot.writeFieldBegin('gns', TType.STRING, 1)
            oprot.writeString(self.gns.encode('utf-8') if sys.version_info[0] == 2 else self.gns)
            oprot.writeFieldEnd()
        if self.setter is not None:
            oprot.writeFieldBegin('setter', TType.STRING, 2)
            oprot.writeString(self.setter.encode('utf-8') if sys.version_info[0] == 2 else self.setter)
            oprot.writeFieldEnd()
        if self.retentionDays is not None:
            oprot.writeFieldBegin('retentionDays', TType.I32, 3)
            oprot.writeI32(self.retentionDays)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.gns is None:
            raise TProtocolException(message='Required field gns is unset!')
        if self.setter is None:
            raise TProtocolException(message='Required field setter is unset!')
        if self.retentionDays is None:
            raise TProtocolException(message='Required field retentionDays is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTSearchUserConfig(object):
    """
    Attributes:
     - exactSearch
     - searchRange
     - searchResults

    """


    def __init__(self, exactSearch=None, searchRange=None, searchResults=None,):
        self.exactSearch = exactSearch
        self.searchRange = searchRange
        self.searchResults = searchResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.exactSearch = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.searchRange = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.searchResults = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTSearchUserConfig')
        if self.exactSearch is not None:
            oprot.writeFieldBegin('exactSearch', TType.BOOL, 1)
            oprot.writeBool(self.exactSearch)
            oprot.writeFieldEnd()
        if self.searchRange is not None:
            oprot.writeFieldBegin('searchRange', TType.I32, 2)
            oprot.writeI32(self.searchRange)
            oprot.writeFieldEnd()
        if self.searchResults is not None:
            oprot.writeFieldBegin('searchResults', TType.I32, 3)
            oprot.writeI32(self.searchResults)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.exactSearch is None:
            raise TProtocolException(message='Required field exactSearch is unset!')
        if self.searchRange is None:
            raise TProtocolException(message='Required field searchRange is unset!')
        if self.searchResults is None:
            raise TProtocolException(message='Required field searchResults is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTPriorityAccessConfig(object):
    """
    Attributes:
     - isEnable
     - limitCPU
     - limitMemory
     - limitPriority

    """


    def __init__(self, isEnable=None, limitCPU=None, limitMemory=None, limitPriority=None,):
        self.isEnable = isEnable
        self.limitCPU = limitCPU
        self.limitMemory = limitMemory
        self.limitPriority = limitPriority

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isEnable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.limitCPU = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.limitMemory = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.limitPriority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTPriorityAccessConfig')
        if self.isEnable is not None:
            oprot.writeFieldBegin('isEnable', TType.BOOL, 1)
            oprot.writeBool(self.isEnable)
            oprot.writeFieldEnd()
        if self.limitCPU is not None:
            oprot.writeFieldBegin('limitCPU', TType.I32, 2)
            oprot.writeI32(self.limitCPU)
            oprot.writeFieldEnd()
        if self.limitMemory is not None:
            oprot.writeFieldBegin('limitMemory', TType.I32, 3)
            oprot.writeI32(self.limitMemory)
            oprot.writeFieldEnd()
        if self.limitPriority is not None:
            oprot.writeFieldBegin('limitPriority', TType.I32, 4)
            oprot.writeI32(self.limitPriority)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.isEnable is None:
            raise TProtocolException(message='Required field isEnable is unset!')
        if self.limitCPU is None:
            raise TProtocolException(message='Required field limitCPU is unset!')
        if self.limitMemory is None:
            raise TProtocolException(message='Required field limitMemory is unset!')
        if self.limitPriority is None:
            raise TProtocolException(message='Required field limitPriority is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTActiveUserInfo(object):
    """
    Attributes:
     - time
     - activeCount
     - userActivity

    """


    def __init__(self, time=None, activeCount=None, userActivity=None,):
        self.time = time
        self.activeCount = activeCount
        self.userActivity = userActivity

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.activeCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.userActivity = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTActiveUserInfo')
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.STRING, 1)
            oprot.writeString(self.time.encode('utf-8') if sys.version_info[0] == 2 else self.time)
            oprot.writeFieldEnd()
        if self.activeCount is not None:
            oprot.writeFieldBegin('activeCount', TType.I64, 2)
            oprot.writeI64(self.activeCount)
            oprot.writeFieldEnd()
        if self.userActivity is not None:
            oprot.writeFieldBegin('userActivity', TType.DOUBLE, 3)
            oprot.writeDouble(self.userActivity)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.time is None:
            raise TProtocolException(message='Required field time is unset!')
        if self.activeCount is None:
            raise TProtocolException(message='Required field activeCount is unset!')
        if self.userActivity is None:
            raise TProtocolException(message='Required field userActivity is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTActiveReportInfo(object):
    """
    Attributes:
     - avgCount
     - avgActivity
     - userInfos

    """


    def __init__(self, avgCount=None, avgActivity=None, userInfos=None,):
        self.avgCount = avgCount
        self.avgActivity = avgActivity
        self.userInfos = userInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.avgCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.avgActivity = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.userInfos = []
                    (_etype416, _size413) = iprot.readListBegin()
                    for _i417 in range(_size413):
                        _elem418 = ncTActiveUserInfo()
                        _elem418.read(iprot)
                        self.userInfos.append(_elem418)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTActiveReportInfo')
        if self.avgCount is not None:
            oprot.writeFieldBegin('avgCount', TType.I64, 1)
            oprot.writeI64(self.avgCount)
            oprot.writeFieldEnd()
        if self.avgActivity is not None:
            oprot.writeFieldBegin('avgActivity', TType.DOUBLE, 2)
            oprot.writeDouble(self.avgActivity)
            oprot.writeFieldEnd()
        if self.userInfos is not None:
            oprot.writeFieldBegin('userInfos', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.userInfos))
            for iter419 in self.userInfos:
                iter419.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.avgCount is None:
            raise TProtocolException(message='Required field avgCount is unset!')
        if self.avgActivity is None:
            raise TProtocolException(message='Required field avgActivity is unset!')
        if self.userInfos is None:
            raise TProtocolException(message='Required field userInfos is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTThirdPartyRootNodeInfo(object):
    """
    Attributes:
     - name
     - thirdId

    """


    def __init__(self, name=None, thirdId=None,):
        self.name = name
        self.thirdId = thirdId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.thirdId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTThirdPartyRootNodeInfo')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.thirdId is not None:
            oprot.writeFieldBegin('thirdId', TType.STRING, 2)
            oprot.writeString(self.thirdId.encode('utf-8') if sys.version_info[0] == 2 else self.thirdId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmThirdPartyUser(object):
    """
    Attributes:
     - loginName
     - displayName
     - thirdId
     - deptThirdId

    """


    def __init__(self, loginName=None, displayName=None, thirdId=None, deptThirdId=None,):
        self.loginName = loginName
        self.displayName = displayName
        self.thirdId = thirdId
        self.deptThirdId = deptThirdId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.loginName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.thirdId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.deptThirdId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmThirdPartyUser')
        if self.loginName is not None:
            oprot.writeFieldBegin('loginName', TType.STRING, 1)
            oprot.writeString(self.loginName.encode('utf-8') if sys.version_info[0] == 2 else self.loginName)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 2)
            oprot.writeString(self.displayName.encode('utf-8') if sys.version_info[0] == 2 else self.displayName)
            oprot.writeFieldEnd()
        if self.thirdId is not None:
            oprot.writeFieldBegin('thirdId', TType.STRING, 3)
            oprot.writeString(self.thirdId.encode('utf-8') if sys.version_info[0] == 2 else self.thirdId)
            oprot.writeFieldEnd()
        if self.deptThirdId is not None:
            oprot.writeFieldBegin('deptThirdId', TType.STRING, 4)
            oprot.writeString(self.deptThirdId.encode('utf-8') if sys.version_info[0] == 2 else self.deptThirdId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmThirdPartyOU(object):
    """
    Attributes:
     - name
     - thirdId
     - parentThirdId
     - importAll

    """


    def __init__(self, name=None, thirdId=None, parentThirdId=None, importAll=None,):
        self.name = name
        self.thirdId = thirdId
        self.parentThirdId = parentThirdId
        self.importAll = importAll

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.thirdId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.parentThirdId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.importAll = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmThirdPartyOU')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.thirdId is not None:
            oprot.writeFieldBegin('thirdId', TType.STRING, 2)
            oprot.writeString(self.thirdId.encode('utf-8') if sys.version_info[0] == 2 else self.thirdId)
            oprot.writeFieldEnd()
        if self.parentThirdId is not None:
            oprot.writeFieldBegin('parentThirdId', TType.STRING, 3)
            oprot.writeString(self.parentThirdId.encode('utf-8') if sys.version_info[0] == 2 else self.parentThirdId)
            oprot.writeFieldEnd()
        if self.importAll is not None:
            oprot.writeFieldBegin('importAll', TType.BOOL, 4)
            oprot.writeBool(self.importAll)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTUsrmThirdPartyNode(object):
    """
    Attributes:
     - ous
     - users

    """


    def __init__(self, ous=None, users=None,):
        self.ous = ous
        self.users = users

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.ous = []
                    (_etype423, _size420) = iprot.readListBegin()
                    for _i424 in range(_size420):
                        _elem425 = ncTUsrmThirdPartyOU()
                        _elem425.read(iprot)
                        self.ous.append(_elem425)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.users = []
                    (_etype429, _size426) = iprot.readListBegin()
                    for _i430 in range(_size426):
                        _elem431 = ncTUsrmThirdPartyUser()
                        _elem431.read(iprot)
                        self.users.append(_elem431)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTUsrmThirdPartyNode')
        if self.ous is not None:
            oprot.writeFieldBegin('ous', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.ous))
            for iter432 in self.ous:
                iter432.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.users is not None:
            oprot.writeFieldBegin('users', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.users))
            for iter433 in self.users:
                iter433.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTFileCrawlConfig(object):
    """
    Attributes:
     - strategyId
     - userId
     - loginName
     - displayName
     - docId
     - docName
     - fileCrawlType

    """


    def __init__(self, strategyId=None, userId=None, loginName=None, displayName=None, docId=None, docName=None, fileCrawlType=None,):
        self.strategyId = strategyId
        self.userId = userId
        self.loginName = loginName
        self.displayName = displayName
        self.docId = docId
        self.docName = docName
        self.fileCrawlType = fileCrawlType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.strategyId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.loginName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.docId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.docName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.fileCrawlType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTFileCrawlConfig')
        if self.strategyId is not None:
            oprot.writeFieldBegin('strategyId', TType.I32, 1)
            oprot.writeI32(self.strategyId)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 2)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.loginName is not None:
            oprot.writeFieldBegin('loginName', TType.STRING, 3)
            oprot.writeString(self.loginName.encode('utf-8') if sys.version_info[0] == 2 else self.loginName)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 4)
            oprot.writeString(self.displayName.encode('utf-8') if sys.version_info[0] == 2 else self.displayName)
            oprot.writeFieldEnd()
        if self.docId is not None:
            oprot.writeFieldBegin('docId', TType.STRING, 5)
            oprot.writeString(self.docId.encode('utf-8') if sys.version_info[0] == 2 else self.docId)
            oprot.writeFieldEnd()
        if self.docName is not None:
            oprot.writeFieldBegin('docName', TType.STRING, 6)
            oprot.writeString(self.docName.encode('utf-8') if sys.version_info[0] == 2 else self.docName)
            oprot.writeFieldEnd()
        if self.fileCrawlType is not None:
            oprot.writeFieldBegin('fileCrawlType', TType.STRING, 7)
            oprot.writeString(self.fileCrawlType.encode('utf-8') if sys.version_info[0] == 2 else self.fileCrawlType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAutoArchiveObjInfo(object):
    """
    Attributes:
     - id
     - name

    """


    def __init__(self, id=None, name=None,):
        self.id = id
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAutoArchiveObjInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAutoArchiveConfig(object):
    """
    Attributes:
     - strategyId
     - users
     - departs
     - archiveCycle
     - archiveCycleModifyTime
     - archiveDestDocId
     - archiveNextTime

    """


    def __init__(self, strategyId=None, users=None, departs=None, archiveCycle=None, archiveCycleModifyTime=None, archiveDestDocId=None, archiveNextTime=None,):
        self.strategyId = strategyId
        self.users = users
        self.departs = departs
        self.archiveCycle = archiveCycle
        self.archiveCycleModifyTime = archiveCycleModifyTime
        self.archiveDestDocId = archiveDestDocId
        self.archiveNextTime = archiveNextTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.strategyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.users = []
                    (_etype437, _size434) = iprot.readListBegin()
                    for _i438 in range(_size434):
                        _elem439 = ncTAutoArchiveObjInfo()
                        _elem439.read(iprot)
                        self.users.append(_elem439)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.departs = []
                    (_etype443, _size440) = iprot.readListBegin()
                    for _i444 in range(_size440):
                        _elem445 = ncTAutoArchiveObjInfo()
                        _elem445.read(iprot)
                        self.departs.append(_elem445)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.archiveCycle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.archiveCycleModifyTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.archiveDestDocId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.archiveNextTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAutoArchiveConfig')
        if self.strategyId is not None:
            oprot.writeFieldBegin('strategyId', TType.STRING, 1)
            oprot.writeString(self.strategyId.encode('utf-8') if sys.version_info[0] == 2 else self.strategyId)
            oprot.writeFieldEnd()
        if self.users is not None:
            oprot.writeFieldBegin('users', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.users))
            for iter446 in self.users:
                iter446.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.departs is not None:
            oprot.writeFieldBegin('departs', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.departs))
            for iter447 in self.departs:
                iter447.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.archiveCycle is not None:
            oprot.writeFieldBegin('archiveCycle', TType.I64, 4)
            oprot.writeI64(self.archiveCycle)
            oprot.writeFieldEnd()
        if self.archiveCycleModifyTime is not None:
            oprot.writeFieldBegin('archiveCycleModifyTime', TType.I64, 5)
            oprot.writeI64(self.archiveCycleModifyTime)
            oprot.writeFieldEnd()
        if self.archiveDestDocId is not None:
            oprot.writeFieldBegin('archiveDestDocId', TType.STRING, 6)
            oprot.writeString(self.archiveDestDocId.encode('utf-8') if sys.version_info[0] == 2 else self.archiveDestDocId)
            oprot.writeFieldEnd()
        if self.archiveNextTime is not None:
            oprot.writeFieldBegin('archiveNextTime', TType.I64, 7)
            oprot.writeI64(self.archiveNextTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTGlobalRecycleRetentionConfig(object):
    """
    Attributes:
     - isEnable
     - days

    """


    def __init__(self, isEnable=None, days=None,):
        self.isEnable = isEnable
        self.days = days

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isEnable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.days = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTGlobalRecycleRetentionConfig')
        if self.isEnable is not None:
            oprot.writeFieldBegin('isEnable', TType.BOOL, 1)
            oprot.writeBool(self.isEnable)
            oprot.writeFieldEnd()
        if self.days is not None:
            oprot.writeFieldBegin('days', TType.I32, 2)
            oprot.writeI32(self.days)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAutoCleanObjInfo(object):
    """
    Attributes:
     - id
     - name

    """


    def __init__(self, id=None, name=None,):
        self.id = id
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAutoCleanObjInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTAutoCleanConfig(object):
    """
    Attributes:
     - strategyId
     - users
     - departs
     - cleanCycleDays
     - cleanCycleModifyTime
     - cleanNextTime
     - enableRemainHours
     - remainHours
     - createTime
     - status

    """


    def __init__(self, strategyId=None, users=None, departs=None, cleanCycleDays=None, cleanCycleModifyTime=None, cleanNextTime=None, enableRemainHours=None, remainHours=None, createTime=None, status=None,):
        self.strategyId = strategyId
        self.users = users
        self.departs = departs
        self.cleanCycleDays = cleanCycleDays
        self.cleanCycleModifyTime = cleanCycleModifyTime
        self.cleanNextTime = cleanNextTime
        self.enableRemainHours = enableRemainHours
        self.remainHours = remainHours
        self.createTime = createTime
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.strategyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.users = []
                    (_etype451, _size448) = iprot.readListBegin()
                    for _i452 in range(_size448):
                        _elem453 = ncTAutoCleanObjInfo()
                        _elem453.read(iprot)
                        self.users.append(_elem453)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.departs = []
                    (_etype457, _size454) = iprot.readListBegin()
                    for _i458 in range(_size454):
                        _elem459 = ncTAutoCleanObjInfo()
                        _elem459.read(iprot)
                        self.departs.append(_elem459)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.cleanCycleDays = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.cleanCycleModifyTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.cleanNextTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.enableRemainHours = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.remainHours = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.createTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.status = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTAutoCleanConfig')
        if self.strategyId is not None:
            oprot.writeFieldBegin('strategyId', TType.STRING, 1)
            oprot.writeString(self.strategyId.encode('utf-8') if sys.version_info[0] == 2 else self.strategyId)
            oprot.writeFieldEnd()
        if self.users is not None:
            oprot.writeFieldBegin('users', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.users))
            for iter460 in self.users:
                iter460.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.departs is not None:
            oprot.writeFieldBegin('departs', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.departs))
            for iter461 in self.departs:
                iter461.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cleanCycleDays is not None:
            oprot.writeFieldBegin('cleanCycleDays', TType.I64, 4)
            oprot.writeI64(self.cleanCycleDays)
            oprot.writeFieldEnd()
        if self.cleanCycleModifyTime is not None:
            oprot.writeFieldBegin('cleanCycleModifyTime', TType.I64, 5)
            oprot.writeI64(self.cleanCycleModifyTime)
            oprot.writeFieldEnd()
        if self.cleanNextTime is not None:
            oprot.writeFieldBegin('cleanNextTime', TType.I64, 6)
            oprot.writeI64(self.cleanNextTime)
            oprot.writeFieldEnd()
        if self.enableRemainHours is not None:
            oprot.writeFieldBegin('enableRemainHours', TType.BOOL, 7)
            oprot.writeBool(self.enableRemainHours)
            oprot.writeFieldEnd()
        if self.remainHours is not None:
            oprot.writeFieldBegin('remainHours', TType.I64, 8)
            oprot.writeI64(self.remainHours)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.I64, 9)
            oprot.writeI64(self.createTime)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BOOL, 10)
            oprot.writeBool(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTVirusInfo(object):
    """
    Attributes:
     - fileName
     - virusName
     - riskType
     - processType
     - parentPath
     - startTime
     - endTime

    """


    def __init__(self, fileName=None, virusName=None, riskType=None, processType=None, parentPath=None, startTime=None, endTime=None,):
        self.fileName = fileName
        self.virusName = virusName
        self.riskType = riskType
        self.processType = processType
        self.parentPath = parentPath
        self.startTime = startTime
        self.endTime = endTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.virusName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.riskType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.processType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.parentPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.endTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTVirusInfo')
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 1)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        if self.virusName is not None:
            oprot.writeFieldBegin('virusName', TType.STRING, 2)
            oprot.writeString(self.virusName.encode('utf-8') if sys.version_info[0] == 2 else self.virusName)
            oprot.writeFieldEnd()
        if self.riskType is not None:
            oprot.writeFieldBegin('riskType', TType.STRING, 3)
            oprot.writeString(self.riskType.encode('utf-8') if sys.version_info[0] == 2 else self.riskType)
            oprot.writeFieldEnd()
        if self.processType is not None:
            oprot.writeFieldBegin('processType', TType.I32, 4)
            oprot.writeI32(self.processType)
            oprot.writeFieldEnd()
        if self.parentPath is not None:
            oprot.writeFieldBegin('parentPath', TType.STRING, 5)
            oprot.writeString(self.parentPath.encode('utf-8') if sys.version_info[0] == 2 else self.parentPath)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 6)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.I64, 7)
            oprot.writeI64(self.endTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTScanScope(object):
    """
    Attributes:
     - userIds
     - departIds
     - cids

    """


    def __init__(self, userIds=None, departIds=None, cids=None,):
        self.userIds = userIds
        self.departIds = departIds
        self.cids = cids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.userIds = []
                    (_etype465, _size462) = iprot.readListBegin()
                    for _i466 in range(_size462):
                        _elem467 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.userIds.append(_elem467)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.departIds = []
                    (_etype471, _size468) = iprot.readListBegin()
                    for _i472 in range(_size468):
                        _elem473 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.departIds.append(_elem473)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.cids = []
                    (_etype477, _size474) = iprot.readListBegin()
                    for _i478 in range(_size474):
                        _elem479 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.cids.append(_elem479)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTScanScope')
        if self.userIds is not None:
            oprot.writeFieldBegin('userIds', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.userIds))
            for iter480 in self.userIds:
                oprot.writeString(iter480.encode('utf-8') if sys.version_info[0] == 2 else iter480)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.departIds is not None:
            oprot.writeFieldBegin('departIds', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.departIds))
            for iter481 in self.departIds:
                oprot.writeString(iter481.encode('utf-8') if sys.version_info[0] == 2 else iter481)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cids is not None:
            oprot.writeFieldBegin('cids', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.cids))
            for iter482 in self.cids:
                oprot.writeString(iter482.encode('utf-8') if sys.version_info[0] == 2 else iter482)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTScanTaskInfo(object):
    """
    Attributes:
     - scanFilePath
     - scanFileCount
     - useTime
     - startTime
     - endTime
     - progressRate
     - status
     - scanType
     - scanScope
     - nodeIP
     - nodeId

    """


    def __init__(self, scanFilePath=None, scanFileCount=None, useTime=None, startTime=None, endTime=None, progressRate=None, status=None, scanType=None, scanScope=None, nodeIP=None, nodeId=None,):
        self.scanFilePath = scanFilePath
        self.scanFileCount = scanFileCount
        self.useTime = useTime
        self.startTime = startTime
        self.endTime = endTime
        self.progressRate = progressRate
        self.status = status
        self.scanType = scanType
        self.scanScope = scanScope
        self.nodeIP = nodeIP
        self.nodeId = nodeId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.scanFilePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.scanFileCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.useTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.endTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.progressRate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.scanType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.scanScope = ncTScanScope()
                    self.scanScope.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.nodeIP = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.nodeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTScanTaskInfo')
        if self.scanFilePath is not None:
            oprot.writeFieldBegin('scanFilePath', TType.STRING, 1)
            oprot.writeString(self.scanFilePath.encode('utf-8') if sys.version_info[0] == 2 else self.scanFilePath)
            oprot.writeFieldEnd()
        if self.scanFileCount is not None:
            oprot.writeFieldBegin('scanFileCount', TType.I64, 2)
            oprot.writeI64(self.scanFileCount)
            oprot.writeFieldEnd()
        if self.useTime is not None:
            oprot.writeFieldBegin('useTime', TType.I64, 3)
            oprot.writeI64(self.useTime)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 4)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.I64, 5)
            oprot.writeI64(self.endTime)
            oprot.writeFieldEnd()
        if self.progressRate is not None:
            oprot.writeFieldBegin('progressRate', TType.DOUBLE, 6)
            oprot.writeDouble(self.progressRate)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 7)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.scanType is not None:
            oprot.writeFieldBegin('scanType', TType.I32, 8)
            oprot.writeI32(self.scanType)
            oprot.writeFieldEnd()
        if self.scanScope is not None:
            oprot.writeFieldBegin('scanScope', TType.STRUCT, 9)
            self.scanScope.write(oprot)
            oprot.writeFieldEnd()
        if self.nodeIP is not None:
            oprot.writeFieldBegin('nodeIP', TType.STRING, 10)
            oprot.writeString(self.nodeIP.encode('utf-8') if sys.version_info[0] == 2 else self.nodeIP)
            oprot.writeFieldEnd()
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.STRING, 11)
            oprot.writeString(self.nodeId.encode('utf-8') if sys.version_info[0] == 2 else self.nodeId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTVirusDBInfo(object):
    """
    Attributes:
     - virusDBName
     - virusDBData
     - updateTime

    """


    def __init__(self, virusDBName=None, virusDBData=None, updateTime=None,):
        self.virusDBName = virusDBName
        self.virusDBData = virusDBData
        self.updateTime = updateTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.virusDBName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.virusDBData = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.updateTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTVirusDBInfo')
        if self.virusDBName is not None:
            oprot.writeFieldBegin('virusDBName', TType.STRING, 1)
            oprot.writeString(self.virusDBName.encode('utf-8') if sys.version_info[0] == 2 else self.virusDBName)
            oprot.writeFieldEnd()
        if self.virusDBData is not None:
            oprot.writeFieldBegin('virusDBData', TType.STRING, 2)
            oprot.writeString(self.virusDBData.encode('utf-8') if sys.version_info[0] == 2 else self.virusDBData)
            oprot.writeFieldEnd()
        if self.updateTime is not None:
            oprot.writeFieldBegin('updateTime', TType.I64, 3)
            oprot.writeI64(self.updateTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTLocalSyncObjInfo(object):
    """
    Attributes:
     - id
     - name

    """


    def __init__(self, id=None, name=None,):
        self.id = id
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLocalSyncObjInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTLocalSyncConfig(object):
    """
    Attributes:
     - strategyId
     - openStatus
     - deleteStatus
     - users
     - departs
     - createTime

    """


    def __init__(self, strategyId=None, openStatus=None, deleteStatus=None, users=None, departs=None, createTime=None,):
        self.strategyId = strategyId
        self.openStatus = openStatus
        self.deleteStatus = deleteStatus
        self.users = users
        self.departs = departs
        self.createTime = createTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.strategyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.openStatus = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.deleteStatus = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.users = []
                    (_etype486, _size483) = iprot.readListBegin()
                    for _i487 in range(_size483):
                        _elem488 = ncTLocalSyncObjInfo()
                        _elem488.read(iprot)
                        self.users.append(_elem488)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.departs = []
                    (_etype492, _size489) = iprot.readListBegin()
                    for _i493 in range(_size489):
                        _elem494 = ncTLocalSyncObjInfo()
                        _elem494.read(iprot)
                        self.departs.append(_elem494)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.createTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTLocalSyncConfig')
        if self.strategyId is not None:
            oprot.writeFieldBegin('strategyId', TType.STRING, 1)
            oprot.writeString(self.strategyId.encode('utf-8') if sys.version_info[0] == 2 else self.strategyId)
            oprot.writeFieldEnd()
        if self.openStatus is not None:
            oprot.writeFieldBegin('openStatus', TType.BOOL, 2)
            oprot.writeBool(self.openStatus)
            oprot.writeFieldEnd()
        if self.deleteStatus is not None:
            oprot.writeFieldBegin('deleteStatus', TType.BOOL, 3)
            oprot.writeBool(self.deleteStatus)
            oprot.writeFieldEnd()
        if self.users is not None:
            oprot.writeFieldBegin('users', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.users))
            for iter495 in self.users:
                iter495.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.departs is not None:
            oprot.writeFieldBegin('departs', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.departs))
            for iter496 in self.departs:
                iter496.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.I64, 6)
            oprot.writeI64(self.createTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ncTWebhookConfig(object):
    """
    Attributes:
     - isEnabled
     - endpointURL

    """


    def __init__(self, isEnabled=None, endpointURL=None,):
        self.isEnabled = isEnabled
        self.endpointURL = endpointURL

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isEnabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.endpointURL = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ncTWebhookConfig')
        if self.isEnabled is not None:
            oprot.writeFieldBegin('isEnabled', TType.BOOL, 1)
            oprot.writeBool(self.isEnabled)
            oprot.writeFieldEnd()
        if self.endpointURL is not None:
            oprot.writeFieldBegin('endpointURL', TType.STRING, 2)
            oprot.writeString(self.endpointURL.encode('utf-8') if sys.version_info[0] == 2 else self.endpointURL)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.isEnabled is None:
            raise TProtocolException(message='Required field isEnabled is unset!')
        if self.endpointURL is None:
            raise TProtocolException(message='Required field endpointURL is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ncTUsrmSiteInfo)
ncTUsrmSiteInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
)
all_structs.append(ncTUsrmOSSInfo)
ncTUsrmOSSInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ossId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ossName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'siteName', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'enabled', None, None, ),  # 4
    (5, TType.I32, 'type', None, None, ),  # 5
)
all_structs.append(ncTLimitSpaceInfo)
ncTLimitSpaceInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'limitUserSpace', None, None, ),  # 1
    (2, TType.I64, 'allocatedLimitUserSpace', None, None, ),  # 2
    (3, TType.I64, 'limitDocSpace', None, None, ),  # 3
    (4, TType.I64, 'allocatedLimitDocSpace', None, None, ),  # 4
)
all_structs.append(ncTRoleInfo)
ncTRoleInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'description', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'creatorId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'id', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'displayName', 'UTF8', None, ),  # 5
)
all_structs.append(ncTManageDeptInfo)
ncTManageDeptInfo.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'departmentIds', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.LIST, 'departmentNames', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.I64, 'limitUserSpaceSize', None, None, ),  # 3
    (4, TType.I64, 'limitDocSpaceSize', None, None, ),  # 4
)
all_structs.append(ncTAuditObject)
ncTAuditObject.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'objType', None, None, ),  # 1
    (2, TType.STRING, 'objId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'objName', 'UTF8', None, ),  # 3
)
all_structs.append(ncTRoleMemberInfo)
ncTRoleMemberInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'displayName', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'departmentIds', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.LIST, 'departmentNames', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.STRUCT, 'manageDeptInfo', [ncTManageDeptInfo, None], None, ),  # 5
    (6, TType.LIST, 'auditObj', (TType.STRUCT, [ncTAuditObject, None], False), None, ),  # 6
)
all_structs.append(ncTUsrmUserInfo)
ncTUsrmUserInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'loginName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'displayName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'email', 'UTF8', None, ),  # 3
    (4, TType.I64, 'space', None, None, ),  # 4
    (5, TType.I32, 'userType', None, None, ),  # 5
    (6, TType.LIST, 'departmentIds', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.LIST, 'departmentNames', (TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.I32, 'status', None, None, ),  # 8
    (9, TType.I64, 'usedSize', None, None, ),  # 9
    (10, TType.I32, 'priority', None, None, ),  # 10
    (11, TType.I32, 'csfLevel', None, None, ),  # 11
    (12, TType.BOOL, 'pwdControl', None, None, ),  # 12
    (13, TType.STRUCT, 'ossInfo', [ncTUsrmOSSInfo, None], None, ),  # 13
    (14, TType.STRUCT, 'limitSpaceInfo', [ncTLimitSpaceInfo, None], None, ),  # 14
    (15, TType.I64, 'createTime', None, None, ),  # 15
    (16, TType.BOOL, 'freezeStatus', None, None, ),  # 16
    (17, TType.STRING, 'telNumber', 'UTF8', None, ),  # 17
    (18, TType.LIST, 'roles', (TType.STRUCT, [ncTRoleInfo, None], False), None, ),  # 18
    (19, TType.I32, 'expireTime', None, None, ),  # 19
    (20, TType.STRING, 'remark', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'idcardNumber', 'UTF8', None, ),  # 21
)
all_structs.append(ncTSimpleUserInfo)
ncTSimpleUserInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'displayName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'loginName', 'UTF8', None, ),  # 3
    (4, TType.I32, 'status', None, None, ),  # 4
)
all_structs.append(ncTUsrmDirectDeptInfo)
ncTUsrmDirectDeptInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'departmentId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'departmentName', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'responsiblePersons', (TType.STRUCT, [ncTSimpleUserInfo, None], False), None, ),  # 3
)
all_structs.append(ncTUsrmGetUserInfo)
ncTUsrmGetUserInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'user', [ncTUsrmUserInfo, None], None, ),  # 2
    (3, TType.BOOL, 'originalPwd', None, None, ),  # 3
    (4, TType.STRING, 'password', 'UTF8', None, ),  # 4
    (5, TType.STRUCT, 'directDeptInfo', [ncTUsrmDirectDeptInfo, None], None, ),  # 5
)
all_structs.append(ncTUsrmPasswordConfig)
ncTUsrmPasswordConfig.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'strongStatus', None, None, ),  # 1
    (2, TType.I32, 'expireTime', None, None, ),  # 2
    (3, TType.BOOL, 'lockStatus', None, None, ),  # 3
    (4, TType.I32, 'passwdErrCnt', None, None, ),  # 4
    (5, TType.I32, 'passwdLockTime', None, None, ),  # 5
    (6, TType.I32, 'strongPwdLength', None, None, ),  # 6
)
all_structs.append(ncTUsrmAddUserInfo)
ncTUsrmAddUserInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'user', [ncTUsrmUserInfo, None], None, ),  # 1
    (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
)
all_structs.append(ncTEditUserParam)
ncTEditUserParam.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'displayName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'email', 'UTF8', None, ),  # 3
    (4, TType.I64, 'space', None, None, ),  # 4
    (5, TType.I32, 'priority', None, None, ),  # 5
    (6, TType.I32, 'csfLevel', None, None, ),  # 6
    (7, TType.BOOL, 'pwdControl', None, None, ),  # 7
    (8, TType.STRING, 'pwd', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'ossId', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'telNumber', 'UTF8', None, ),  # 10
    (11, TType.I32, 'expireTime', None, None, ),  # 11
    (12, TType.STRING, 'remark', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'idcardNumber', 'UTF8', None, ),  # 13
)
all_structs.append(ncTAddOrgParam)
ncTAddOrgParam.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'orgName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ossId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'priority', None, None, ),  # 3
    (4, TType.STRING, 'email', 'UTF8', None, ),  # 4
)
all_structs.append(ncTAddDepartParam)
ncTAddDepartParam.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'departName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'parentId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'ossId', 'UTF8', None, ),  # 3
    (4, TType.I32, 'priority', None, None, ),  # 4
    (5, TType.STRING, 'email', 'UTF8', None, ),  # 5
)
all_structs.append(ncTEditDepartParam)
ncTEditDepartParam.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'departId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'departName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'ossId', 'UTF8', None, ),  # 3
    (4, TType.I32, 'priority', None, None, ),  # 4
    (5, TType.STRING, 'email', 'UTF8', None, ),  # 5
)
all_structs.append(ncTUsrmDepartmentInfo)
ncTUsrmDepartmentInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'departmentId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'departmentName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'parentDepartId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'parentDepartName', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'responsiblePersons', (TType.STRUCT, [ncTUsrmGetUserInfo, None], False), None, ),  # 5
    (6, TType.STRUCT, 'ossInfo', [ncTUsrmOSSInfo, None], None, ),  # 6
    (7, TType.LIST, 'subDepartIds', (TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.STRING, 'email', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'parentPath', 'UTF8', None, ),  # 9
)
all_structs.append(ncTDepartmentInfo)
ncTDepartmentInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'responsiblePersons', (TType.STRUCT, [ncTUsrmGetUserInfo, None], False), None, ),  # 3
    (4, TType.I32, 'subDepartmentCount', None, None, ),  # 4
    (5, TType.I32, 'subUserCount', None, None, ),  # 5
    (6, TType.STRUCT, 'ossInfo', [ncTUsrmOSSInfo, None], None, ),  # 6
    (7, TType.STRING, 'email', 'UTF8', None, ),  # 7
)
all_structs.append(ncTUsrmOrganizationInfo)
ncTUsrmOrganizationInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'organizationId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'organizationName', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'departments', (TType.STRUCT, [ncTUsrmDepartmentInfo, None], False), None, ),  # 3
    (4, TType.LIST, 'responsiblePersons', (TType.STRUCT, [ncTUsrmGetUserInfo, None], False), None, ),  # 4
    (5, TType.STRUCT, 'ossInfo', [ncTUsrmOSSInfo, None], None, ),  # 5
    (6, TType.STRING, 'email', 'UTF8', None, ),  # 6
)
all_structs.append(ncTRootOrgInfo)
ncTRootOrgInfo.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isOrganization', None, None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'responsiblePersons', (TType.STRUCT, [ncTUsrmGetUserInfo, None], False), None, ),  # 4
    (5, TType.I32, 'subDepartmentCount', None, None, ),  # 5
    (6, TType.I32, 'subUserCount', None, None, ),  # 6
    (7, TType.STRUCT, 'ossInfo', [ncTUsrmOSSInfo, None], None, ),  # 7
    (8, TType.STRING, 'email', 'UTF8', None, ),  # 8
)
all_structs.append(ncTSearchUserInfo)
ncTSearchUserInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'loginName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'displayName', 'UTF8', None, ),  # 3
    (4, TType.I32, 'csfLevel', None, None, ),  # 4
    (5, TType.LIST, 'departmentIds', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.LIST, 'departmentNames', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.LIST, 'departmentPaths', (TType.STRING, 'UTF8', False), None, ),  # 7
)
all_structs.append(ncTLocateInfo)
ncTLocateInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'departId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'departName', 'UTF8', None, ),  # 2
)
all_structs.append(ncTUsrmDomainConfig)
ncTUsrmDomainConfig.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'destDepartId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'desetDepartName', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'ouPath', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.I64, 'syncInterval', None, None, ),  # 4
    (5, TType.I64, 'spaceSize', None, None, ),  # 5
    (6, TType.I32, 'syncMode', None, None, ),  # 6
    (7, TType.BOOL, 'userEnableStatus', None, None, ),  # 7
    (8, TType.BOOL, 'forcedSync', None, None, ),  # 8
    (9, TType.I32, 'validPeriod', None, None, ),  # 9
)
all_structs.append(ncTUsrmDomainKeyConfig)
ncTUsrmDomainKeyConfig.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'departNameKeys', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.LIST, 'departThirdIdKeys', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.LIST, 'loginNameKeys', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.LIST, 'displayNameKeys', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.LIST, 'emailKeys', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.LIST, 'userThirdIdKeys', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.LIST, 'groupKeys', (TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.STRING, 'subOuFilter', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'subUserFilter', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'baseFilter', 'UTF8', None, ),  # 10
    (11, TType.LIST, 'statusKeys', (TType.STRING, 'UTF8', False), None, ),  # 11
    (12, TType.LIST, 'idcardNumberKeys', (TType.STRING, 'UTF8', False), None, ),  # 12
)
all_structs.append(ncTUsrmFailoverDomainInfo)
ncTUsrmFailoverDomainInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.I64, 'parentId', None, None, ),  # 2
    (3, TType.STRING, 'address', 'UTF8', None, ),  # 3
    (4, TType.I64, 'port', None, None, ),  # 4
    (5, TType.STRING, 'adminName', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'password', 'UTF8', None, ),  # 6
    (7, TType.BOOL, 'useSSL', None, None, ),  # 7
)
all_structs.append(ncTUsrmDomainInfo)
ncTUsrmDomainInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.I32, 'type', None, None, ),  # 2
    (3, TType.I64, 'parentId', None, None, ),  # 3
    (4, TType.STRING, 'name', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'ipAddress', 'UTF8', None, ),  # 5
    (6, TType.I64, 'port', None, None, ),  # 6
    (7, TType.STRING, 'adminName', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'password', 'UTF8', None, ),  # 8
    (9, TType.BOOL, 'status', None, None, ),  # 9
    (10, TType.I32, 'syncStatus', None, None, ),  # 10
    (11, TType.STRUCT, 'config', [ncTUsrmDomainConfig, None], None, ),  # 11
    (12, TType.BOOL, 'useSSL', None, None, ),  # 12
)
all_structs.append(ncTUsrmDomainUser)
ncTUsrmDomainUser.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'loginName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'displayName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'email', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'ouPath', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'objectGUID', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'dnPath', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'idcardNumber', 'UTF8', None, ),  # 7
)
all_structs.append(ncTUsrmDomainOU)
ncTUsrmDomainOU.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'rulerName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'pathName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'parentOUPath', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'objectGUID', 'UTF8', None, ),  # 5
    (6, TType.BOOL, 'importAll', None, None, ),  # 6
)
all_structs.append(ncTUsrmDomainNode)
ncTUsrmDomainNode.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'ous', (TType.STRUCT, [ncTUsrmDomainOU, None], False), None, ),  # 1
    (2, TType.LIST, 'users', (TType.STRUCT, [ncTUsrmDomainUser, None], False), None, ),  # 2
)
all_structs.append(ncTUsrmImportOption)
ncTUsrmImportOption.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'userEmail', None, None, ),  # 1
    (2, TType.BOOL, 'userDisplayName', None, None, ),  # 2
    (3, TType.BOOL, 'userCover', None, None, ),  # 3
    (4, TType.BOOL, 'userIdcardNumber', None, None, ),  # 4
    (5, TType.STRING, 'departmentId', 'UTF8', None, ),  # 5
    (6, TType.I64, 'spaceSize', None, None, ),  # 6
    (7, TType.I32, 'userStatus', None, None, ),  # 7
    (8, TType.I32, 'expireTime', None, None, ),  # 8
)
all_structs.append(ncTUsrmImportContent)
ncTUsrmImportContent.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'domain', [ncTUsrmDomainInfo, None], None, ),  # 1
    (2, TType.STRING, 'domainName', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'users', (TType.STRUCT, [ncTUsrmDomainUser, None], False), None, ),  # 3
    (4, TType.LIST, 'ous', (TType.STRUCT, [ncTUsrmDomainOU, None], False), None, ),  # 4
)
all_structs.append(ncTUsrmImportResult)
ncTUsrmImportResult.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'totalNum', None, None, ),  # 1
    (2, TType.I64, 'successNum', None, None, ),  # 2
    (3, TType.I64, 'failNum', None, None, ),  # 3
    (4, TType.LIST, 'failInfos', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.I64, 'disableNum', None, None, ),  # 5
)
all_structs.append(ncTBatchUsersFile)
ncTBatchUsersFile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fileName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'data', 'BINARY', None, ),  # 2
)
all_structs.append(ncTImportFailInfo)
ncTImportFailInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'index', None, None, ),  # 1
    (2, TType.STRUCT, 'userInfo', [ncTUsrmUserInfo, None], None, ),  # 2
    (3, TType.STRING, 'errorMessage', 'UTF8', None, ),  # 3
    (4, TType.I64, 'errorID', None, None, ),  # 4
)
all_structs.append(ncTOpermOnlineUserInfo)
ncTOpermOnlineUserInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'time', 'UTF8', None, ),  # 1
    (2, TType.I64, 'count', None, None, ),  # 2
)
all_structs.append(ncTPersonGroup)
ncTPersonGroup.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'groupId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'groupName', 'UTF8', None, ),  # 2
    (3, TType.I64, 'personCount', None, None, ),  # 3
)
all_structs.append(ncTSearchPersonGroup)
ncTSearchPersonGroup.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'loginName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'displayName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'groupId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'groupName', 'UTF8', None, ),  # 5
)
all_structs.append(ncTOEMInfo)
ncTOEMInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'section', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'option', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'value', 'BINARY', None, ),  # 3
)
all_structs.append(ncTSmtpSrvConf)
ncTSmtpSrvConf.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'server', 'UTF8', None, ),  # 1
    (2, TType.BYTE, 'safeMode', None, None, ),  # 2
    (3, TType.I32, 'port', None, None, ),  # 3
    (4, TType.STRING, 'email', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'password', 'UTF8', None, ),  # 5
    (6, TType.BOOL, 'openRelay', None, None, ),  # 6
)
all_structs.append(ncTAlarmConfig)
ncTAlarmConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'infoConfig', None, None, ),  # 1
    (2, TType.I32, 'warnConfig', None, None, ),  # 2
    (3, TType.LIST, 'emailToList', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(ncTSetPortResult)
ncTSetPortResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'nodename', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'suc', None, None, ),  # 2
    (3, TType.STRING, 'msg', 'UTF8', None, ),  # 3
)
all_structs.append(ncTFindShareInfo)
ncTFindShareInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sharerType', None, None, ),  # 1
    (2, TType.STRING, 'sharerId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'sharerName', 'UTF8', None, ),  # 3
)
all_structs.append(ncTLinkShareInfo)
ncTLinkShareInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sharerType', None, None, ),  # 1
    (2, TType.STRING, 'sharerId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'sharerName', 'UTF8', None, ),  # 3
)
all_structs.append(ncTShareObjInfo)
ncTShareObjInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'parentId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'parentName', 'UTF8', None, ),  # 4
)
all_structs.append(ncTPermShareInfo)
ncTPermShareInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'strategyId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'sharerUsers', (TType.STRUCT, [ncTShareObjInfo, None], False), None, ),  # 2
    (3, TType.LIST, 'sharerDepts', (TType.STRUCT, [ncTShareObjInfo, None], False), None, ),  # 3
    (4, TType.LIST, 'scopeUsers', (TType.STRUCT, [ncTShareObjInfo, None], False), None, ),  # 4
    (5, TType.LIST, 'scopeDepts', (TType.STRUCT, [ncTShareObjInfo, None], False), None, ),  # 5
    (6, TType.BOOL, 'status', None, None, ),  # 6
)
all_structs.append(ncTAddLeakProofStrategyParam)
ncTAddLeakProofStrategyParam.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'accessorId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'accessorType', None, None, ),  # 2
    (3, TType.I32, 'permValue', None, None, ),  # 3
)
all_structs.append(ncTEditLeakProofStrategyParam)
ncTEditLeakProofStrategyParam.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'strategyId', None, None, ),  # 1
    (2, TType.I32, 'permValue', None, None, ),  # 2
)
all_structs.append(ncTLeakProofStrategyInfo)
ncTLeakProofStrategyInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'strategyId', None, None, ),  # 1
    (2, TType.STRING, 'accessorId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'accessorType', None, None, ),  # 3
    (4, TType.I32, 'permValue', None, None, ),  # 4
    (5, TType.STRING, 'accessorName', 'UTF8', None, ),  # 5
)
all_structs.append(ncTEOSSPortInfo)
ncTEOSSPortInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'httpPort', None, None, ),  # 1
    (2, TType.I32, 'httpsPort', None, None, ),  # 2
)
all_structs.append(ncTClientPackageInfo)
ncTClientPackageInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'ostype', None, None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.I64, 'size', None, None, ),  # 3
    (4, TType.STRING, 'version', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'time', 'UTF8', None, ),  # 5
    (6, TType.BOOL, 'mode', None, None, ),  # 6
    (7, TType.STRING, 'url', 'UTF8', None, ),  # 7
)
all_structs.append(ncTCertInfo)
ncTCertInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'issuer', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'accepter', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'startDate', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'expireDate', 'UTF8', None, ),  # 4
    (5, TType.BOOL, 'hasExpired', None, None, ),  # 5
)
all_structs.append(ncTThirdDBInfo)
ncTThirdDBInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'ip', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'port', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'admin', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'password', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'database', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'charset', 'UTF8', None, ),  # 8
    (9, TType.I32, 'dbType', None, None, ),  # 9
    (10, TType.BOOL, 'status', None, None, ),  # 10
)
all_structs.append(ncTThirdDepartTableInfo)
ncTThirdDepartTableInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'thirdDbId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tableId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'tableName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'departmentIdField', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'departmentNameField', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'departmentPriorityField', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'filter', 'UTF8', None, ),  # 7
    (8, TType.LIST, 'customSubGroupNames', (TType.STRING, 'UTF8', False), None, ),  # 8
)
all_structs.append(ncTThirdDepartRelationTableInfo)
ncTThirdDepartRelationTableInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'thirdDbId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tableId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'tableName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'departmentIdField', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'parentDepartmentIdField', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'parentCustomGroupTableId', 'UTF8', None, ),  # 6
    (7, TType.LIST, 'parentCustomGroupName', (TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.STRING, 'filter', 'UTF8', None, ),  # 8
)
all_structs.append(ncTThirdUserTableInfo)
ncTThirdUserTableInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'thirdDbId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tableId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'tableName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'userIdField', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'userLoginNameField', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'userDisplayNameField', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'userEmailField', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'userPasswordField', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'userStatusField', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'userPriorityField', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'filter', 'UTF8', None, ),  # 11
)
all_structs.append(ncTThirdUserDepartRelationTableInfo)
ncTThirdUserDepartRelationTableInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'thirdDbId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tableId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'tableName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'userIdField', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'parentDepartmentIdField', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'parentCustomGroupTableId', 'UTF8', None, ),  # 6
    (7, TType.LIST, 'parentCustomGroupName', (TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.STRING, 'filter', 'UTF8', None, ),  # 8
)
all_structs.append(ncTThirdTableInfo)
ncTThirdTableInfo.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'thirdDepartTableInfos', (TType.STRUCT, [ncTThirdDepartTableInfo, None], False), None, ),  # 1
    (2, TType.LIST, 'thirdDepartRelationTableInfos', (TType.STRUCT, [ncTThirdDepartRelationTableInfo, None], False), None, ),  # 2
    (3, TType.LIST, 'thirdUserTableInfos', (TType.STRUCT, [ncTThirdUserTableInfo, None], False), None, ),  # 3
    (4, TType.LIST, 'thirdUserRelationTableInfos', (TType.STRUCT, [ncTThirdUserDepartRelationTableInfo, None], False), None, ),  # 4
)
all_structs.append(ncTThirdDbSyncConfig)
ncTThirdDbSyncConfig.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'parentDepartId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'thirdRootName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'thirdRootId', 'UTF8', None, ),  # 3
    (4, TType.I64, 'syncInterval', None, None, ),  # 4
    (5, TType.I64, 'spaceSize', None, None, ),  # 5
    (6, TType.I32, 'userType', None, None, ),  # 6
)
all_structs.append(ncTAuditStrategyInfo)
ncTAuditStrategyInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auditorId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'auditorName', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'checkCSFLevel', None, None, ),  # 3
    (4, TType.LIST, 'obj', (TType.STRUCT, [ncTAuditObject, None], False), None, ),  # 4
)
all_structs.append(ncTAuditWhiteListItem)
ncTAuditWhiteListItem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'departmentId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'departName', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'isEnable', None, None, ),  # 3
)
all_structs.append(ncTDocExchangeInfo)
ncTDocExchangeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'objId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'objType', None, None, ),  # 2
    (3, TType.STRING, 'objName', 'UTF8', None, ),  # 3
    (4, TType.I32, 'limitType', None, None, ),  # 4
)
all_structs.append(ncTDocExchangeRecvArea)
ncTDocExchangeRecvArea.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'recvAreaId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'recvAreaName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'recvAreaKey', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'docNameImportInfo', 'UTF8', None, ),  # 4
    (5, TType.BOOL, 'autoSend', None, None, ),  # 5
)
all_structs.append(ncTWatermarkDocInfo)
ncTWatermarkDocInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'objId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'objName', 'UTF8', None, ),  # 2
    (3, TType.I32, 'objType', None, None, ),  # 3
    (4, TType.I32, 'watermarkType', None, None, ),  # 4
)
all_structs.append(ncTOSTypeForbidLoginInfo)
ncTOSTypeForbidLoginInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'osType', None, None, ),  # 1
    (2, TType.BOOL, 'status', None, None, ),  # 2
)
all_structs.append(ncTThirdPartyAuthConf)
ncTThirdPartyAuthConf.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'thirdPartyId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'thirdPartyName', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'enabled', None, None, ),  # 3
    (4, TType.STRING, 'config', 'UTF8', None, ),  # 4
)
all_structs.append(ncTThirdPartyPluginInfo)
ncTThirdPartyPluginInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'indexId', None, None, ),  # 1
    (2, TType.STRING, 'thirdPartyId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'filename', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'data', 'UTF8', None, ),  # 4
    (5, TType.I32, 'type', None, None, ),  # 5
    (6, TType.STRING, 'objectId', 'UTF8', None, ),  # 6
)
all_structs.append(ncTThirdPartyConfig)
ncTThirdPartyConfig.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'indexId', None, None, ),  # 1
    (2, TType.STRING, 'thirdPartyId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'thirdPartyName', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'enabled', None, None, ),  # 4
    (5, TType.STRING, 'config', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'internalConfig', 'UTF8', None, ),  # 6
    (7, TType.STRUCT, 'plugin', [ncTThirdPartyPluginInfo, None], None, ),  # 7
)
all_structs.append(ncTThirdToolAuthInfo)
ncTThirdToolAuthInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'appid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'appkey', 'UTF8', None, ),  # 2
)
all_structs.append(ncTThirdPartyToolConfig)
ncTThirdPartyToolConfig.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'thirdPartyToolId', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'enabled', None, None, ),  # 2
    (3, TType.STRING, 'url', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'thirdPartyToolName', 'UTF8', None, ),  # 4
    (5, TType.STRUCT, 'authInfo', [ncTThirdToolAuthInfo, None], None, ),  # 5
)
all_structs.append(ncTAccessorInfo)
ncTAccessorInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'type', None, None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
)
all_structs.append(ncTNetInfo)
ncTNetInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ip', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'subNetMask', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'id', 'UTF8', None, ),  # 3
)
all_structs.append(ncTNetAccessorsInfo)
ncTNetAccessorsInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'net', [ncTNetInfo, None], None, ),  # 2
    (3, TType.LIST, 'accessors', (TType.STRUCT, [ncTAccessorInfo, None], False), None, ),  # 3
)
all_structs.append(ncTDocInfo)
ncTDocInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
)
all_structs.append(ncTLoginAccessDeviceInfo)
ncTLoginAccessDeviceInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'udid', 'UTF8', None, ),  # 1
    (2, TType.I32, 'osType', None, None, ),  # 2
    (3, TType.I32, 'disableFlag', None, None, ),  # 3
    (4, TType.I32, 'bindFlag', None, None, ),  # 4
)
all_structs.append(ncTUserLoginAccessControl)
ncTUserLoginAccessControl.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'net', (TType.STRUCT, [ncTNetInfo, None], False), None, ),  # 1
    (2, TType.LIST, 'device', (TType.STRUCT, [ncTLoginAccessDeviceInfo, None], False), None, ),  # 2
)
all_structs.append(ncTReturnInfo)
ncTReturnInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'telNumber', 'UTF8', None, ),  # 1
    (2, TType.I32, 'sendInterval', None, None, ),  # 2
    (3, TType.BOOL, 'isDuplicateSended', None, None, ),  # 3
)
all_structs.append(ncTUserLoginOption)
ncTUserLoginOption.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'loginIp', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'uuid', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'vcode', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'isModify', None, None, ),  # 4
    (5, TType.BOOL, 'isPlainPwd', None, None, ),  # 5
    (6, TType.I32, 'vcodeType', None, None, ),  # 6
    (7, TType.STRING, 'OTP', 'UTF8', None, ),  # 7
)
all_structs.append(ncTUserModifyPwdOption)
ncTUserModifyPwdOption.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'uuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'vcode', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'isForgetPwd', None, None, ),  # 3
)
all_structs.append(ncTDocAuditInfo)
ncTDocAuditInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'processId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.I32, 'auditType', None, None, ),  # 3
    (4, TType.LIST, 'auditorIds', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.STRING, 'destDocId', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'creatorId', 'UTF8', None, ),  # 6
    (7, TType.BOOL, 'status', None, None, ),  # 7
    (8, TType.LIST, 'auditorNames', (TType.STRING, 'UTF8', False), None, ),  # 8
    (9, TType.STRING, 'creatorName', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'destDocName', 'UTF8', None, ),  # 10
    (11, TType.LIST, 'accessorInfos', (TType.STRUCT, [ncTAccessorInfo, None], False), None, ),  # 11
)
all_structs.append(ncTUsrmPwdControlConfig)
ncTUsrmPwdControlConfig.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'pwdControl', None, None, ),  # 1
    (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'lockStatus', None, None, ),  # 3
)
all_structs.append(ncTNTLMResponse)
ncTNTLMResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'sessKey', 'UTF8', None, ),  # 2
)
all_structs.append(ncTNASMountInfo)
ncTNASMountInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'mountName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'gns', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'gnsName', 'UTF8', None, ),  # 3
)
all_structs.append(ncTLimitRateObject)
ncTLimitRateObject.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'objectId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'objectName', 'UTF8', None, ),  # 2
)
all_structs.append(ncTLimitRateConfig)
ncTLimitRateConfig.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isEnabled', None, None, ),  # 1
    (2, TType.I32, 'limitType', None, None, ),  # 2
)
all_structs.append(ncTLimitRateInfo)
ncTLimitRateInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'uploadRate', None, None, ),  # 2
    (3, TType.I32, 'downloadRate', None, None, ),  # 3
    (4, TType.LIST, 'userInfos', (TType.STRUCT, [ncTLimitRateObject, None], False), None, ),  # 4
    (5, TType.LIST, 'depInfos', (TType.STRUCT, [ncTLimitRateObject, None], False), None, ),  # 5
    (6, TType.I32, 'limitType', None, None, ),  # 6
)
all_structs.append(ncTLimitRateObjInfo)
ncTLimitRateObjInfo.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'userInfos', (TType.STRUCT, [ncTLimitRateObject, None], False), None, ),  # 1
    (2, TType.LIST, 'depInfos', (TType.STRUCT, [ncTLimitRateObject, None], False), None, ),  # 2
)
all_structs.append(ncTThirdCSFSysConfig)
ncTThirdCSFSysConfig.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isEnabled', None, None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'only_upload_classified', None, None, ),  # 3
    (4, TType.BOOL, 'only_share_classified', None, None, ),  # 4
    (5, TType.BOOL, 'auto_match_doc_classfication', None, None, ),  # 5
)
all_structs.append(ncTLinkTemplateInfo)
ncTLinkTemplateInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'templateId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'templateType', None, None, ),  # 2
    (3, TType.LIST, 'sharerInfos', (TType.STRUCT, [ncTLinkShareInfo, None], False), None, ),  # 3
    (4, TType.STRING, 'config', 'UTF8', None, ),  # 4
    (5, TType.I64, 'createTime', None, None, ),  # 5
)
all_structs.append(ncTExternalLinkInfo)
ncTExternalLinkInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'permValue', None, None, ),  # 2
    (3, TType.STRING, 'password', 'UTF8', None, ),  # 3
    (4, TType.I32, 'allowExpireDays', None, None, ),  # 4
    (5, TType.I32, 'accessLimit', None, None, ),  # 5
)
all_structs.append(ncTDocDownloadLimitObject)
ncTDocDownloadLimitObject.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'objectId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'objectName', 'UTF8', None, ),  # 2
)
all_structs.append(ncTDocDownloadLimitInfo)
ncTDocDownloadLimitInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I64, 'limitValue', None, None, ),  # 2
    None,  # 3
    (4, TType.LIST, 'userInfos', (TType.STRUCT, [ncTDocDownloadLimitObject, None], False), None, ),  # 4
    (5, TType.LIST, 'depInfos', (TType.STRUCT, [ncTDocDownloadLimitObject, None], False), None, ),  # 5
)
all_structs.append(ncTUserAutoDisableConfig)
ncTUserAutoDisableConfig.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isEnabled', None, None, ),  # 1
    (2, TType.I32, 'days', None, None, ),  # 2
)
all_structs.append(ncTRetainOutLinkVCode)
ncTRetainOutLinkVCode.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'vCode', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'securitVCode', 'UTF8', None, ),  # 2
)
all_structs.append(ncTDeviceBindUserInfo)
ncTDeviceBindUserInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'displayName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'loginName', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'bindStatus', None, None, ),  # 4
)
all_structs.append(ncTVcodeConfig)
ncTVcodeConfig.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isEnable', None, None, ),  # 1
    (2, TType.I32, 'passwdErrCnt', None, None, ),  # 2
)
all_structs.append(ncTVcodeCreateInfo)
ncTVcodeCreateInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'vcode', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'uuid', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'isDuplicateSended', None, None, ),  # 3
)
all_structs.append(ncTRecycleInfo)
ncTRecycleInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'gns', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'setter', 'UTF8', None, ),  # 2
    (3, TType.I32, 'retentionDays', None, None, ),  # 3
)
all_structs.append(ncTSearchUserConfig)
ncTSearchUserConfig.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'exactSearch', None, None, ),  # 1
    (2, TType.I32, 'searchRange', None, None, ),  # 2
    (3, TType.I32, 'searchResults', None, None, ),  # 3
)
all_structs.append(ncTPriorityAccessConfig)
ncTPriorityAccessConfig.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isEnable', None, None, ),  # 1
    (2, TType.I32, 'limitCPU', None, None, ),  # 2
    (3, TType.I32, 'limitMemory', None, None, ),  # 3
    (4, TType.I32, 'limitPriority', None, None, ),  # 4
)
all_structs.append(ncTActiveUserInfo)
ncTActiveUserInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'time', 'UTF8', None, ),  # 1
    (2, TType.I64, 'activeCount', None, None, ),  # 2
    (3, TType.DOUBLE, 'userActivity', None, None, ),  # 3
)
all_structs.append(ncTActiveReportInfo)
ncTActiveReportInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'avgCount', None, None, ),  # 1
    (2, TType.DOUBLE, 'avgActivity', None, None, ),  # 2
    (3, TType.LIST, 'userInfos', (TType.STRUCT, [ncTActiveUserInfo, None], False), None, ),  # 3
)
all_structs.append(ncTThirdPartyRootNodeInfo)
ncTThirdPartyRootNodeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'thirdId', 'UTF8', None, ),  # 2
)
all_structs.append(ncTUsrmThirdPartyUser)
ncTUsrmThirdPartyUser.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'loginName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'displayName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'thirdId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'deptThirdId', 'UTF8', None, ),  # 4
)
all_structs.append(ncTUsrmThirdPartyOU)
ncTUsrmThirdPartyOU.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'thirdId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'parentThirdId', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'importAll', None, None, ),  # 4
)
all_structs.append(ncTUsrmThirdPartyNode)
ncTUsrmThirdPartyNode.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'ous', (TType.STRUCT, [ncTUsrmThirdPartyOU, None], False), None, ),  # 1
    (2, TType.LIST, 'users', (TType.STRUCT, [ncTUsrmThirdPartyUser, None], False), None, ),  # 2
)
all_structs.append(ncTFileCrawlConfig)
ncTFileCrawlConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'strategyId', None, None, ),  # 1
    (2, TType.STRING, 'userId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'loginName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'displayName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'docId', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'docName', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'fileCrawlType', 'UTF8', None, ),  # 7
)
all_structs.append(ncTAutoArchiveObjInfo)
ncTAutoArchiveObjInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
)
all_structs.append(ncTAutoArchiveConfig)
ncTAutoArchiveConfig.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'strategyId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'users', (TType.STRUCT, [ncTAutoArchiveObjInfo, None], False), None, ),  # 2
    (3, TType.LIST, 'departs', (TType.STRUCT, [ncTAutoArchiveObjInfo, None], False), None, ),  # 3
    (4, TType.I64, 'archiveCycle', None, None, ),  # 4
    (5, TType.I64, 'archiveCycleModifyTime', None, None, ),  # 5
    (6, TType.STRING, 'archiveDestDocId', 'UTF8', None, ),  # 6
    (7, TType.I64, 'archiveNextTime', None, None, ),  # 7
)
all_structs.append(ncTGlobalRecycleRetentionConfig)
ncTGlobalRecycleRetentionConfig.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isEnable', None, None, ),  # 1
    (2, TType.I32, 'days', None, None, ),  # 2
)
all_structs.append(ncTAutoCleanObjInfo)
ncTAutoCleanObjInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
)
all_structs.append(ncTAutoCleanConfig)
ncTAutoCleanConfig.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'strategyId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'users', (TType.STRUCT, [ncTAutoCleanObjInfo, None], False), None, ),  # 2
    (3, TType.LIST, 'departs', (TType.STRUCT, [ncTAutoCleanObjInfo, None], False), None, ),  # 3
    (4, TType.I64, 'cleanCycleDays', None, None, ),  # 4
    (5, TType.I64, 'cleanCycleModifyTime', None, None, ),  # 5
    (6, TType.I64, 'cleanNextTime', None, None, ),  # 6
    (7, TType.BOOL, 'enableRemainHours', None, None, ),  # 7
    (8, TType.I64, 'remainHours', None, None, ),  # 8
    (9, TType.I64, 'createTime', None, None, ),  # 9
    (10, TType.BOOL, 'status', None, None, ),  # 10
)
all_structs.append(ncTVirusInfo)
ncTVirusInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fileName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'virusName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'riskType', 'UTF8', None, ),  # 3
    (4, TType.I32, 'processType', None, None, ),  # 4
    (5, TType.STRING, 'parentPath', 'UTF8', None, ),  # 5
    (6, TType.I64, 'startTime', None, None, ),  # 6
    (7, TType.I64, 'endTime', None, None, ),  # 7
)
all_structs.append(ncTScanScope)
ncTScanScope.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'userIds', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.LIST, 'departIds', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.LIST, 'cids', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(ncTScanTaskInfo)
ncTScanTaskInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'scanFilePath', 'UTF8', None, ),  # 1
    (2, TType.I64, 'scanFileCount', None, None, ),  # 2
    (3, TType.I64, 'useTime', None, None, ),  # 3
    (4, TType.I64, 'startTime', None, None, ),  # 4
    (5, TType.I64, 'endTime', None, None, ),  # 5
    (6, TType.DOUBLE, 'progressRate', None, None, ),  # 6
    (7, TType.I32, 'status', None, None, ),  # 7
    (8, TType.I32, 'scanType', None, None, ),  # 8
    (9, TType.STRUCT, 'scanScope', [ncTScanScope, None], None, ),  # 9
    (10, TType.STRING, 'nodeIP', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'nodeId', 'UTF8', None, ),  # 11
)
all_structs.append(ncTVirusDBInfo)
ncTVirusDBInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'virusDBName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'virusDBData', 'UTF8', None, ),  # 2
    (3, TType.I64, 'updateTime', None, None, ),  # 3
)
all_structs.append(ncTLocalSyncObjInfo)
ncTLocalSyncObjInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
)
all_structs.append(ncTLocalSyncConfig)
ncTLocalSyncConfig.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'strategyId', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'openStatus', None, None, ),  # 2
    (3, TType.BOOL, 'deleteStatus', None, None, ),  # 3
    (4, TType.LIST, 'users', (TType.STRUCT, [ncTLocalSyncObjInfo, None], False), None, ),  # 4
    (5, TType.LIST, 'departs', (TType.STRUCT, [ncTLocalSyncObjInfo, None], False), None, ),  # 5
    (6, TType.I64, 'createTime', None, None, ),  # 6
)
all_structs.append(ncTWebhookConfig)
ncTWebhookConfig.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isEnabled', None, None, ),  # 1
    (2, TType.STRING, 'endpointURL', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
