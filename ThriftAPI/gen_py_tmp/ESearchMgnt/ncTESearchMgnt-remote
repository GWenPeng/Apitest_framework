#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ESearchMgnt import ncTESearchMgnt
from ESearchMgnt.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void SetIndexInterval(i32 interval)')
    print('  bool GetServiceStatus()')
    print('  bool Keyscan_IsEnabled()')
    print('  void Keyscan_SetEnabled(bool enable)')
    print('  ncTUserDictInfo Keyscan_AddUserDict(string fname, string fcontent)')
    print('  void Keyscan_DelUserDict(string dictid)')
    print('   Keyscan_GetAllUserDictInfo()')
    print('  string Keyscan_GetUserDictContent(string dictid)')
    print('  string Keyscan_GetDefUserDictContent()')
    print('  i64 FullScan_Begin(i32 taskFlag)')
    print('  void FullScan_Stop()')
    print('  i64 FullScan_Stat()')
    print('  bool IllegalCtrl_IsEnabled()')
    print('  void IllegalCtrl_SetEnabled(bool enable)')
    print('  bool Analysis_LicenseState()')
    print('  void Summary_SetStatus(string field, bool enable)')
    print('  bool Summary_GetStatus(string field)')
    print('  void Summary_SetPicSummaryTagLanguage(string language)')
    print('  string Summary_GetPicSummaryTagLanguage()')
    print('  void Summary_SetNeedThumbnailSize(i64 size)')
    print('  i64 Summary_GetNeedThumbnailSize()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ncTESearchMgnt.Client(protocol)
transport.open()

if cmd == 'SetIndexInterval':
    if len(args) != 1:
        print('SetIndexInterval requires 1 args')
        sys.exit(1)
    pp.pprint(client.SetIndexInterval(eval(args[0]),))

elif cmd == 'GetServiceStatus':
    if len(args) != 0:
        print('GetServiceStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetServiceStatus())

elif cmd == 'Keyscan_IsEnabled':
    if len(args) != 0:
        print('Keyscan_IsEnabled requires 0 args')
        sys.exit(1)
    pp.pprint(client.Keyscan_IsEnabled())

elif cmd == 'Keyscan_SetEnabled':
    if len(args) != 1:
        print('Keyscan_SetEnabled requires 1 args')
        sys.exit(1)
    pp.pprint(client.Keyscan_SetEnabled(eval(args[0]),))

elif cmd == 'Keyscan_AddUserDict':
    if len(args) != 2:
        print('Keyscan_AddUserDict requires 2 args')
        sys.exit(1)
    pp.pprint(client.Keyscan_AddUserDict(args[0], args[1],))

elif cmd == 'Keyscan_DelUserDict':
    if len(args) != 1:
        print('Keyscan_DelUserDict requires 1 args')
        sys.exit(1)
    pp.pprint(client.Keyscan_DelUserDict(args[0],))

elif cmd == 'Keyscan_GetAllUserDictInfo':
    if len(args) != 0:
        print('Keyscan_GetAllUserDictInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.Keyscan_GetAllUserDictInfo())

elif cmd == 'Keyscan_GetUserDictContent':
    if len(args) != 1:
        print('Keyscan_GetUserDictContent requires 1 args')
        sys.exit(1)
    pp.pprint(client.Keyscan_GetUserDictContent(args[0],))

elif cmd == 'Keyscan_GetDefUserDictContent':
    if len(args) != 0:
        print('Keyscan_GetDefUserDictContent requires 0 args')
        sys.exit(1)
    pp.pprint(client.Keyscan_GetDefUserDictContent())

elif cmd == 'FullScan_Begin':
    if len(args) != 1:
        print('FullScan_Begin requires 1 args')
        sys.exit(1)
    pp.pprint(client.FullScan_Begin(eval(args[0]),))

elif cmd == 'FullScan_Stop':
    if len(args) != 0:
        print('FullScan_Stop requires 0 args')
        sys.exit(1)
    pp.pprint(client.FullScan_Stop())

elif cmd == 'FullScan_Stat':
    if len(args) != 0:
        print('FullScan_Stat requires 0 args')
        sys.exit(1)
    pp.pprint(client.FullScan_Stat())

elif cmd == 'IllegalCtrl_IsEnabled':
    if len(args) != 0:
        print('IllegalCtrl_IsEnabled requires 0 args')
        sys.exit(1)
    pp.pprint(client.IllegalCtrl_IsEnabled())

elif cmd == 'IllegalCtrl_SetEnabled':
    if len(args) != 1:
        print('IllegalCtrl_SetEnabled requires 1 args')
        sys.exit(1)
    pp.pprint(client.IllegalCtrl_SetEnabled(eval(args[0]),))

elif cmd == 'Analysis_LicenseState':
    if len(args) != 0:
        print('Analysis_LicenseState requires 0 args')
        sys.exit(1)
    pp.pprint(client.Analysis_LicenseState())

elif cmd == 'Summary_SetStatus':
    if len(args) != 2:
        print('Summary_SetStatus requires 2 args')
        sys.exit(1)
    pp.pprint(client.Summary_SetStatus(args[0], eval(args[1]),))

elif cmd == 'Summary_GetStatus':
    if len(args) != 1:
        print('Summary_GetStatus requires 1 args')
        sys.exit(1)
    pp.pprint(client.Summary_GetStatus(args[0],))

elif cmd == 'Summary_SetPicSummaryTagLanguage':
    if len(args) != 1:
        print('Summary_SetPicSummaryTagLanguage requires 1 args')
        sys.exit(1)
    pp.pprint(client.Summary_SetPicSummaryTagLanguage(args[0],))

elif cmd == 'Summary_GetPicSummaryTagLanguage':
    if len(args) != 0:
        print('Summary_GetPicSummaryTagLanguage requires 0 args')
        sys.exit(1)
    pp.pprint(client.Summary_GetPicSummaryTagLanguage())

elif cmd == 'Summary_SetNeedThumbnailSize':
    if len(args) != 1:
        print('Summary_SetNeedThumbnailSize requires 1 args')
        sys.exit(1)
    pp.pprint(client.Summary_SetNeedThumbnailSize(eval(args[0]),))

elif cmd == 'Summary_GetNeedThumbnailSize':
    if len(args) != 0:
        print('Summary_GetNeedThumbnailSize requires 0 args')
        sys.exit(1)
    pp.pprint(client.Summary_GetNeedThumbnailSize())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
